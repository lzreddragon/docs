"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[2359],{3047:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"contracts/randomness/chainlink","title":"Chainlink VRF Integrator","description":"The ChainlinkVRFIntegrator contract serves as a bridge between the OmniDragon VRF system on Sonic and Chainlink\'s VRF service on Arbitrum, enabling secure cross-chain randomness.","source":"@site/docs/contracts/randomness/chainlink.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/chainlink","permalink":"/contracts/randomness/chainlink","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/chainlink.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"contracts","previous":{"title":"drand Integration","permalink":"/contracts/randomness/drand"},"next":{"title":"Arbitrum VRF Requester","permalink":"/contracts/randomness/arbitrum-vrf"}}');var i=r(4848),t=r(8453);const a={sidebar_position:2},o="Chainlink VRF Integrator",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Contract Details",id:"contract-details",level:2},{value:"Key Storage Variables",id:"key-storage-variables",level:3},{value:"Main Functions",id:"main-functions",level:2},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Randomness Operations",id:"randomness-operations",level:3},{value:"Fee Estimation",id:"fee-estimation",level:3},{value:"Cross-Chain Request Flow",id:"cross-chain-request-flow",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Integration with OmniDragonVRFConsumer",id:"integration-with-omnidragonvrfconsumer",level:2},{value:"Cross-Chain Gas Considerations",id:"cross-chain-gas-considerations",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"chainlink-vrf-integrator",children:"Chainlink VRF Integrator"})}),"\n",(0,i.jsx)(e.p,{children:"The ChainlinkVRFIntegrator contract serves as a bridge between the OmniDragon VRF system on Sonic and Chainlink's VRF service on Arbitrum, enabling secure cross-chain randomness."}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(e.p,{children:"This contract is part of OmniDragon's cross-chain randomness architecture, responsible for forwarding randomness requests to Arbitrum and receiving the results via LayerZero messaging."}),"\n",(0,i.jsx)(e.mermaid,{value:'flowchart TD\n    A[OmniDragonVRFConsumer] --\x3e B[ChainlinkVRFIntegrator]\n    B --\x3e C[LayerZero Endpoint]\n    C --\x3e D[Cross-Chain Messaging]\n    D --\x3e E[ArbitrumVRFRequester]\n    E --\x3e F[Chainlink VRF Coordinator]\n    F --\x3e G[VRF Fulfillment]\n    G --\x3e E\n    E --\x3e D2[Cross-Chain Messaging]\n    D2 --\x3e C2[LayerZero Endpoint]\n    C2 --\x3e B2[ChainlinkVRFIntegrator]\n    B2 --\x3e A2[OmniDragonVRFConsumer]\n    \n    subgraph "Sonic Chain"\n        A\n        B\n        C\n        C2\n        B2\n        A2\n    end\n    \n    subgraph "Arbitrum Chain"\n        E\n        F\n        G\n    end\n    \n    subgraph "LayerZero Network"\n        D\n        D2\n    end'}),"\n",(0,i.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Cross-Chain Integration"}),": Connects Sonic to Arbitrum's Chainlink VRF service"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LayerZero Messaging"}),": Uses LayerZero for secure cross-chain communication"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Request Management"}),": Tracks pending and fulfilled randomness requests"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fallback Mechanism"}),": Provides a backup random value if the cross-chain request fails"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Access Control"}),": Only authorized consumers can request randomness"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"contract-details",children:"Contract Details"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Source:"})," ",(0,i.jsx)(e.a,{href:"https://github.com/wenakita/omnidragon/blob/main/contracts/chainlink/ChainlinkVRFIntegrator.sol",children:(0,i.jsx)(e.code,{children:"ChainlinkVRFIntegrator.sol"})})]}),"\n",(0,i.jsx)(e.h3,{id:"key-storage-variables",children:"Key Storage Variables"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// LayerZero settings\naddress public lzEndpoint;\nuint16 public arbitrumChainId;\nbytes public arbitrumVRFRequesterAddress;\n\n// Randomness state\nuint256 public latestChainlinkValue;\nuint256 public latestRound;\nuint256 public lastUpdateTimestamp;\n\n// Request tracking\nmapping(uint256 => address) public pendingRequests;\nmapping(uint256 => bool) public fulfilledRequests;\n\n// Authorized consumers\nmapping(address => bool) public authorizedConsumers;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"main-functions",children:"Main Functions"}),"\n",(0,i.jsx)(e.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// Update LayerZero settings\nfunction updateLzSettings(\n    address _lzEndpoint,\n    uint16 _arbitrumChainId,\n    bytes memory _arbitrumVRFRequesterAddress\n) external onlyOwner\n\n// Authorizes a consumer to request randomness\nfunction setAuthorizedConsumer(address _consumer, bool _authorized) external onlyOwner\n"})}),"\n",(0,i.jsx)(e.h3,{id:"randomness-operations",children:"Randomness Operations"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// Returns the latest randomness value\nfunction getLatestRandomness() external view override returns (uint256 random, uint256 round)\n\n// Allows a consumer to request randomness\nfunction fulfillRandomness(uint256 _requestId) external override nonReentrant\n\n// Receive randomness response from Arbitrum\nfunction lzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64 _nonce,\n    bytes memory _payload\n) external override onlyLzEndpoint\n"})}),"\n",(0,i.jsx)(e.h3,{id:"fee-estimation",children:"Fee Estimation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// Estimate fees for sending a request to Arbitrum\nfunction estimateFees(uint256 _requestId) external view returns (uint256)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"cross-chain-request-flow",children:"Cross-Chain Request Flow"}),"\n",(0,i.jsx)(e.p,{children:"The randomness request follows a path across multiple chains:"}),"\n",(0,i.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant Consumer\n    participant Integrator as ChainlinkVRFIntegrator\n    participant LZ as LayerZero (Sonic)\n    participant Requester as ArbitrumVRFRequester\n    participant Chainlink\n    \n    Consumer->>Integrator: fulfillRandomness(requestId)\n    activate Integrator\n    \n    Integrator->>Integrator: Record pending request\n    Integrator->>LZ: send(arbitrumChainId, address, payload)\n    \n    LZ->>Requester: lzReceive(srcChainId, srcAddress, payload)\n    activate Requester\n    \n    Requester->>Chainlink: requestRandomWords()\n    Chainlink--\x3e>Requester: fulfillRandomWords(requestId, randomWords)\n    \n    Requester->>LZ: send(sonicChainId, address, payload)\n    deactivate Requester\n    \n    LZ->>Integrator: lzReceive(srcChainId, srcAddress, payload)\n    activate Integrator\n    \n    Integrator->>Integrator: Update latestChainlinkValue\n    Integrator->>Integrator: Increment latestRound\n    Integrator->>Consumer: fulfillRandomness(requestId, randomness)\n    \n    deactivate Integrator"}),"\n",(0,i.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(e.p,{children:"The contract includes several security measures:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Reentrancy Protection"}),": Uses ReentrancyGuard for external calls"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Source Validation"}),": Verifies that LayerZero messages come from the trusted Arbitrum contract"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Request Tracking"}),": Prevents double-fulfillment of randomness requests"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fallback Value"}),": Maintains a seed value that can be used if cross-chain communication fails"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Gas Fee Management"}),": Allows estimation of cross-chain fees for proper transaction execution"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"integration-with-omnidragonvrfconsumer",children:"Integration with OmniDragonVRFConsumer"}),"\n",(0,i.jsx)(e.p,{children:"The ChainlinkVRFIntegrator is one of the randomness sources that feeds into the OmniDragonVRFConsumer. To integrate:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Deploy the ChainlinkVRFIntegrator with the correct LayerZero endpoint and Arbitrum configuration"}),"\n",(0,i.jsxs)(e.li,{children:["Add the integrator to OmniDragonVRFConsumer using ",(0,i.jsx)(e.code,{children:"addNetwork()"})]}),"\n",(0,i.jsx)(e.li,{children:"Assign an appropriate weight for Chainlink VRF in the randomness aggregation"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Example setup:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'// Add Chainlink VRF to the multi-oracle system\nbytes32 chainlinkNetworkId = keccak256("CHAINLINK_VRF");\nvrfConsumer.addNetwork(\n    chainlinkNetworkId,\n    chainlinkIntegratorAddress,\n    200  // Weight: 200 out of total weights\n);\n'})}),"\n",(0,i.jsx)(e.h2,{id:"cross-chain-gas-considerations",children:"Cross-Chain Gas Considerations"}),"\n",(0,i.jsx)(e.p,{children:"When using the ChainlinkVRFIntegrator, be aware of the cross-chain gas costs:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Source Chain Fee"}),": Cost to send the message from Sonic to Arbitrum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Destination Chain Fee"}),": Cost to execute the Chainlink VRF request on Arbitrum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Return Message Fee"}),": Cost to send the randomness result back to Sonic"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"estimateFees()"})," function can be used to calculate the total expected cost for a cross-chain randomness request."]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function a(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);