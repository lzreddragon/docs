"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[4512],{444:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"diagrams/dragon_ecosystem_diagram","title":"Animated Ecosystem Diagrams","description":"Interactive visualizations of the Sonic Red Dragon ecosystem with animation controls","source":"@site/docs/diagrams/dragon_ecosystem_diagram.md","sourceDirName":"diagrams","slug":"/diagrams/dragon_ecosystem_diagram","permalink":"/diagrams/dragon_ecosystem_diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/diagrams/dragon_ecosystem_diagram.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Animated Ecosystem Diagrams","description":"Interactive visualizations of the Sonic Red Dragon ecosystem with animation controls"},"sidebar":"docsSidebar","previous":{"title":"Visualizations","permalink":"/category/diagrams"},"next":{"title":"Guides","permalink":"/category/guides"}}');var s=a(4848),r=a(8453);const o={sidebar_position:1,title:"Animated Ecosystem Diagrams",description:"Interactive visualizations of the Sonic Red Dragon ecosystem with animation controls"},i="Animated Ecosystem Diagrams",c={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Cross-Chain Message Flow",id:"cross-chain-message-flow",level:2},{value:"Governance System",id:"governance-system",level:2},{value:"Jackpot System Flow",id:"jackpot-system-flow",level:2},{value:"Technical Contract Relationships",id:"technical-contract-relationships",level:2},{value:"Tokenomics Flow",id:"tokenomics-flow",level:2},{value:"Fee Distribution",id:"fee-distribution",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"animated-ecosystem-diagrams",children:"Animated Ecosystem Diagrams"})}),"\n",(0,s.jsx)(n.p,{children:"This page demonstrates our interactive ecosystem diagrams with animation controls. Click the Play button below each diagram to see the flow animation."}),"\n",(0,s.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The Sonic Red Dragon architecture consists of several interconnected components that work together to provide cross-chain functionality, governance, and the jackpot system:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    Token["OmniDragon Token"] --\x3e LZ["LayerZero V2"]\n    Token --\x3e Governance["ve69LP Governance"]\n    Token --\x3e JackpotSystem["Jackpot System"]\n    \n    subgraph "Cross-Chain Infrastructure"\n        LZ\n        MessageLib["Message Library"]\n        DVN["Data Verification Network"]\n        Executor["Executor"]\n    end\n    \n    subgraph "Governance System"\n        Governance\n        Treasury["Treasury"]\n        VotingPower["Voting Power"]\n        Rewards["Rewards Distribution"]\n    end\n    \n    subgraph "Jackpot Infrastructure"\n        JackpotSystem\n        JackpotVault["Jackpot Vault"]\n        SwapTrigger["Swap Trigger Oracle"]\n        Distributor["Jackpot Distributor"]\n    end\n    \n    LZ --\x3e MessageLib\n    LZ --\x3e DVN\n    LZ --\x3e Executor\n    \n    Governance --\x3e Treasury\n    Governance --\x3e VotingPower\n    Governance --\x3e Rewards\n    \n    JackpotSystem --\x3e JackpotVault\n    JackpotSystem --\x3e SwapTrigger\n    JackpotSystem --\x3e Distributor\n    \n    classDef highlight fill:#4a80d1,stroke:#333,stroke-width:2px,color:white;\n    class Token,LZ,Governance,JackpotSystem highlight\n\n    style Core fill:#ebf5ff,stroke:#3c71c3,stroke-width:2px,color:#333\n    style Users fill:#fff8e1,stroke:#ffc107,stroke-width:2px,color:#333\n    style Governance fill:#e0f7fa,stroke:#00acc1,stroke-width:2px,color:#333'}),"\n",(0,s.jsx)(n.h2,{id:"cross-chain-message-flow",children:"Cross-Chain Message Flow"}),"\n",(0,s.jsx)(n.p,{children:"This sequence diagram shows how cross-chain messaging works through LayerZero V2:"}),"\n",(0,s.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant UserA as "User (Chain A)"\n    participant TokenA as "DRAGON (Chain A)"\n    participant LZA as "LayerZero Endpoint (Chain A)"\n    participant Relayer as "LayerZero Relayer"\n    participant DVN as "Data Verification Network"\n    participant LZB as "LayerZero Endpoint (Chain B)"\n    participant TokenB as "DRAGON (Chain B)"\n    participant UserB as "User (Chain B)"\n    \n    UserA->>TokenA: sendTokensToChain(ChainB, recipient, amount)\n    TokenA->>TokenA: Burn tokens\n    TokenA->>LZA: Send cross-chain message\n    LZA->>Relayer: Relay message\n    LZA->>DVN: Request data verification\n    DVN--\x3e>LZB: Verify message data\n    Relayer--\x3e>LZB: Deliver message\n    LZB->>TokenB: Receive verified message\n    TokenB->>TokenB: Mint tokens\n    TokenB->>UserB: Token received'}),"\n",(0,s.jsx)(n.h2,{id:"governance-system",children:"Governance System"}),"\n",(0,s.jsx)(n.p,{children:"The governance system is based on the ve69LP (vote-escrowed) model:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    LP["LP Tokens"] --\x3e|"Lock"| ve69LP["ve69LP Tokens"]\n    ve69LP --\x3e|"Grant"| Voting["Voting Power"]\n    ve69LP --\x3e|"Receive"| FeeRewards["Fee Rewards"]\n    ve69LP --\x3e|"Boost"| StakingRewards["Staking Rewards"]\n    \n    Voting --\x3e|"Vote on"| Proposals["Governance Proposals"]\n    Proposals --\x3e|"Execute"| Treasury["Treasury Actions"]\n    Proposals --\x3e|"Control"| Parameters["Protocol Parameters"]\n    \n    classDef highlight fill:#4a80d1,stroke:#333,stroke-width:2px,color:white;\n    class ve69LP highlight'}),"\n",(0,s.jsx)(n.h2,{id:"jackpot-system-flow",children:"Jackpot System Flow"}),"\n",(0,s.jsx)(n.p,{children:"The jackpot system provides on-chain lottery functionality through this process flow:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    Buy["Token Purchase"] --\x3e|"Detected by"| OmniDragon["OmniDragon Token"]\n    OmniDragon --\x3e|"Collect Fees"| FeeProcessor["Fee Processor"]\n    FeeProcessor --\x3e|"6.9% to Jackpot"| JackpotVault["Jackpot Vault"]\n    OmniDragon --\x3e|"Trigger"| SwapOracle["Swap Trigger Oracle"]\n    SwapOracle --\x3e|"Calculate Probability"| Entry["Lottery Entry"]\n    Entry --\x3e|"If Winning Entry"| Distributor["Jackpot Distributor"]\n    JackpotVault --\x3e|"Provide Funds"| Distributor\n    Distributor --\x3e|"Send Reward"| Winner["Winner"]\n    \n    classDef highlight fill:#4a80d1,stroke:#333,stroke-width:2px,color:white;\n    class SwapOracle,JackpotVault,Distributor highlight'}),"\n",(0,s.jsx)(n.h2,{id:"technical-contract-relationships",children:"Technical Contract Relationships"}),"\n",(0,s.jsx)(n.p,{children:"The relationship between the contracts can be visualized as follows:"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n    class OmniDragon {\n        +address swapTrigger\n        +address jackpotVault\n        +address ve69LP\n        +transfer()\n        +_tryProcessLotteryEntry()\n        +processPartnerJackpotEntry()\n        +swapTokensForWrappedNative()\n        +_distributeFees()\n        +sendTokensToChain()\n    }\n    \n    class OmniDragonSwapTriggerOracle {\n        +address omniDragon\n        +address jackpotDistributor\n        +onSwap()\n        +calculateWinProbability()\n        +getAggregatedPrice()\n    }\n    \n    class DragonJackpotVault {\n        +address omniDragon\n        +address distributor\n        +uint256 availableJackpotAmount\n        +addToJackpot()\n        +distributeJackpot()\n        +getAvailableJackpot()\n    }\n    \n    class DragonJackpotDistributor {\n        +address jackpotVault\n        +triggerJackpot()\n        +distributeJackpot()\n    }\n    \n    class ve69LP {\n        +createLock()\n        +increaseLockAmount()\n        +extendLockTime()\n        +withdraw()\n        +getVotingPower()\n    }\n    \n    OmniDragon --\x3e OmniDragonSwapTriggerOracle : triggers\n    OmniDragon --\x3e DragonJackpotVault : sends fees\n    OmniDragon --\x3e ve69LP : sends fees\n    OmniDragonSwapTriggerOracle --\x3e DragonJackpotDistributor : notifies\n    DragonJackpotDistributor --\x3e DragonJackpotVault : requests funds"}),"\n",(0,s.jsx)(n.h2,{id:"tokenomics-flow",children:"Tokenomics Flow"}),"\n",(0,s.jsx)(n.p,{children:"The economic flywheel of the OmniDragon ecosystem:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    Transactions["Transaction Volume"]\n    Fees["Transaction Fees"]\n    Jackpot["Jackpot Pool"]\n    Staking["ve69LP Staking"]\n    Burn["Token Burns"]\n    Price["Token Price"]\n    \n    Transactions --\x3e|"Generate"| Fees\n    Fees --\x3e|"Fund"| Jackpot\n    Fees --\x3e|"Reward"| Staking\n    Fees --\x3e|"Fuel"| Burn\n    \n    Jackpot --\x3e|"Attracts"| Users["Users & Liquidity"]\n    Staking --\x3e|"Locks"| Liquidity["Liquidity"]\n    Burn --\x3e|"Reduces"| Supply["Circulating Supply"]\n    \n    Users --\x3e|"Increase"| Transactions\n    Liquidity --\x3e|"Improves"| TradingExperience["Trading Experience"]\n    Supply --\x3e|"With Growing Demand"| Price\n    \n    TradingExperience --\x3e|"Encourages"| Transactions\n    Price --\x3e|"Attracts"| Users\n    \n    classDef highlight fill:#4a80d1,stroke:#333,stroke-width:2px,color:white;\n    class Transactions,Fees,Jackpot highlight'}),"\n",(0,s.jsx)(n.h2,{id:"fee-distribution",children:"Fee Distribution"}),"\n",(0,s.jsx)(n.p,{children:"The token implements a fee model that distributes transaction fees as follows:"}),"\n",(0,s.jsx)(n.mermaid,{value:'pie title Fee Distribution\n    "Jackpot (6.9%)" : 6.9\n    "Governance (2.41%)" : 2.41\n    "Burn (0.69%)" : 0.69'}),"\n",(0,s.jsx)(n.p,{children:"Each time you press the Play button, you'll see an animated visualization of the diagram that helps you understand the flow and relationships between different components."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);