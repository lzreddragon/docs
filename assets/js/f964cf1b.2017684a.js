"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[1080],{4713:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"contracts/core/token-clean","title":"Sonic Red Dragon Token","description":"The Sonic Red Dragon token (SonicRedDragon.sol) is the core contract of the ecosystem, implementing an ERC-20 token with advanced cross-chain and fee distribution capabilities.","source":"@site/docs/contracts/core/token-clean.md","sourceDirName":"contracts/core","slug":"/contracts/core/token-clean","permalink":"/contracts/core/token-clean","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/core/token-clean.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Sonic Red Dragon Token","sidebar_position":1}}');var t=r(4848),a=r(8453);const i={title:"Sonic Red Dragon Token",sidebar_position:1},o="Sonic Red Dragon Token Contract",l={},c=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Token Fees and Distribution",id:"token-fees-and-distribution",level:2},{value:"Cross-Chain Functionality",id:"cross-chain-functionality",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Jackpot Mechanism",id:"jackpot-mechanism",level:2},{value:"Jackpot Selection Criteria",id:"jackpot-selection-criteria",level:3},{value:"Multi-Chain Ecosystem",id:"multi-chain-ecosystem",level:2},{value:"Contract Implementation",id:"contract-implementation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sonic-red-dragon-token-contract",children:"Sonic Red Dragon Token Contract"})}),"\n",(0,t.jsxs)(n.p,{children:["The Sonic Red Dragon token (",(0,t.jsx)(n.code,{children:"SonicRedDragon.sol"}),") is the core contract of the ecosystem, implementing an ERC-20 token with advanced cross-chain and fee distribution capabilities."]}),"\n",(0,t.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon token implements a robust architecture with multiple integrated systems:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TB\n    %% Main token contract at the center\n    OMNIDRAGON["Sonic Red Dragon Token<br/><i>ERC-20 Implementation</i>"]:::main\n    \n    %% Core components with detailed descriptions\n    subgraph TokenCore ["Core Token Infrastructure"]\n        direction TB\n        \n        ERC20["ERC-20 Standard<br/><small>\u2022 Basic token functions<br/>\u2022 Transfer & approve<br/>\u2022 Balance tracking</small>"]:::standard\n        \n        OWNABLE["Access Control<br/><small>\u2022 Owner privileges<br/>\u2022 Role management<br/>\u2022 Function access limits</small>"]:::standard\n        \n        UPGRADEABLE["Upgradeability<br/><small>\u2022 Proxy pattern<br/>\u2022 Logic separation<br/>\u2022 Future-proof design</small>"]:::standard\n        \n        PAUSABLE["Emergency Controls<br/><small>\u2022 Pause transfers<br/>\u2022 Circuit breakers<br/>\u2022 Recovery mechanisms</small>"]:::standard\n    end\n    \n    %% Fee system with components\n    subgraph FeeMechanism ["Fee Ecosystem"]\n        direction TB\n        \n        FEE_CALC["Fee Calculator<br/><small>\u2022 Transaction type detection<br/>\u2022 Rate application<br/>\u2022 Dynamic adjustments</small>"]:::fee\n        \n        FEE_DISTRIBUTOR["Distributor<br/><small>\u2022 Multi-destination routing<br/>\u2022 Automatic splitting<br/>\u2022 Threshold-based execution</small>"]:::fee\n        \n        ADAPTIVE_FEE["Adaptive Logic<br/><small>\u2022 Market condition response<br/>\u2022 Volume-based adjustments<br/>\u2022 Anti-whale protections</small>"]:::fee\n    end\n    \n    %% Cross-chain components\n    subgraph CrossChainSystem ["LayerZero Cross-Chain Integration"]\n        direction TB\n        \n        BRIDGE["Sonic Red Dragon Bridge<br/><small>\u2022 Token locking/burning<br/>\u2022 Secure transfers<br/>\u2022 Chain abstraction</small>"]:::bridge\n        \n        MSG_HANDLER["Message Handler<br/><small>\u2022 Payload processing<br/>\u2022 Security verification<br/>\u2022 Transaction reconstruction</small>"]:::bridge\n        \n        ENDPOINT["LayerZero Endpoint<br/><small>\u2022 Cross-chain messaging<br/>\u2022 Proof validation<br/>\u2022 Gas management</small>"]:::bridge\n        \n        ADAPTER["Chain Adapter<br/><small>\u2022 Chain-specific logic<br/>\u2022 Gas estimation<br/>\u2022 Version compatibility</small>"]:::bridge\n    end\n    \n    %% Advanced features\n    subgraph TokenFeatures ["Unique Value Propositions"]\n        direction TB\n        \n        JACKPOT["Jackpot System<br/><small>\u2022 Random rewards<br/>\u2022 Fee accumulation<br/>\u2022 Transparent distribution</small>"]:::feature\n        \n        STAKING["Staking Mechanism<br/><small>\u2022 Flexible locks<br/>\u2022 Reward multipliers<br/>\u2022 Governance rights</small>"]:::feature\n        \n        GOVERNANCE["DAO Governance<br/><small>\u2022 Protocol parameters<br/>\u2022 Fee adjustment voting<br/>\u2022 Feature proposals</small>"]:::feature\n        \n        RANDOMNESS["dRand Integration<br/><small>\u2022 Verifiable randomness<br/>\u2022 Tamper-proof draws<br/>\u2022 Cross-chain consistency</small>"]:::feature\n    end\n    \n    %% Connect everything to the main token\n    TokenCore -.-> OMNIDRAGON\n    FeeMechanism -.-> OMNIDRAGON\n    CrossChainSystem -.-> OMNIDRAGON\n    TokenFeatures -.-> OMNIDRAGON\n    \n    %% Detailed connections between components\n    FEE_CALC --\x3e|"Calculates<br/>amounts"| FEE_DISTRIBUTOR\n    ADAPTIVE_FEE --\x3e|"Adjusts<br/>parameters"| FEE_CALC\n    FEE_DISTRIBUTOR --\x3e|"Funds<br/>jackpot"| JACKPOT\n    FEE_DISTRIBUTOR --\x3e|"Provides<br/>rewards"| STAKING\n    \n    BRIDGE --\x3e|"Uses"| MSG_HANDLER\n    MSG_HANDLER --\x3e|"Sends via"| ENDPOINT\n    ENDPOINT --\x3e|"Uses"| ADAPTER\n    \n    JACKPOT --\x3e|"Uses"| RANDOMNESS\n    GOVERNANCE --\x3e|"Controls"| ADAPTIVE_FEE\n    \n    %% Connect to external systems\n    DEX[("Decentralized<br/>Exchanges")]:::external\n    DEX -.->|"Trading<br>fees"| FEE_CALC\n    \n    CHAINS[("Supported<br/>Blockchains")]:::external\n    CHAINS -.->|"Connected<br/>via"| ADAPTER\n    \n    %% Apply styling for components with better colors\n    classDef main fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold;stroke-width:3px;font-size:18px\n    classDef standard fill:#42a5f5;stroke:#1e88e5;color:#ffffff\n    classDef fee fill:#66bb6a;stroke:#43a047;color:#ffffff\n    classDef bridge fill:#ab47bc;stroke:#8e24aa;color:#ffffff\n    classDef feature fill:#ffb74d;stroke:#ff9800;color:#ffffff\n    classDef external fill:#78909c;stroke:#455a64;color:#ffffff;stroke-dasharray:5 5\n    \n    %% Style subgraphs\n    style TokenCore fill:rgba(33,150,243,0.1);stroke:#bbdefb;color:#1565c0;stroke-width:2px\n    style FeeMechanism fill:rgba(76,175,80,0.1);stroke:#c8e6c9;color:#2e7d32;stroke-width:2px\n    style CrossChainSystem fill:rgba(156,39,176,0.1);stroke:#e1bee7;color:#6a1b9a;stroke-width:2px\n    style TokenFeatures fill:rgba(255,152,0,0.1);stroke:#ffecb3;color:#ff8f00;stroke-width:2px\n    \n    %% Style the main token with shadow effect\n    style OMNIDRAGON filter:drop-shadow(0px 5px 8px rgba(0,0,0,0.2))'}),"\n",(0,t.jsx)(n.h2,{id:"token-fees-and-distribution",children:"Token Fees and Distribution"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon token implements an innovative fee system with adaptive rates and multi-destination distribution:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    %% Define transaction sources\n    USER([User Account]):::user\n    DEX([DEX Trading]):::exchange\n    CROSS([Cross-Chain]):::bridge\n    \n    %% Transaction flows\n    USER --\x3e |"Transfer"| TX_TRANSFER[/"Transfer Transaction"/]:::tx\n    DEX --\x3e |"Buy/Sell"| TX_TRADE[/"Trade Transaction"/]:::tx\n    CROSS --\x3e |"Bridge"| TX_BRIDGE[/"Bridge Transaction"/]:::tx\n    \n    %% Group transactions\n    subgraph Transactions\n        TX_TRANSFER\n        TX_TRADE\n        TX_BRIDGE\n    end\n    \n    %% Fee calculation\n    TX_TRANSFER --\x3e |"2% Fee"| FEE_ENGINE{{"Fee Engine"}}:::logic\n    TX_TRADE --\x3e |"10% Fee"| FEE_ENGINE\n    TX_BRIDGE --\x3e |"0% Fee"| FEE_ENGINE\n    \n    %% Fee modifiers\n    subgraph FeeModifiers ["Dynamic Fee Adjustments"]\n        direction TB\n        TIME_HOLD["Holding Time<br>-0.5% per week<br>(up to -2%)"]:::modifier\n        AMOUNT["Transaction Size<br>+0.5% for large tx<br>-0.5% for small tx"]:::modifier\n        LOYALTY["Loyalty Program<br>-1% for members"]:::modifier\n    end\n    \n    FeeModifiers -.-> |"Modifies"| FEE_ENGINE\n    \n    %% Fee distribution\n    FEE_ENGINE --\x3e DISTRIBUTOR{{"Fee Distributor<br>Contract"}}:::core\n    \n    %% Distribution paths with explanations\n    DISTRIBUTOR --\x3e|"69% \u2192 JACKPOT"| JACKPOT["Jackpot Vault<br><i>Funds random rewards</i>"]:::jackpot\n    DISTRIBUTOR --\x3e|"10% \u2192 LIQUIDITY"| LIQUIDITY["Liquidity Pool<br><i>Ensures trading depth</i>"]:::pool\n    DISTRIBUTOR --\x3e|"5% \u2192 MARKETING"| MARKETING["Marketing Fund<br><i>Promotion & outreach</i>"]:::ops\n    DISTRIBUTOR --\x3e|"5% \u2192 DEVELOPMENT"| DEV["Development Fund<br><i>Technical improvements</i>"]:::ops\n    DISTRIBUTOR --\x3e|"11% \u2192 STAKING"| STAKING["Staking Rewards<br><i>Holder incentives</i>"]:::rewards\n    \n    %% Define jackpot trigger\n    JACKPOT -.->|"Fills"| JP_METER(("Jackpot<br>Meter")):::meter\n    JP_METER --\x3e|"Triggers<br>when full"| JP_DRAW{{"Random Draw<br>System"}}:::logic\n    JP_DRAW --\x3e|"Selects<br>Winner"| REWARD(["Lucky Holder<br>Receives Jackpot"]):::winner\n    \n    %% Styling\n    classDef user fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold\n    classDef exchange fill:#ff9800;stroke:#f57c00;color:#ffffff;font-weight:bold\n    classDef bridge fill:#9c27b0;stroke:#7b1fa2;color:#ffffff;font-weight:bold\n    classDef tx fill:#78909c;stroke:#546e7a;color:#ffffff\n    classDef logic fill:#26a69a;stroke:#00897b;color:#ffffff;font-weight:bold\n    classDef core fill:#5c6bc0;stroke:#3949ab;color:#ffffff;font-weight:bold\n    classDef modifier fill:#7e57c2;stroke:#5e35b1;color:#ffffff\n    classDef jackpot fill:#ffa000;stroke:#ff8f00;color:#ffffff;font-weight:bold\n    classDef pool fill:#43a047;stroke:#388e3c;color:#ffffff;font-weight:bold\n    classDef ops fill:#5c6bc0;stroke:#3949ab;color:#ffffff\n    classDef rewards fill:#ec407a;stroke:#d81b60;color:#ffffff;font-weight:bold\n    classDef meter fill:#f44336;stroke:#e53935;color:#ffffff\n    classDef winner fill:#d4af37;stroke:#aa8c2c;color:#ffffff;font-weight:bold\n    \n    %% Style subgraphs\n    style Transactions fill:#37474f;stroke:#263238;color:#ffffff;stroke-width:2px\n    style FeeModifiers fill:#4527a0;stroke:#311b92;color:#ffffff;stroke-width:2px'}),"\n",(0,t.jsx)(n.h2,{id:"cross-chain-functionality",children:"Cross-Chain Functionality"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon token seamlessly integrates with LayerZero for cross-chain transfers:"}),"\n",(0,t.jsx)(n.mermaid,{value:'sequenceDiagram\n    autonumber\n    \n    %% Define participants with icons (using letters as icons)\n    participant User as "User"\n    participant Source as "Sonic Red Dragon<br/>Source Chain"\n    participant Bridge as "Cross-Chain<br/>Bridge"\n    participant LZ as "LayerZero<br/>Endpoint"\n    participant Relayers as "LayerZero<br/>Relayer Network"\n    participant Target as "Sonic Red Dragon<br/>Target Chain"\n    \n    %% Style with boundaries\n    rect rgba(74, 128, 209, 0.1)\n    Note over User,Source: Phase 1: Initiate Cross-Chain Transfer\n    \n    %% Initialize transaction\n    User->>+Source: sendTokensToChain(chainId, recipient, amount, { value: fee })\n    Source->>Source: validateRequest(chainId, recipient, amount)\n    Source->>Source: calculateFees(chainId, recipient, amount)\n    \n    %% Apply fees\n    Source->>Source: applyTransferFee(amount)\n    Note right of Source: Optional: fees can<br/>be waived for<br/>cross-chain transfers\n    \n    %% Prepare message\n    Source->>+Bridge: initiateTransfer(chainId, recipient, netAmount)\n    Bridge->>Bridge: validateRemoteChain(chainId)\n    Bridge->>Bridge: prepareTransferPayload(chainId, recipient, netAmount)\n    \n    %% Burn tokens on source\n    Bridge->>Source: burnTokens(netAmount)\n    Source--\x3e>Bridge: tokens burned successfully\n    end\n    \n    rect rgba(204, 90, 43, 0.1) \n    Note over Bridge,Relayers: Phase 2: LayerZero Message Transmission\n    \n    %% Send via LayerZero\n    Bridge->>+LZ: send(chainId, targetAddress, payload, refundAddress, adapterParams)\n    LZ->>LZ: validateSendParameters()\n    LZ->>LZ: payFees(msg.value)\n    LZ->>+Relayers: submitMessage(chainId, targetAddress, payload)\n    Relayers--\x3e>-LZ: messageAccepted(messageHash)\n    LZ--\x3e>-Bridge: messageSent(messageHash)\n    Bridge--\x3e>-Source: transferInitiated()\n    Source--\x3e>-User: transferSuccessful(txHash)\n    end\n    \n    rect rgba(56, 142, 60, 0.1)\n    Note over Relayers,Target: Phase 3: Destination Chain Reception\n    \n    %% Block separating source from destination chain\n    Note over Relayers,Target: ================== CROSS-CHAIN BOUNDARY ==================\n    \n    %% Deliver to destination\n    Relayers->>+Target: deliverMessage(sourceChainId, sourceAddress, payload)\n    Target->>Target: validateIncomingMessage(sourceChainId, sourceAddress)\n    Target->>Target: handlePayload(payload)\n    Target->>Target: extractTransferData(payload)\n    \n    %% Mint tokens on target chain\n    Target->>Target: mint(recipient, amount)\n    Note right of Target: Ensures total supply<br/>stays consistent<br/>across all chains\n    \n    Target--\x3e>Target: emitTokensReceived(sourceChainId, sender, recipient, amount)\n    Target--\x3e>-Relayers: messageProcessed(messageHash)\n    \n    %% Notify user (off-chain)\n    Target--\x3e>User: TokensReceived event (monitored by dApp)\n    end\n    \n    %% Style with notes\n    Note over Source,Bridge: Any failure on source chain will revert the transaction\n    Note over Relayers: LayerZero ensures message delivery with proof validation\n    Note over Target: Target chain operations are atomic & consistent'}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon token implements several key modules:"}),"\n",(0,t.jsx)(n.mermaid,{value:"classDiagram\n    %% Define main contract and inherited functionality\n    class SonicRedDragon {\n        %% Core token properties\n        -string name\n        -string symbol\n        -uint8 decimals\n        -uint256 totalSupply\n        \n        %% Fee system\n        -uint256 buyFeeRate\n        -uint256 sellFeeRate\n        -uint256 transferFeeRate\n        -address feeCollector\n        \n        %% Cross-chain\n        -address bridge\n        -address chainRegistry\n        \n        %% Public functions\n        +transfer(address to, uint256 amount) bool\n        +transferFrom(address from, address to, uint256 amount) bool\n        +approve(address spender, uint256 amount) bool\n        +sendTokensToChain(uint16 chainId, address to, uint256 amount)\n        +receiveTokensFromChain(uint16 chainId, address to, uint256 amount)\n        +collectFees(address from, address to, uint256 amount) uint256\n    }\n    \n    class ERC20 {\n        +balanceOf(address) uint256\n        +totalSupply() uint256\n        +transfer(address to, uint256 amount) bool\n        +approve(address spender, uint256 amount) bool\n    }\n    \n    class Ownable {\n        -address owner\n        +onlyOwner() modifier\n        +transferOwnership(address newOwner)\n    }\n    \n    class Pausable {\n        -bool paused\n        +whenNotPaused() modifier\n        +pause()\n        +unpause()\n    }\n    \n    class CrossChainEnabled {\n        -address bridge\n        +onlyBridge() modifier\n        +setBridge(address newBridge)\n    }\n    \n    %% Define relationships\n    ERC20 <|-- SonicRedDragon : inherits\n    Ownable <|-- SonicRedDragon : inherits\n    Pausable <|-- SonicRedDragon : inherits\n    CrossChainEnabled <|-- SonicRedDragon : inherits\n    \n    %% Apply styling\n    classDef main fill:#e3f2fd;stroke:#1e88e5;color:#0d47a1\n    classDef inherited fill:#e8f5e9;stroke:#43a047;color:#1b5e20\n    classDef extension fill:#f3e5f5;stroke:#8e24aa;color:#4a148c\n    \n    class SonicRedDragon main\n    class ERC20 inherited\n    class Ownable inherited\n    class Pausable inherited\n    class CrossChainEnabled extension"}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsx)(n.p,{children:"Based on the contract implementation, the Sonic Red Dragon token includes:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Adaptive Fee System"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Different fee rates for buy, sell, and transfer operations"}),"\n",(0,t.jsx)(n.li,{children:"Fee splitting to multiple destinations"}),"\n",(0,t.jsx)(n.li,{children:"Configurable fee parameters by governance"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Cross-Chain Integration"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Native integration with LayerZero protocol"}),"\n",(0,t.jsx)(n.li,{children:"Support for multiple EVM-compatible chains"}),"\n",(0,t.jsx)(n.li,{children:"Consistent token supply across all chains"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Jackpot System Integration"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Direct fee allocation to jackpot vault"}),"\n",(0,t.jsx)(n.li,{children:"Swap trigger for lottery entries"}),"\n",(0,t.jsx)(n.li,{children:"Configurable jackpot parameters"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Security Features"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pausable transfers for emergency situations"}),"\n",(0,t.jsx)(n.li,{children:"Role-based access control"}),"\n",(0,t.jsx)(n.li,{children:"Upgradeable design via proxy pattern"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"jackpot-mechanism",children:"Jackpot Mechanism"}),"\n",(0,t.jsx)(n.p,{children:"Sonic Red Dragon implements an innovative on-chain jackpot system powered by verifiable randomness:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TB\n    %% Transaction starts the process\n    TRANSACTION([Token Transaction]):::tx --\x3e |"Generates<br/>fees"| FEE_COLLECTOR{{"Fee Collector"}}:::core\n    \n    %% Fee distribution\n    FEE_COLLECTOR --\x3e |"6.9% of fees"| JACKPOT_VAULT[("Jackpot Vault<br/><small>Accumulates tokens</small>")]:::vault\n    \n    %% Threshold checking\n    JACKPOT_VAULT --\x3e THRESHOLD_CHECK{"Threshold<br/>Reached?"}:::decision\n    THRESHOLD_CHECK --\x3e|"No"| CONTINUE([Continue<br/>Accumulating]):::action\n    \n    %% Prepare for drawing\n    THRESHOLD_CHECK --\x3e|"Yes"| PREPARE_DRAW[/"Prepare for<br/>Jackpot Draw"/]:::process\n    \n    %% Get randomness\n    PREPARE_DRAW --\x3e |"Request<br/>randomness"| DRAND["dRand Beacon<br/><small>Verifiable<br/>random source</small>"]:::random\n    DRAND --\x3e |"Returns secure<br/>random value"| SELECT_WINNER{{"Winner<br/>Selection<br/>Algorithm"}}:::algorithm\n    \n    %% Eligible wallets\n    subgraph EligibleHolders ["Eligible Token Holders"]\n        direction LR\n        HOLDER1(["Holder 1<br/><small>probability based<br/>on balance</small>"]):::holder\n        HOLDER2(["Holder 2<br/><small>probability based<br/>on balance</small>"]):::holder\n        HOLDER3(["Holder 3<br/><small>probability based<br/>on balance</small>"]):::holder\n        HOLDER_MORE(["...more<br/>holders"]):::holder\n    end\n    \n    %% Connect eligibility to algorithm\n    EligibleHolders --\x3e |"Considered for<br/>selection"| SELECT_WINNER\n    \n    %% Winner determination\n    SELECT_WINNER --\x3e|"Selects winner<br/>proportional to<br/>token holdings"| WINNER[("Lucky Winner<br/><small>Receives jackpot</small>")]:::winner\n    \n    %% Token transfer\n    JACKPOT_VAULT --\x3e|"Transfers<br/>accumulated tokens"| WINNER\n    \n    %% Emit result event\n    WINNER --\x3e|"Emits event"| JACKPOT_EVENT(["JackpotWon Event<br/><small>Recorded on-chain</small>"]):::event\n    \n    %% Final actions\n    JACKPOT_EVENT --\x3e RESET([Reset Jackpot<br/>for Next Round]):::final\n    \n    %% Styling\n    classDef tx fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold\n    classDef core fill:#5c6bc0;stroke:#3949ab;color:#ffffff;font-weight:bold\n    classDef vault fill:#ffa000;stroke:#ff8f00;color:#ffffff;font-weight:bold\n    classDef decision fill:#26a69a;stroke:#00897b;color:#ffffff;font-weight:bold\n    classDef action fill:#78909c;stroke:#546e7a;color:#ffffff\n    classDef process fill:#9c27b0;stroke:#7b1fa2;color:#ffffff;font-weight:bold\n    classDef random fill:#d81b60;stroke:#c2185b;color:#ffffff;font-weight:bold\n    classDef algorithm fill:#8e24aa;stroke:#6a1b9a;color:#ffffff;font-weight:bold\n    classDef holder fill:#43a047;stroke:#388e3c;color:#ffffff\n    classDef winner fill:#d4af37;stroke:#c6a636;color:#ffffff;font-weight:bold\n    classDef event fill:#f57c00;stroke:#ef6c00;color:#ffffff\n    classDef final fill:#6d4c41;stroke:#5d4037;color:#ffffff;font-weight:bold\n    \n    %% Subgraph styling\n    style EligibleHolders fill:rgba(76,175,80,0.1);stroke:#c8e6c9;color:#2e7d32;stroke-width:2px'}),"\n",(0,t.jsx)(n.h3,{id:"jackpot-selection-criteria",children:"Jackpot Selection Criteria"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon jackpot selection process is designed to be fair and transparent:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Threshold Triggering:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Jackpot draws are triggered when the vault reaches a predetermined token threshold"}),"\n",(0,t.jsx)(n.li,{children:"Currently set to 100,000 DRAGON tokens (approximately $10,000 at launch price)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Eligibility Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Must hold a minimum of 1,000 DRAGON tokens"}),"\n",(0,t.jsx)(n.li,{children:"Tokens must have been held for at least 24 hours"}),"\n",(0,t.jsx)(n.li,{children:"Cannot have bought/sold within 6 hours of draw"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Selection Probability:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Proportional to token holdings (more tokens = higher chance)"}),"\n",(0,t.jsx)(n.li,{children:"Capped at 5% maximum probability for any single wallet"}),"\n",(0,t.jsx)(n.li,{children:"Long-term holders receive bonus weight (+0.5% per week held, up to +10%)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Verifiable Randomness:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uses dRand's verifiable random function (VRF) as entropy source"}),"\n",(0,t.jsx)(n.li,{children:"Random seed combined with sorted eligible holder list"}),"\n",(0,t.jsx)(n.li,{children:"Full verification possible through on-chain transaction data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"multi-chain-ecosystem",children:"Multi-Chain Ecosystem"}),"\n",(0,t.jsx)(n.p,{children:"Sonic Red Dragon operates seamlessly across multiple blockchain networks, maintaining consistent state and features:"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TB\n    %% Main token deployed on multiple chains\n    subgraph "Ethereum Mainnet"\n        ETH_TOKEN("Sonic Red Dragon<br/>Token"):::mainnet\n        ETH_JACKPOT("Jackpot Vault"):::mainnet\n        ETH_LIQUIDITY("Liquidity Pool"):::mainnet\n        ETH_ENDPOINT("LayerZero<br/>Endpoint"):::endpoint\n        \n        ETH_TOKEN --\x3e|"Feeds"| ETH_JACKPOT\n        ETH_TOKEN --\x3e|"Enhances"| ETH_LIQUIDITY\n        ETH_TOKEN -.->|"Connects via"| ETH_ENDPOINT\n    end\n    \n    subgraph "BNB Chain"\n        BSC_TOKEN("Sonic Red Dragon<br/>Token"):::bsc\n        BSC_JACKPOT("Jackpot Vault"):::bsc\n        BSC_LIQUIDITY("Liquidity Pool"):::bsc\n        BSC_ENDPOINT("LayerZero<br/>Endpoint"):::endpoint\n        \n        BSC_TOKEN --\x3e|"Feeds"| BSC_JACKPOT\n        BSC_TOKEN --\x3e|"Enhances"| BSC_LIQUIDITY\n        BSC_TOKEN -.->|"Connects via"| BSC_ENDPOINT\n    end\n    \n    subgraph "Arbitrum"\n        ARB_TOKEN("Sonic Red Dragon<br/>Token"):::arb\n        ARB_JACKPOT("Jackpot Vault"):::arb\n        ARB_LIQUIDITY("Liquidity Pool"):::arb\n        ARB_ENDPOINT("LayerZero<br/>Endpoint"):::endpoint\n        \n        ARB_TOKEN --\x3e|"Feeds"| ARB_JACKPOT\n        ARB_TOKEN --\x3e|"Enhances"| ARB_LIQUIDITY\n        ARB_TOKEN -.->|"Connects via"| ARB_ENDPOINT\n    end\n    \n    subgraph "Avalanche"\n        AVAX_TOKEN("Sonic Red Dragon<br/>Token"):::avax\n        AVAX_JACKPOT("Jackpot Vault"):::avax\n        AVAX_LIQUIDITY("Liquidity Pool"):::avax\n        AVAX_ENDPOINT("LayerZero<br/>Endpoint"):::endpoint\n        \n        AVAX_TOKEN --\x3e|"Feeds"| AVAX_JACKPOT\n        AVAX_TOKEN --\x3e|"Enhances"| AVAX_LIQUIDITY\n        AVAX_TOKEN -.->|"Connects via"| AVAX_ENDPOINT\n    end\n    \n    %% Central coordinator\n    DRAND_COORDINATOR[("dRand Beacon<br/><small>Verifiable Randomness</small>")]:::core\n    \n    %% Cross-chain connections\n    ETH_ENDPOINT <--\x3e|"Messages"| BSC_ENDPOINT\n    ETH_ENDPOINT <--\x3e|"Messages"| ARB_ENDPOINT\n    ETH_ENDPOINT <--\x3e|"Messages"| AVAX_ENDPOINT\n    BSC_ENDPOINT <--\x3e|"Messages"| ARB_ENDPOINT\n    BSC_ENDPOINT <--\x3e|"Messages"| AVAX_ENDPOINT\n    ARB_ENDPOINT <--\x3e|"Messages"| AVAX_ENDPOINT\n    \n    %% Random beacon\n    DRAND_COORDINATOR -.->|"Randomness"| ETH_JACKPOT\n    DRAND_COORDINATOR -.->|"Randomness"| BSC_JACKPOT\n    DRAND_COORDINATOR -.->|"Randomness"| ARB_JACKPOT\n    DRAND_COORDINATOR -.->|"Randomness"| AVAX_JACKPOT\n    \n    %% User interaction\n    USER(("User")):::user\n    \n    USER --\x3e|"Interacts"| ETH_TOKEN\n    USER --\x3e|"Interacts"| BSC_TOKEN\n    USER --\x3e|"Interacts"| ARB_TOKEN\n    USER --\x3e|"Interacts"| AVAX_TOKEN\n    \n    %% Styling\n    classDef mainnet fill:#627eea;stroke:#3763e5;color:#ffffff;font-weight:bold\n    classDef bsc fill:#f0b90b;stroke:#d9a509;color:#000000;font-weight:bold\n    classDef arb fill:#28a0f0;stroke:#1a93e4;color:#ffffff;font-weight:bold\n    classDef avax fill:#e84142;stroke:#d4292a;color:#ffffff;font-weight:bold\n    classDef endpoint fill:#1e293b;stroke:#0f172a;color:#ffffff\n    classDef user fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold\n    classDef core fill:#cc5a2b;stroke:#b54d24;color:#ffffff;font-weight:bold\n    \n    %% Subgraph styling\n    style "Ethereum Mainnet" fill:rgba(98,126,234,0.1);stroke:#627eea;color:#627eea;stroke-width:2px\n    style "BNB Chain" fill:rgba(240,185,11,0.1);stroke:#f0b90b;color:#704e06;stroke-width:2px\n    style "Arbitrum" fill:rgba(40,160,240,0.1);stroke:#28a0f0;color:#28a0f0;stroke-width:2px\n    style "Avalanche" fill:rgba(232,65,66,0.1);stroke:#e84142;color:#e84142;stroke-width:2px'}),"\n",(0,t.jsx)(n.h2,{id:"contract-implementation",children:"Contract Implementation"}),"\n",(0,t.jsx)(n.p,{children:"The Sonic Red Dragon smart contract architecture uses multiple inheritance and specialized components:"}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n    %% Define contracts with expanded details\n    class SonicRedDragon {\n        %% Token Identity\n        -string name = "Sonic Red Dragon"\n        -string symbol = "DRAGON"\n        -uint8 decimals = 18\n        -uint256 totalSupply\n        \n        %% Fee Configuration\n        -uint256 buyFeeRate\n        -uint256 sellFeeRate\n        -uint256 transferFeeRate\n        -FeeDistributor feeDistributor\n        \n        %% Cross-Chain Configuration\n        -ILayerZeroEndpoint endpoint\n        -mapping(uint16 => address) trustedRemotes\n        -uint256 nativeFee\n        \n        %% Access Control\n        -address owner\n        -mapping(address => bool) operators\n        \n        %% Lifecycle Methods\n        +constructor(address _endpoint)\n        +initialize(string name, string symbol) onlyProxy\n        \n        %% ERC20 Overrides\n        +transfer(address to, uint256 amount) returns bool\n        +transferFrom(address from, address to, uint256 amount) returns bool\n        \n        %% Cross-Chain Methods\n        +sendTokensToChain(uint16 chainId, address to, uint256 amount) payable\n        +receiveTokensFromChain(uint16 chainId, bytes from, uint256 amount)\n        +estimateFees(uint16 chainId, address to, uint256 amount) returns uint256\n        +setPeer(uint16 chainId, address peer) onlyOwner\n        \n        %% Fee Mechanisms\n        +getFeeAmount(FeeType feeType, uint256 amount) returns uint256\n        +setFeeRates(uint256 _buyFee, uint256 _sellFee, uint256 _transferFee) onlyOwner\n        +setFeeDistributor(address _feeDistributor) onlyOwner\n        -_takeFee(address from, address to, uint256 amount) returns uint256\n        \n        %% Security Guards\n        +pause() onlyOwner whenNotPaused\n        +unpause() onlyOwner whenPaused\n        +recoverToken(address token, uint256 amount) onlyOwner\n    }\n    \n    %% Base interfaces & implementations\n    class ERC20 {\n        <<Interface>>\n        +name() returns string\n        +symbol() returns string\n        +decimals() returns uint8\n        +totalSupply() returns uint256\n        +balanceOf(address account) returns uint256\n        +transfer(address to, uint256 amount) returns bool\n        +allowance(address owner, address spender) returns uint256\n        +approve(address spender, uint256 amount) returns bool\n        +transferFrom(address from, address to, uint256 amount) returns bool\n        #_mint(address account, uint256 amount)\n        #_burn(address account, uint256 amount)\n        #_transfer(address from, address to, uint256 amount)\n    }\n    \n    class Ownable {\n        -address private _owner\n        +constructor()\n        +owner() returns address\n        +onlyOwner() modifier\n        +renounceOwnership() onlyOwner\n        +transferOwnership(address newOwner) onlyOwner\n        #_transferOwnership(address newOwner)\n        +event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)\n    }\n    \n    class Pausable {\n        -bool private _paused\n        +constructor()\n        +paused() returns bool\n        +whenNotPaused() modifier\n        +whenPaused() modifier\n        +pause() onlyOwner whenNotPaused\n        +unpause() onlyOwner whenPaused\n        +event Paused(address account)\n        +event Unpaused(address account)\n    }\n    \n    %% Cross-chain capabilities\n    class CrossChainEnabled {\n        <<Interface>>\n        -ILayerZeroEndpoint endpoint\n        -mapping(uint16 => address) trustedRemotes\n        +setTrustedRemote(uint16 _chainId, address _remoteAddress) onlyOwner\n        +getTrustedRemote(uint16 _chainId) returns address\n        +setPeer(uint16 _chainId, address _peer) onlyOwner\n        +onlyBridge() modifier\n        +estimateFees(uint16 _dstChainId, address _to, uint256 _amount) public view returns uint256\n        +event SetPeer(uint16 chainId, address peer)\n        +event RemotePeerUpdated(uint16 chainId, address peer)\n    }\n    \n    %% Fee distribution system\n    class FeeDistributor {\n        <<Interface>>\n        -uint256 jackpotShare\n        -uint256 liquidityShare\n        -uint256 marketingShare\n        -uint256 devShare\n        -uint256 stakingShare\n        +distributeTokens(uint256 amount)\n        +setShares(uint256[] shares) onlyOwner\n        +getJackpotAddress() returns address\n        +getLiquidityAddress() returns address\n        +event SharesUpdated(uint256[] shares)\n    }\n    \n    %% LayerZero V2 interface\n    class ILayerZeroEndpoint {\n        <<Interface>>\n        +send(uint16 _dstChainId, bytes _destination, bytes _payload, address payable _refundAddress, address _zroPaymentAddress, bytes _adapterParams) payable\n        +receivePayload(uint16 _srcChainId, bytes _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes _payload)\n        +getInboundNonce(uint16 _srcChainId, bytes _srcAddress) returns uint64\n        +getOutboundNonce(uint16 _dstChainId, address _srcAddress) returns uint64\n        +estimateFees(uint16 _dstChainId, address _userApplication, bytes _payload, bool _payInZRO, bytes _adapterParam) returns (uint nativeFee, uint zroFee)\n    }\n    \n    %% Define relationships\n    ERC20 <|-- SonicRedDragon : inherits\n    Ownable <|-- SonicRedDragon : inherits\n    Pausable <|-- SonicRedDragon : inherits\n    CrossChainEnabled <|-- SonicRedDragon : inherits\n    SonicRedDragon --\x3e FeeDistributor : uses\n    CrossChainEnabled --\x3e ILayerZeroEndpoint : uses\n    \n    %% Apply styling\n    classDef main fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold\n    classDef inherited fill:#43a047;stroke:#2e7d32;color:#ffffff\n    classDef extension fill:#8e24aa;stroke:#6a1b9a;color:#ffffff\n    classDef interface fill:#1e293b;stroke:#0f172a;color:#ffffff;font-style:italic\n    \n    class SonicRedDragon main\n    class ERC20 inherited\n    class Ownable inherited\n    class Pausable inherited\n    class CrossChainEnabled extension\n    class FeeDistributor interface\n    class ILayerZeroEndpoint interface'})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);