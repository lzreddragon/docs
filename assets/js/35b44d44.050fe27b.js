"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[1113],{6776:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"contracts/oracles/vrf-interfaces","title":"VRF Interfaces","description":"This page documents the Verifiable Random Function (VRF) interfaces used in the OmniDragon protocol, specifically for dRAND integration.","source":"@site/docs/contracts/oracles/vrf-interfaces.md","sourceDirName":"contracts/oracles","slug":"/contracts/oracles/vrf-interfaces","permalink":"/contracts/oracles/vrf-interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/oracles/vrf-interfaces.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var s=r(4848),i=r(8453);const o={sidebar_position:5},a="VRF Interfaces",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Interfaces",id:"core-interfaces",level:2},{value:"IDragonVRFIntegrator",id:"idragonvrfintegrator",level:3},{value:"IDragonVRFConsumer",id:"idragonvrfconsumer",level:3},{value:"IOmniDragonVRFConsumer",id:"iomnidragonvrfconsumer",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"dRAND Networks",id:"drand-networks",level:2},{value:"League of Entropy Mainnet",id:"league-of-entropy-mainnet",level:3},{value:"Quicknet",id:"quicknet",level:3},{value:"EVMnet",id:"evmnet",level:3},{value:"Integration Example",id:"integration-example",level:2},{value:"Interface Inheritance Hierarchy",id:"interface-inheritance-hierarchy",level:2},{value:"Events",id:"events",level:2},{value:"Related Resources",id:"related-resources",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"vrf-interfaces",children:"VRF Interfaces"})}),"\n",(0,s.jsx)(n.p,{children:"This page documents the Verifiable Random Function (VRF) interfaces used in the OmniDragon protocol, specifically for dRAND integration."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon implements a robust verifiable randomness system based on the dRAND network. These interfaces define the contract interactions for randomness functionality."}),"\n",(0,s.jsx)(n.h2,{id:"core-interfaces",children:"Core Interfaces"}),"\n",(0,s.jsx)(n.h3,{id:"idragonvrfintegrator",children:"IDragonVRFIntegrator"}),"\n",(0,s.jsx)(n.p,{children:"This interface defines how contracts interact with the dRAND network integrator:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"interface IDragonVRFIntegrator {\n    /**\n     * @dev Returns the latest randomness value\n     * @return random The randomness value\n     * @return round The round number\n     */\n    function getLatestRandomness() external view returns (uint256 random, uint256 round);\n    \n    /**\n     * @dev Fulfills a randomness request\n     * @param _requestId The request ID to fulfill\n     */\n    function fulfillRandomness(uint256 _requestId) external;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"idragonvrfconsumer",children:"IDragonVRFConsumer"}),"\n",(0,s.jsx)(n.p,{children:"This interface defines how consumer contracts receive randomness:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"interface IDragonVRFConsumer {\n    /**\n     * @dev Fulfills a randomness request\n     * @param _requestId The request ID\n     * @param _randomness The randomness value\n     * @param _round The round number\n     */\n    function fulfillRandomness(\n        uint256 _requestId,\n        uint256 _randomness,\n        uint256 _round\n    ) external;\n    \n    /**\n     * @dev Gets the randomness for a specific request\n     * @param _requestId The request ID\n     */\n    function getRequestRandomness(\n        uint256 _requestId\n    ) external view returns (uint256 randomness, bool fulfilled, uint256 round);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"iomnidragonvrfconsumer",children:"IOmniDragonVRFConsumer"}),"\n",(0,s.jsx)(n.p,{children:"This interface defines the advanced multi-source randomness consumer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"interface IOmniDragonVRFConsumer {\n    /**\n     * @dev Adds a new dRAND network\n     * @param _networkId The network identifier\n     * @param _integrator The integrator contract address\n     * @param _weight The weight for this network\n     */\n    function addNetwork(\n        bytes32 _networkId,\n        address _integrator,\n        uint256 _weight\n    ) external;\n    \n    /**\n     * @dev Updates a network\n     * @param _networkId The network identifier\n     * @param _integrator The integrator contract address\n     * @param _weight The weight for this network\n     * @param _active Whether the network is active\n     */\n    function updateNetwork(\n        bytes32 _networkId,\n        address _integrator,\n        uint256 _weight,\n        bool _active\n    ) external;\n    \n    /**\n     * @dev Removes a network\n     * @param _networkId The network identifier\n     */\n    function removeNetwork(bytes32 _networkId) external;\n    \n    /**\n     * @dev Aggregates randomness from all networks\n     */\n    function aggregateRandomness() external;\n    \n    /**\n     * @dev Fulfills randomness for a consumer\n     * @param _consumer The consumer address\n     * @param _requestId The request ID\n     */\n    function fulfillRandomness(address _consumer, uint256 _requestId) external;\n    \n    /**\n     * @dev Sets authorization for a consumer\n     * @param _consumer The consumer address\n     * @param _authorized Whether the consumer is authorized\n     */\n    function setAuthorizedConsumer(address _consumer, bool _authorized) external;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,s.jsx)(n.p,{children:"These interfaces are designed with the following considerations:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Strict access control for randomness fulfillment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Support for different randomness sources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reliability"}),": Multiple fallback mechanisms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gas Efficiency"}),": Optimized for gas usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"drand-networks",children:"dRAND Networks"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon integrates with several dRAND networks:"}),"\n",(0,s.jsx)(n.h3,{id:"league-of-entropy-mainnet",children:"League of Entropy Mainnet"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Period"}),": 30 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Primary randomness source for jackpot drawings"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"quicknet",children:"Quicknet"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Period"}),": 3 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Time-sensitive operations requiring fast randomness"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"evmnet",children:"EVMnet"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Period"}),": 3 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Features"}),": Optimized for EVM chains, lower gas costs for verification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": On-chain verification when needed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-example",children:"Integration Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a simple example of implementing these interfaces:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// Create a consumer contract\ncontract MyConsumer is DragonVRFConsumer {\n    constructor(address _integrator) DragonVRFConsumer(_integrator) {}\n    \n    function _fulfillRandomness(uint256 _requestId, uint256 _randomness) internal override {\n        // Use randomness\n    }\n}\n\n// Request randomness from OmniDragonVRFConsumer\nfunction requestRandomnessFromAggregate(IOmniDragonVRFConsumer _consumer) external {\n    uint256 requestId = requestRandomness();\n    _consumer.fulfillRandomness(address(this), requestId);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interface-inheritance-hierarchy",children:"Interface Inheritance Hierarchy"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD\n    A[IDragonVRFIntegrator] <-- Used by --\x3e B[IDragonVRFConsumer]\n    B <-- Extended by --\x3e C[IOmniDragonVRFConsumer]\n    B <-- Implemented by --\x3e D[DragonVRFConsumer]\n    A <-- Implemented by --\x3e E[DragonVRFIntegrator]\n    C <-- Implemented by --\x3e F[OmniDragonVRFConsumer]"}),"\n",(0,s.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"Contracts implementing these interfaces should emit appropriate events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// IDragonVRFIntegrator Events\nevent RandomnessUpdated(uint256 round, uint256 value);\nevent ConsumerAuthorized(address consumer, bool authorized);\n\n// IDragonVRFConsumer Events\nevent RandomnessRequested(uint256 indexed requestId);\nevent RandomnessFulfilled(uint256 indexed requestId, uint256 randomness, uint256 round);\nevent VRFIntegratorUpdated(address oldIntegrator, address newIntegrator);\n\n// IOmniDragonVRFConsumer Events\nevent NetworkAdded(bytes32 indexed networkId, address integrator, uint256 weight);\nevent NetworkUpdated(bytes32 indexed networkId, address integrator, uint256 weight, bool active);\nevent NetworkRemoved(bytes32 indexed networkId);\nevent RandomnessAggregated(uint256 timestamp, uint256 value);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/ecosystem/drand-network",children:"dRAND Integration Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/contracts/oracles/vrf-consumer",children:"DragonVRFConsumer Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/contracts/oracles/vrf-integrator",children:"DragonVRFIntegrator Documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);