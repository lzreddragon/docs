"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[2367],{577:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ecosystem/dragon_ecosystem_diagram","title":"OmniDragon Ecosystem Visualization","description":"Interactive visualizations of the OmniDragon ecosystem architecture","source":"@site/docs/ecosystem/dragon_ecosystem_diagram.md","sourceDirName":"ecosystem","slug":"/ecosystem/dragon_ecosystem_diagram","permalink":"/ecosystem/dragon_ecosystem_diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/ecosystem/dragon_ecosystem_diagram.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"OmniDragon Ecosystem Visualization","sidebar_position":1,"description":"Interactive visualizations of the OmniDragon ecosystem architecture"}}');var r=o(4848),i=o(8453);const s={title:"OmniDragon Ecosystem Visualization",sidebar_position:1,description:"Interactive visualizations of the OmniDragon ecosystem architecture"},a="OmniDragon Ecosystem Architecture",l={},d=[{value:"Core Protocol &amp; User Journey",id:"core-protocol--user-journey",level:2},{value:"Randomness System",id:"randomness-system",level:2},{value:"Economic System &amp; Jackpot",id:"economic-system--jackpot",level:2},{value:"Governance &amp; Partner Ecosystem",id:"governance--partner-ecosystem",level:2},{value:"Viewing the Diagrams",id:"viewing-the-diagrams",level:2},{value:"Implementation Details",id:"implementation-details",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"omnidragon-ecosystem-architecture",children:"OmniDragon Ecosystem Architecture"})}),"\n",(0,r.jsx)(n.p,{children:"These spectacular, minimalist visualizations showcase the elegance of the OmniDragon ecosystem with smooth animations and modern styling."}),"\n",(0,r.jsx)(n.h2,{id:"core-protocol--user-journey",children:"Core Protocol & User Journey"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{\n  init: {\n    "theme": "base",\n    "themeVariables": {\n      "primaryColor": "#4a80d1",\n      "primaryTextColor": "#ffffff",\n      "primaryBorderColor": "#6090d9",\n      "lineColor": "#8bb0e7",\n      "secondaryColor": "#3a70c1",\n      "tertiaryColor": "#2a5599",\n      "fontSize": "16px"\n    },\n    "flowchart": {\n      "htmlLabels": true,\n      "curve": "monotoneX",\n      "diagramPadding": 15,\n      "nodeSpacing": 60,\n      "rankSpacing": 80\n    },\n    "sequence": {\n      "showSequenceNumbers": false\n    }\n  }\n}%%\n\nflowchart LR\n    %% Define elegant color classes\n    classDef coreNode fill:#4a80d1,stroke:#6090d9,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef tokenNode fill:#3566b3,stroke:#4a80d1,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\' \n    classDef userNode fill:#f57c00,stroke:#ff9800,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef journeyNode fill:#ffb300,stroke:#ffd54f,stroke-width:2px,color:#000000,font-weight:500,font-family:\'Inter\'\n    classDef externalNode fill:#1e88e5,stroke:#42a5f5,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    \n    %% Core Protocol\n    subgraph Core["\ud83d\udd37 Core Protocol"]\n        direction TB\n        \n        OmniDragon["OmniDragon Token\n        ERC20 with built-in lottery"]:::coreNode\n        SwapOracle["SwapTriggerOracle\n        Monitors trading & triggers lottery"]:::coreNode\n        ChainRegistry["ChainRegistry\n        Cross-chain compatibility"]:::coreNode\n        \n        LPToken["69LP Token\n        Liquidity provider token"]:::tokenNode\n    end\n    \n    %% User Journey - Simplified and elegant\n    subgraph Journey["\ud83d\udc64 User Journey"]\n        direction TB\n        \n        User["User"]:::userNode\n        \n        Trading["Trading\n        Buy/Sell OmniDragon"]:::journeyNode\n        \n        Liquidity["Add Liquidity\n        Create 69LP tokens"]:::journeyNode\n        \n        Staking["Stake & Lock\n        69LP \u2192 ve69LP"]:::journeyNode\n        \n        Governance["Vote & Boost\n        Governance participation"]:::journeyNode\n        \n        Rewards["Collect Rewards\n        Fees & lottery winnings"]:::journeyNode\n        \n        %% Connect journey steps with animated flows\n        User -- "Start" --\x3e Trading\n        Trading -- "Next" --\x3e Liquidity\n        Liquidity -- "Next" --\x3e Staking\n        Staking -- "Next" --\x3e Governance\n        Governance -- "Final" --\x3e Rewards\n        Trading -. "Lottery" .-> Rewards\n    end\n    \n    %% External DEXs - Minimalist representation\n    subgraph External["\ud83d\udd04 External DEXs"]\n        UniswapV2["Uniswap V2"]:::externalNode\n        UniswapV3["Uniswap V3"]:::externalNode\n        Balancer["Balancer"]:::externalNode\n    end\n    \n    %% Connect components with animated flows\n    Trading -- "Swap" --\x3e External\n    External -- "Provide" --\x3e Liquidity\n    Liquidity -- "Creates" --\x3e LPToken\n    LPToken -- "Lock" --\x3e Staking\n    \n    %% Core connections with animated flows\n    ChainRegistry -- "Manage" --\x3e OmniDragon\n    OmniDragon -- "Power" --\x3e Core\n    \n    %% Style the containers with modern aesthetics\n    style Journey fill:#fffde7,stroke:#ffb300,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style Core fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style External fill:#e1f5fe,stroke:#0288d1,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    \n    %% Link styling for animation\n    linkStyle 0,1,2,3,4,5 stroke:#ff9800,stroke-width:2.5px,stroke-dasharray:5 5,animation:flowAnimation 30s linear infinite\n    linkStyle 6,7,8,9 stroke:#42a5f5,stroke-width:2.5px,animation:flowAnimation 20s linear infinite\n    linkStyle 10,11 stroke:#1976d2,stroke-width:2.5px,animation:flowAnimation 25s linear infinite'}),"\n",(0,r.jsx)(n.h2,{id:"randomness-system",children:"Randomness System"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{\n  init: {\n    "theme": "base",\n    "themeVariables": {\n      "primaryColor": "#4a80d1",\n      "primaryTextColor": "#ffffff",\n      "primaryBorderColor": "#6090d9",\n      "lineColor": "#8bb0e7",\n      "secondaryColor": "#3a70c1",\n      "tertiaryColor": "#2a5599",\n      "fontSize": "16px"\n    },\n    "flowchart": {\n      "htmlLabels": true,\n      "curve": "basis",\n      "diagramPadding": 15,\n      "nodeSpacing": 50,\n      "rankSpacing": 70\n    }\n  }\n}%%\n\nflowchart TB\n    %% Define elegant color classes\n    classDef randomnessNode fill:#1976d2,stroke:#42a5f5,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef processNode fill:#ff9800,stroke:#ffb74d,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    \n    %% Randomness Sources - Clean and minimalist\n    subgraph Sources["External Randomness Sources"]\n        direction LR\n        DrandDefault["drand Default\n        League of Entropy"]:::randomnessNode\n        DrandEVMNet["drand EVMNet\n        Optimized for EVM"]:::randomnessNode\n        DrandQuickNet["drand QuickNet\n        Fast verification"]:::randomnessNode\n        ChainlinkVRF["ChainlinkVRF2.5\n        On-demand via LayerZero"]:::randomnessNode\n    end\n    \n    %% Integrator Layer - Modern styling\n    subgraph Integrators["Integrator Layer"]\n        direction LR\n        DefaultInt["Default Integrator"]:::randomnessNode\n        EVMInt["EVMNet Integrator"]:::randomnessNode\n        QuickInt["QuickNet Integrator"]:::randomnessNode\n        ChainlinkReq["ChainlinkVRF Requester"]:::randomnessNode\n    end\n    \n    VRFConsumer["OmniDragonVRFConsumer\n    Aggregation & redundancy"]:::randomnessNode\n    \n    %% Lottery Flow - Elegant process visualization\n    subgraph LotteryFlow["Lottery Randomness Flow"]\n        direction LR\n        Step1["Multiple sources\n        provide entropy"]:::processNode\n        \n        Step2["Integrators verify\n        & format data"]:::processNode\n        \n        Step3["VRFConsumer\n        aggregates sources"]:::processNode\n        \n        Step4["SwapTrigger receives\n        random values"]:::processNode\n        \n        Step5["OmniDragon determines\n        lottery winners"]:::processNode\n        \n        Step1 --\x3e Step2 --\x3e Step3 --\x3e Step4 --\x3e Step5\n    end\n    \n    %% Connect components with animated flows\n    DrandDefault -- "Raw beacon" --\x3e DefaultInt\n    DrandEVMNet -- "Low latency" --\x3e EVMInt\n    DrandQuickNet -- "3s interval" --\x3e QuickInt\n    ChainlinkVRF -- "On-demand" --\x3e ChainlinkReq\n    \n    DefaultInt -- "Verified" --\x3e VRFConsumer\n    EVMInt -- "Verified" --\x3e VRFConsumer\n    QuickInt -- "Verified" --\x3e VRFConsumer\n    ChainlinkReq -- "Verified" --\x3e VRFConsumer\n    \n    %% Dashed connectors for visualization\n    DrandDefault -. "Feeds" .-> Step1\n    DrandEVMNet -. "Feeds" .-> Step1\n    DrandQuickNet -. "Feeds" .-> Step1\n    ChainlinkVRF -. "Feeds" .-> Step1\n    DefaultInt -. "Process" .-> Step2\n    EVMInt -. "Process" .-> Step2\n    QuickInt -. "Process" .-> Step2\n    ChainlinkReq -. "Process" .-> Step2\n    VRFConsumer -. "Aggregates" .-> Step3\n    \n    %% Style the containers\n    style Sources fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style Integrators fill:#bbdefb,stroke:#1976d2,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style LotteryFlow fill:#fff8e1,stroke:#ff9800,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    \n    %% Link styling for animation\n    linkStyle 0,1,2,3 stroke:#42a5f5,stroke-width:2.5px,animation:flowAnimation 30s linear infinite\n    linkStyle 4,5,6,7 stroke:#1976d2,stroke-width:2.5px,animation:flowAnimation 25s linear infinite\n    linkStyle 8,9,10,11,12,13,14,15,16 stroke:#7c8792,stroke-width:1.5px,stroke-dasharray:3,animation:flowAnimation 40s linear infinite\n    linkStyle 17,18,19,20,21 stroke:#ff9800,stroke-width:2.5px,animation:flowAnimation 20s linear infinite'}),"\n",(0,r.jsx)(n.h2,{id:"economic-system--jackpot",children:"Economic System & Jackpot"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{\n  init: {\n    "theme": "base",\n    "themeVariables": {\n      "primaryColor": "#4a80d1",\n      "primaryTextColor": "#ffffff",\n      "primaryBorderColor": "#6090d9",\n      "lineColor": "#8bb0e7",\n      "secondaryColor": "#3a70c1",\n      "tertiaryColor": "#2a5599",\n      "fontSize": "16px"\n    },\n    "flowchart": {\n      "htmlLabels": true,\n      "curve": "basis",\n      "diagramPadding": 15,\n      "nodeSpacing": 55,\n      "rankSpacing": 80\n    }\n  }\n}%%\n\nflowchart LR\n    %% Define elegant color classes\n    classDef jackpotNode fill:#fb8c00,stroke:#ffb74d,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef feeNode fill:#00acc1,stroke:#4dd0e1,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef processNode fill:#ff5722,stroke:#ff8a65,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    \n    %% Fee Collection - Modern and minimalist\n    subgraph Fees["Fee Collection"]\n        FeeCollector["Fee Collector\n        Processes all swaps"]:::feeNode\n        BurnMechanism["Burn Mechanism\n        0.69% of each swap"]:::feeNode\n    end\n    \n    %% Jackpot System - Elegant styling\n    subgraph Jackpot["Jackpot Mechanism"]\n        JackpotVault["JackpotVault\n        Holds 6.9% of swaps"]:::jackpotNode\n        JackpotDistributor["JackpotDistributor\n        Determines winners"]:::jackpotNode\n        WinProbability["Win Probability\n        Dynamic adjustments"]:::jackpotNode\n        Winners["Lottery Winners\n        Selected via VRF"]:::jackpotNode\n    end\n    \n    %% Fee Process - Visualized process flow\n    subgraph FeeProcess["Fee Distribution"]\n        FeeStep1["Swap generates\n        10% total fees"]:::processNode\n        \n        FeeStep2["Fee splitting\n        6.9% + 2.41% + 0.69%"]:::processNode\n        \n        FeeStep3["ve69LP holders\n        earn share"]:::processNode\n        \n        FeeStep4["Token burning\n        reduces supply"]:::processNode\n        \n        FeeStep5["Jackpot accumulation\n        for winners"]:::processNode\n        \n        FeeStep1 --\x3e FeeStep2 --\x3e FeeStep3\n        FeeStep2 --\x3e FeeStep4\n        FeeStep2 --\x3e FeeStep5\n    end\n    \n    %% Connect components with animated flows\n    FeeCollector -- "6.9% of swap" --\x3e JackpotVault\n    FeeCollector -- "0.69% of swap" --\x3e BurnMechanism\n    \n    WinProbability -- "Determines odds" --\x3e JackpotDistributor\n    JackpotVault -- "Funds prizes" --\x3e JackpotDistributor\n    JackpotDistributor -- "Distributes" --\x3e Winners\n    \n    %% Dashed connections for visualization\n    FeeCollector -. "Implements" .-> FeeStep2\n    BurnMechanism -. "Performs" .-> FeeStep4\n    JackpotVault -. "Provides" .-> FeeStep5\n    \n    %% Style the containers\n    style Fees fill:#e0f7fa,stroke:#00acc1,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style Jackpot fill:#fff3e0,stroke:#fb8c00,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style FeeProcess fill:#ffebee,stroke:#ff5722,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    \n    %% Link styling for animation\n    linkStyle 0,1 stroke:#00bcd4,stroke-width:2.5px,animation:flowAnimation 25s linear infinite\n    linkStyle 2,3,4 stroke:#ff9800,stroke-width:2.5px,animation:flowAnimation 20s linear infinite\n    linkStyle 5,6,7 stroke:#7c8792,stroke-width:1.5px,stroke-dasharray:3,animation:flowAnimation 35s linear infinite\n    linkStyle 8,9,10,11 stroke:#ff5722,stroke-width:2.5px,animation:flowAnimation 15s linear infinite'}),"\n",(0,r.jsx)(n.h2,{id:"governance--partner-ecosystem",children:"Governance & Partner Ecosystem"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{\n  init: {\n    "theme": "base",\n    "themeVariables": {\n      "primaryColor": "#4a80d1",\n      "primaryTextColor": "#ffffff",\n      "primaryBorderColor": "#6090d9",\n      "lineColor": "#8bb0e7",\n      "secondaryColor": "#3a70c1",\n      "tertiaryColor": "#2a5599",\n      "fontSize": "16px"\n    },\n    "flowchart": {\n      "htmlLabels": true,\n      "curve": "basisClosed",\n      "diagramPadding": 15,\n      "nodeSpacing": 60,\n      "rankSpacing": 80\n    }\n  }\n}%%\n\nflowchart LR\n    %% Define elegant color classes\n    classDef govNode fill:#1976d2,stroke:#42a5f5,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef partnerNode fill:#f57c00,stroke:#ffb74d,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    classDef processNode fill:#00acc1,stroke:#4dd0e1,stroke-width:2px,color:#ffffff,font-weight:500,font-family:\'Inter\'\n    \n    %% Governance System - Clean and minimalist\n    subgraph Governance["ve69LP Governance"]\n        direction TB\n        ve69LP["ve69LP Token\n        Locked LP position"]:::govNode\n        \n        FeeDistributor["ve69LP Fee Distributor\n        Receives 2.41% of swaps"]:::govNode\n        \n        ProposalVoting["Protocol Governance\n        Parameter changes"]:::govNode\n    end\n    \n    %% Weekly Gauge System - Modern styling\n    subgraph Gauge["Weekly Gauge System"]\n        EpochReset["Weekly Epoch Reset\n        7-day voting cycle"]:::processNode\n        \n        GaugeVoting["Partner Pool Voting\n        ve69LP allocation"]:::processNode\n        \n        GaugeController["Gauge Controller\n        Calculate weights"]:::processNode\n    end\n    \n    %% Partner System - Elegant layout\n    subgraph Partners["Partner Ecosystem"]\n        PartnerRegistry["Partner Registry\n        Official onboarding"]:::partnerNode\n        \n        PartnerPools["Partner Liquidity Pools\n        Dragon + Partner token"]:::partnerNode\n        \n        ProbabilityBoost["Probability Boost\n        Increases win chance"]:::partnerNode\n        \n        Rewards["Gauge Rewards\n        Fees from partner pools"]:::partnerNode\n    end\n    \n    %% Governance Flow - Visualized process\n    subgraph GovFlow["Governance Flow"]\n        GovStep1["Lock 69LP\n        for ve69LP"]:::processNode\n        \n        GovStep2["Receive voting power\n        based on lock"]:::processNode\n        \n        GovStep3["Vote on\n        proposals"]:::processNode\n        \n        GovStep4["Weekly gauge\n        voting"]:::processNode\n        \n        GovStep5["Direct probability\n        boost"]:::processNode\n        \n        GovStep6["Earn partner\n        rewards"]:::processNode\n        \n        GovStep1 --\x3e GovStep2\n        GovStep2 --\x3e GovStep3\n        GovStep2 --\x3e GovStep4\n        GovStep4 --\x3e GovStep5\n        GovStep5 --\x3e GovStep6\n    end\n    \n    %% Connect components with animated flows\n    ve69LP -- "Earns fees" --\x3e FeeDistributor\n    ve69LP -- "Grants rights" --\x3e ProposalVoting\n    \n    ve69LP -- "Enables voting" --\x3e GaugeVoting\n    GaugeVoting -- "Vote allocation" --\x3e GaugeController\n    EpochReset -- "Weekly reset" --\x3e GaugeVoting\n    GaugeController -- "Calculate" --\x3e ProbabilityBoost\n    GaugeController -- "Determine" --\x3e Rewards\n    \n    PartnerRegistry -- "Register" --\x3e PartnerPools\n    ProbabilityBoost -- "Boost" --\x3e PartnerPools\n    PartnerPools -- "Generate fees" --\x3e Rewards\n    \n    %% Dashed connections for visualization\n    ve69LP -. "Locks" .-> GovStep2\n    ProposalVoting -. "Enables" .-> GovStep3\n    GaugeVoting -. "Powers" .-> GovStep4\n    ProbabilityBoost -. "Enhances" .-> GovStep5\n    Rewards -. "Distributes" .-> GovStep6\n    \n    %% Style the containers\n    style Governance fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style Gauge fill:#e0f7fa,stroke:#00acc1,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style Partners fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    style GovFlow fill:#e1f5fe,stroke:#0288d1,stroke-width:2px,color:#000000,font-family:\'Inter\'\n    \n    %% Link styling for animation\n    linkStyle 0,1,2 stroke:#1e88e5,stroke-width:2.5px,animation:flowAnimation 30s linear infinite\n    linkStyle 3,4,5,6 stroke:#00bcd4,stroke-width:2.5px,animation:flowAnimation 25s linear infinite\n    linkStyle 7,8,9 stroke:#ff9800,stroke-width:2.5px,animation:flowAnimation 20s linear infinite\n    linkStyle 10,11,12,13,14 stroke:#7c8792,stroke-width:1.5px,stroke-dasharray:3,animation:flowAnimation 35s linear infinite\n    linkStyle 15,16,17,18,19 stroke:#0288d1,stroke-width:2.5px,animation:flowAnimation 15s linear infinite'}),"\n",(0,r.jsx)(n.h2,{id:"viewing-the-diagrams",children:"Viewing the Diagrams"}),"\n",(0,r.jsx)(n.p,{children:"These diagrams provide an elegant visualization of the OmniDragon ecosystem architecture with:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modern, minimalist design"})," focusing on essential relationships"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Animated data flows"})," showing how information and value move between components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent color schemes"})," for better visual hierarchy and component categorization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean typography"})," using the Inter font family for improved readability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Responsive layout"})," that adapts to different screen sizes"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All diagrams use smooth animations to illustrate the dynamic nature of the OmniDragon ecosystem, with careful attention to color harmony and visual balance."}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.p,{children:"These diagrams use the following modern design principles:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Color harmony"}),": A consistent blue-based palette with accent colors for different subsystems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Typography"}),": Using the Inter font family for clean, modern text rendering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Animation"}),": Subtle flow animations to illustrate data movement without overwhelming the viewer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spacing"}),": Generous node spacing and padding for better readability and focus"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Curve styles"}),": Different curve types (monotoneX, basis, basisClosed) for appropriate visual flow"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);