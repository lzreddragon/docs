"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[3825],{1672:(e,n,r)=>{r.d(n,{A:()=>d});var a=r(6540),s=r(1425),i=(r(9136),r(5363)),t=r(2087),o=r(4848);function d(e){return(0,o.jsx)(i.A,{fallback:(0,o.jsx)("div",{className:"mermaid-loading",children:"Loading diagram..."}),children:()=>(0,o.jsx)(l,{...e})})}function l({chart:e,title:n,caption:r,className:i,animated:d=!0,pulseSelector:l,animationOptions:c={}}){const m=(0,a.useRef)(null),[u,h]=(0,a.useState)(0),[p,g]=(0,a.useState)(null),[f,x]=(0,a.useState)(!1),v=e?.trim()||"";(0,a.useEffect)((()=>{if(m.current)if(g(null),x(!1),window.mermaid)try{const e="dark"===document.documentElement.dataset.theme;window.mermaid.initialize({theme:e?"dark":"default",themeVariables:{darkMode:e},securityLevel:"loose"});const n=setTimeout((()=>{try{window.mermaid.init(void 0,m.current.querySelectorAll(".mermaid:not(.processed)")),m.current.querySelectorAll(".mermaid").forEach((e=>{e.classList.add("processed")})),x(!0),d&&setTimeout((()=>{const e=m.current.querySelector(".docusaurus-mermaid-container");e&&(0,s._g)(e,{pulseSelector:l,...c})}),100)}catch(e){console.error("Failed to render mermaid diagram:",e),g(e.message),u<3&&h((e=>e+1))}}),50);return()=>clearTimeout(n)}catch(e){console.error("Failed to initialize mermaid:",e),g(e.message)}else g("Mermaid library not available")}),[e,u,d,l]);const C=[t.A.enhancedMermaidContainer||"",i||"",f&&t.A.rendered||""].filter(Boolean).join(" ");return(0,o.jsxs)("div",{ref:m,className:C,children:[n&&(0,o.jsx)("h3",{className:t.A.mermaidTitle||"",children:n}),(0,o.jsx)("div",{className:"docusaurus-mermaid-container",children:p?(0,o.jsxs)("div",{className:t.A.mermaidError,children:[(0,o.jsx)("p",{children:"Error rendering diagram."}),(0,o.jsxs)("details",{children:[(0,o.jsx)("summary",{children:"View error details"}),(0,o.jsx)("pre",{children:p})]})]}):(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("pre",{className:"mermaid",children:v}),!f&&(0,o.jsx)("div",{className:t.A.mermaidLoading||"",children:(0,o.jsxs)("div",{className:t.A.loadingIndicator||"",children:[(0,o.jsx)("span",{}),(0,o.jsx)("span",{}),(0,o.jsx)("span",{})]})})]})}),r&&(0,o.jsx)("p",{className:t.A.mermaidCaption||"",children:r})]})}},2087:(e,n,r)=>{r.d(n,{A:()=>a});const a={animationContainer:"animationContainer_qFbi",animationTitle:"animationTitle_Aunz",animationDescription:"animationDescription_Ov4W",animationError:"animationError_yvkm",votingPowerContainer:"votingPowerContainer_rVam",timelineLabels:"timelineLabels_ymyL",votingPowerTrack:"votingPowerTrack_ioTj","voting-power-bar":"voting-power-bar_YdRF",partnerBoostContainer:"partnerBoostContainer_Nbx6",partner:"partner_oQK4",partnerName:"partnerName_jHI0",boostTrack:"boostTrack_sueO","boost-fill":"boost-fill_csU7",percentage:"percentage_BL8G",totalAllocation:"totalAllocation_q9KR",totalLabel:"totalLabel_p4kt",totalBar:"totalBar_mqeA",pulse:"pulse_iDMA",calculationContainer:"calculationContainer_ZWH2",inputSide:"inputSide_qcOC",resultSide:"resultSide_AwPG",arrowRight:"arrowRight_wgI2",processingText:"processingText_xIPk","input-cube":"input-cube_V7bs","result-cube":"result-cube_ls1g","input-value":"input-value_hal2","result-value":"result-value_TNvy",crossChainContainer:"crossChainContainer_uGQt",chainBox:"chainBox_JwIk",chainLabel:"chainLabel_WrpK",nodeBox:"nodeBox_voFk",nodeLabel:"nodeLabel_yKzM",arrowSvg:"arrowSvg_BK05",mermaidContainer:"mermaidContainer_KO9S",mermaidTitle:"mermaidTitle_u_uO",mermaidCaption:"mermaidCaption_wbnp",feeSystemContainer:"feeSystemContainer__h_q",tokenSwapNode:"tokenSwapNode_lvrn",feePoolNode:"feePoolNode_iq4E",feeDistributionContainer:"feeDistributionContainer_Ql3t",feeDestinationsContainer:"feeDestinationsContainer_OiiH",feeDestinationNode:"feeDestinationNode_Q2q4","jackpot-node":"jackpot-node_U6t5","ve69lp-node":"ve69lp-node_mq1a","burn-node":"burn-node_Ktzb",percentTag:"percentTag_FQpB",mermaidError:"mermaidError_GTf9",mermaidLoading:"mermaidLoading_iCyq",animatedDiagramContainer:"animatedDiagramContainer__0gF",animatedContent:"animatedContent_QaIs",animatedNode:"animatedNode_MLYw",connectionSvg:"connectionSvg_kuFY",connectionLabel:"connectionLabel_BwvR",nodeContract:"nodeContract_mLML",nodeEvent:"nodeEvent_qLpj",nodeProcess:"nodeProcess_N9cH",nodeUser:"nodeUser_IMZv",flowChartContainer:"flowChartContainer_LoOU",flowChartStep:"flowChartStep_hHlJ",flowChartIcon:"flowChartIcon_d9lt",flowChartText:"flowChartText_Oh32",animationLoading:"animationLoading_vAVv",enhancedMermaidContainer:"enhancedMermaidContainer_IPf6",loadingIndicator:"loadingIndicator_dVEi",loadingPulse:"loadingPulse_FCIa",rendered:"rendered_Ku9G",fadeIn:"fadeIn_GJ3U",animatedCard:"animatedCard_m5VD",withHover:"withHover_QfE_",cardIcon:"cardIcon_BHXH",cardTitle:"cardTitle_Ppq0",cardContent:"cardContent_d8Ko","cardColor--primary":"cardColor--primary_gH3B","cardColor--success":"cardColor--success_DN36","cardColor--warning":"cardColor--warning_pEQU","cardColor--danger":"cardColor--danger_jZsL",standardMermaidContainer:"standardMermaidContainer_NOO0",mermaid:"mermaid_IJ4R",processed:"processed_VcJq",mermaidWrapper:"mermaidWrapper_XkJf",mermaidContent:"mermaidContent_UpoX"}},4669:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>g,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"concepts/randomness-explainer","title":"Randomness System Explained","description":"Interactive explanation of OmniDragon\'s multi-source cross-chain randomness system","source":"@site/docs/concepts/randomness-explainer.md","sourceDirName":"concepts","slug":"/concepts/randomness-explainer","permalink":"/concepts/randomness-explainer","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/concepts/randomness-explainer.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Randomness System Explained","sidebar_position":3,"description":"Interactive explanation of OmniDragon\'s multi-source cross-chain randomness system"}}');var s=r(4848),i=r(8453),t=r(6540),o=r(2087);function d(){const e=(0,t.useRef)(null),[n,a]=(0,t.useState)(null),i=(0,t.useRef)(null);return(0,t.useEffect)((()=>{let n=!0;return Promise.resolve().then(r.bind(r,2776)).then((r=>{if(!n||!e.current)return;const a=r.default;i.current=a.timeline({easing:"easeOutExpo",duration:3e3,loop:!0,autoplay:!0}),i.current.add({targets:e.current.querySelector(".chain-a-request"),opacity:[0,1],translateY:[20,0],duration:500}),i.current.add({targets:e.current.querySelector(".request-arrow"),strokeDashoffset:[a.setDashoffset,0],easing:"easeInOutSine",duration:700}),i.current.add({targets:e.current.querySelector(".chainlink-node"),scale:[1,1.1],backgroundColor:"#375BD2",duration:500}),i.current.add({targets:e.current.querySelector(".chainlink-node"),scale:[1.1,1],backgroundColor:"#2A58DA",duration:500}),i.current.add({targets:e.current.querySelector(".response-arrow"),strokeDashoffset:[a.setDashoffset,0],easing:"easeInOutSine",duration:700}),i.current.add({targets:e.current.querySelector(".layerzero-arrow"),strokeDashoffset:[a.setDashoffset,0],easing:"easeInOutSine",duration:700}),i.current.add({targets:e.current.querySelector(".layerzero-node"),scale:[1,1.1],backgroundColor:"#6D00ED",duration:500}),i.current.add({targets:e.current.querySelector(".chain-b-arrow"),strokeDashoffset:[a.setDashoffset,0],easing:"easeInOutSine",duration:700}),i.current.add({targets:e.current.querySelector(".chain-b-response"),opacity:[0,1],translateY:[20,0],duration:500}),i.current.add({targets:e.current.querySelector(".drand-arrow"),strokeDashoffset:[a.setDashoffset,0],easing:"easeInOutSine",duration:700,delay:200}),i.current.add({targets:e.current.querySelector(".drand-node"),scale:[1,1.1],backgroundColor:"#F16822",duration:500}),i.current.add({targets:e.current.querySelectorAll(".chain-a-request, .chain-b-response"),opacity:0,duration:500,delay:800})})).catch((e=>{console.error("Failed to load anime.js:",e),n&&a("Animation library failed to load")})),()=>{n=!1,i.current&&(i.current.pause(),i.current=null)}}),[]),n?(0,s.jsxs)("div",{className:o.A.animationError,children:[(0,s.jsxs)("p",{children:["Unable to load animation: ",n]}),(0,s.jsx)("p",{children:"Please refresh the page or try again later."})]}):(0,s.jsxs)("div",{className:o.A.animationContainer,ref:e,children:[(0,s.jsx)("h3",{className:o.A.animationTitle,children:"Cross-Chain Randomness Flow"}),(0,s.jsx)("p",{className:o.A.animationDescription,children:"Visualizing how OmniDragon securely generates and verifies randomness across multiple chains"}),(0,s.jsxs)("div",{className:o.A.crossChainContainer,children:[(0,s.jsxs)("div",{className:o.A.chainBox,children:[(0,s.jsx)("div",{className:o.A.chainLabel,children:"Chain A (Arbitrum)"}),(0,s.jsx)("div",{className:"chain-a-request",children:"Randomness Request"})]}),(0,s.jsxs)("svg",{className:o.A.arrowSvg,width:"100%",height:"50",children:[(0,s.jsx)("path",{className:"request-arrow",d:"M100,25 L200,25",fill:"none",stroke:"#375BD2",strokeWidth:"2",strokeDasharray:"5,5"}),(0,s.jsx)("polygon",{points:"200,20 210,25 200,30",fill:"#375BD2"})]}),(0,s.jsx)("div",{className:`${o.A.nodeBox} chainlink-node`,children:(0,s.jsx)("div",{className:o.A.nodeLabel,children:"Chainlink VRF"})}),(0,s.jsxs)("svg",{className:o.A.arrowSvg,width:"100%",height:"50",children:[(0,s.jsx)("path",{className:"response-arrow",d:"M210,35 L100,35",fill:"none",stroke:"#375BD2",strokeWidth:"2"}),(0,s.jsx)("polygon",{points:"100,30 90,35 100,40",fill:"#375BD2"})]}),(0,s.jsxs)("svg",{className:o.A.arrowSvg,width:"100%",height:"50",children:[(0,s.jsx)("path",{className:"layerzero-arrow",d:"M100,60 L320,60",fill:"none",stroke:"#6D00ED",strokeWidth:"2"}),(0,s.jsx)("polygon",{points:"320,55 330,60 320,65",fill:"#6D00ED"})]}),(0,s.jsx)("div",{className:`${o.A.nodeBox} layerzero-node`,children:(0,s.jsx)("div",{className:o.A.nodeLabel,children:"LayerZero"})}),(0,s.jsxs)("svg",{className:o.A.arrowSvg,width:"100%",height:"50",children:[(0,s.jsx)("path",{className:"chain-b-arrow",d:"M330,60 L450,60",fill:"none",stroke:"#6D00ED",strokeWidth:"2"}),(0,s.jsx)("polygon",{points:"450,55 460,60 450,65",fill:"#6D00ED"})]}),(0,s.jsxs)("div",{className:o.A.chainBox,children:[(0,s.jsx)("div",{className:o.A.chainLabel,children:"Chain B (Sonic)"}),(0,s.jsx)("div",{className:"chain-b-response",children:"Verified Randomness"})]}),(0,s.jsxs)("svg",{className:o.A.arrowSvg,width:"100%",height:"50",children:[(0,s.jsx)("path",{className:"drand-arrow",d:"M100,85 L200,85",fill:"none",stroke:"#F16822",strokeWidth:"2",strokeDasharray:"5,5"}),(0,s.jsx)("polygon",{points:"200,80 210,85 200,90",fill:"#F16822"})]}),(0,s.jsx)("div",{className:`${o.A.nodeBox} drand-node`,children:(0,s.jsx)("div",{className:o.A.nodeLabel,children:"drand Network"})})]})]})}var l=r(1672);const c={title:"Randomness System Explained",sidebar_position:3,description:"Interactive explanation of OmniDragon's multi-source cross-chain randomness system"},m="OmniDragon Randomness System Explained",u={},h=[{value:"Interactive Visualization",id:"interactive-visualization",level:2},{value:"System Architecture",id:"system-architecture",level:2},{value:"Key Components",id:"key-components",level:2},{value:"1. OmniDragonVRFConsumer",id:"1-omnidragonvrfconsumer",level:3},{value:"2. ChainlinkVRFIntegrator",id:"2-chainlinkvrfintegrator",level:3},{value:"3. DrandIntegrator",id:"3-drandintegrator",level:3},{value:"Multi-Chain Flow",id:"multi-chain-flow",level:2},{value:"Security Benefits of Multi-Provider Approach",id:"security-benefits-of-multi-provider-approach",level:2},{value:"How To Integrate",id:"how-to-integrate",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"omnidragon-randomness-system-explained",children:"OmniDragon Randomness System Explained"})}),"\n",(0,s.jsx)(n.p,{children:"This page provides an interactive explanation of OmniDragon's multi-source cross-chain randomness system, which is central to the protocol's security and fairness mechanisms."}),"\n",(0,s.jsx)(n.h2,{id:"interactive-visualization",children:"Interactive Visualization"}),"\n",(0,s.jsx)(n.p,{children:"The following animation illustrates how randomness is requested, generated, verified, and transmitted across different chains in the OmniDragon ecosystem:"}),"\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon uses a multi-provider approach to randomness, combining different sources for maximum security and reliability."}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TB\n  A[Application Contract] --\x3e B[OmniDragonVRFConsumer]\n  B --\x3e C[ChainlinkVRFIntegrator]\n  B --\x3e D[DrandIntegrator]\n  C --\x3e E[LayerZero]\n  E --\x3e F[ArbitrumVRFRequester]\n  F --\x3e G[Chainlink VRF]\n  G --\x3e F\n  F --\x3e E\n  E --\x3e C\n  D --\x3e H[Drand Network]\n  H --\x3e D\n  C --\x3e B\n  D --\x3e B\n  B --\x3e A"}),"\n",(0,s.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsx)(n.h3,{id:"1-omnidragonvrfconsumer",children:"1. OmniDragonVRFConsumer"}),"\n",(0,s.jsx)(n.p,{children:"This is the main entry point for randomness requests in the system. It:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accepts randomness requests from applications"}),"\n",(0,s.jsx)(n.li,{children:"Distributes requests to multiple providers"}),"\n",(0,s.jsx)(n.li,{children:"Aggregates and verifies responses"}),"\n",(0,s.jsx)(n.li,{children:"Delivers secured, reliable randomness to the application"}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n  class OmniDragonVRFConsumer {\n    +requestRandomness(uint256 requestId)\n    +fulfillRandomness(uint256 requestId, uint256 randomness)\n    +registerProvider(address provider)\n    +verifyRandomness(uint256 requestId, uint256 randomness)\n    -aggregateResponses(uint256[] responses)\n  }\n  \n  class IVRFProvider {\n    <<interface>>\n    +requestRandomness(uint256 requestId)\n    +fulfillRandomness(uint256 requestId, uint256 randomness)\n  }\n  \n  OmniDragonVRFConsumer --\x3e IVRFProvider"}),"\n",(0,s.jsx)(n.h3,{id:"2-chainlinkvrfintegrator",children:"2. ChainlinkVRFIntegrator"}),"\n",(0,s.jsx)(n.p,{children:"This component:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connects to Chainlink VRF on Arbitrum via LayerZero"}),"\n",(0,s.jsx)(n.li,{children:"Manages the cross-chain request/response cycle"}),"\n",(0,s.jsx)(n.li,{children:"Handles security verification of responses"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-drandintegrator",children:"3. DrandIntegrator"}),"\n",(0,s.jsx)(n.p,{children:"This component:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connects to the League of Entropy's drand network"}),"\n",(0,s.jsx)(n.li,{children:"Verifies the threshold BLS signatures"}),"\n",(0,s.jsx)(n.li,{children:"Provides an additional source of randomness"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"multi-chain-flow",children:"Multi-Chain Flow"}),"\n",(0,s.jsx)(l.A,{title:"Cross-Chain Randomness Flow",chart:"\n  sequenceDiagram\n    participant App as Application\n    participant Consumer as OmniDragonVRFConsumer\n    participant LZ as LayerZero\n    participant Arb as ArbitrumVRFRequester\n    participant CL as Chainlink VRF\n    participant Drand as drand Network\n    \n    App->>Consumer: requestRandomness()\n    activate Consumer\n    Consumer->>LZ: sendMessage(requestRandomness)\n    Consumer->>Drand: requestRandomnessFromDrand()\n    LZ->>Arb: receiveMessage(requestRandomness)\n    activate Arb\n    Arb->>CL: requestRandomness()\n    CL--\x3e>Arb: fulfillRandomness()\n    Arb->>LZ: sendMessage(randomnessResult)\n    deactivate Arb\n    LZ--\x3e>Consumer: receiveMessage(randomnessResult)\n    Drand--\x3e>Consumer: fulfillRandomnessFromDrand()\n    Consumer->>Consumer: aggregate & verify responses\n    Consumer--\x3e>App: fulfillRandomness()\n    deactivate Consumer\n",caption:"Sequence diagram showing the full randomness request/response flow"}),"\n",(0,s.jsx)(n.h2,{id:"security-benefits-of-multi-provider-approach",children:"Security Benefits of Multi-Provider Approach"}),"\n",(0,s.jsx)(n.p,{children:"Using multiple sources of randomness provides several key security benefits:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redundancy"}),": If one provider fails, the system continues to function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compromise Resistance"}),": An attacker would need to compromise multiple independent systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verifiability"}),": Each source can be independently verified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Latency Optimization"}),": Can use the fastest available source when speed is critical"]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:'pie title Randomness Source Distribution\n    "Chainlink VRF" : 50\n    "drand Network" : 35\n    "Local VDF" : 15'}),"\n",(0,s.jsx)(n.h2,{id:"how-to-integrate",children:"How To Integrate"}),"\n",(0,s.jsx)(n.p,{children:"Application contracts can request verifiable randomness with a few simple steps:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "./interfaces/IOmniDragonVRFConsumer.sol";\n\ncontract RandomnessConsumer {\n    IOmniDragonVRFConsumer private vrfConsumer;\n    mapping(uint256 => uint256) private randomResults;\n    \n    constructor(address _vrfConsumer) {\n        vrfConsumer = IOmniDragonVRFConsumer(_vrfConsumer);\n    }\n    \n    function requestRandomNumber() external returns (uint256 requestId) {\n        requestId = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\n        vrfConsumer.requestRandomness(requestId);\n        return requestId;\n    }\n    \n    function fulfillRandomness(uint256 requestId, uint256 randomness) external {\n        require(msg.sender == address(vrfConsumer), "Only VRF consumer can fulfill");\n        randomResults[requestId] = randomness;\n        // Use the randomness here\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"With this interactive explanation, you should have a better understanding of how OmniDragon's randomness system operates across multiple chains and providers to deliver secure and verifiable randomness for various applications."})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},5363:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var a=r(9136),s=r(4848);function i({children:e,fallback:n}){return(0,a.A)()?(0,s.jsx)(s.Fragment,{children:e?.()}):n??null}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var a=r(6540);const s={},i=a.createContext(s);function t(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);