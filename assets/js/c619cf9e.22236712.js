"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[3911],{1e3:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"integrations/layerzero/overview","title":"LayerZero Integration","description":"OmniDragon leverages LayerZero as its primary cross-chain messaging protocol. This integration enables OmniDragon tokens to seamlessly move across multiple blockchains while maintaining a unified token economy and jackpot system.","source":"@site/docs/integrations/layerzero/overview.md","sourceDirName":"integrations/layerzero","slug":"/integrations/layerzero/overview","permalink":"/integrations/layerzero/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/integrations/layerzero/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"LayerZero Integration"},"sidebar":"integrations","previous":{"title":"Integrations Overview","permalink":"/integrations/"},"next":{"title":"Setup","permalink":"/integrations/layerzero/setup"}}');var s=i(4848),t=i(8453);const a={sidebar_position:1,title:"LayerZero Integration"},o="LayerZero Integration",l={},c=[{value:"What is LayerZero?",id:"what-is-layerzero",level:2},{value:"OmniDragon&#39;s LayerZero Implementation",id:"omnidragons-layerzero-implementation",level:2},{value:"Core Features",id:"core-features",level:2},{value:"1. Cross-Chain Token Transfers",id:"1-cross-chain-token-transfers",level:3},{value:"2. Cross-Chain Jackpot System",id:"2-cross-chain-jackpot-system",level:3},{value:"3. Cross-Chain Governance",id:"3-cross-chain-governance",level:3},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Chain Registry Contract",id:"chain-registry-contract",level:3},{value:"OmniDragon Token Contract",id:"omnidragon-token-contract",level:3},{value:"Fee Structure",id:"fee-structure",level:2},{value:"Supported Chains",id:"supported-chains",level:2},{value:"Integration Example",id:"integration-example",level:2},{value:"LayerZero V2 Compatibility",id:"layerzero-v2-compatibility",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"layerzero-integration",children:"LayerZero Integration"})}),"\n",(0,s.jsxs)(n.p,{children:["OmniDragon leverages ",(0,s.jsx)(n.a,{href:"https://layerzero.network/",children:"LayerZero"})," as its primary cross-chain messaging protocol. This integration enables OmniDragon tokens to seamlessly move across multiple blockchains while maintaining a unified token economy and jackpot system."]}),"\n",(0,s.jsx)(n.h2,{id:"what-is-layerzero",children:"What is LayerZero?"}),"\n",(0,s.jsx)(n.p,{children:"LayerZero is a powerful omnichain interoperability protocol designed for lightweight cross-chain messaging. It provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Uses a dual-node validation system with Oracle and Relayer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficiency"}),": Optimized for low gas costs and high throughput"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Supports various message types and complex cross-chain applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified UX"}),": Enables seamless user experiences across multiple chains"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"omnidragons-layerzero-implementation",children:"OmniDragon's LayerZero Implementation"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User\n    participant Source as OmniDragon (Source Chain)\n    participant LZ as LayerZero Protocol\n    participant Dest as OmniDragon (Destination Chain)\n    \n    User->>Source: sendToChain(destChainId, recipient, amount)\n    Source->>Source: Check if destination chain is supported\n    Source->>Source: Validate parameters\n    Source->>Source: Burn tokens on source chain\n    Source->>LZ: Send cross-chain message(payload)\n    \n    LZ->>LZ: Process message through Oracle & Relayer\n    \n    LZ->>Dest: Deliver message\n    Dest->>Dest: Verify message source\n    Dest->>Dest: Decode payload\n    Dest->>Dest: Mint tokens to recipient\n    Note over Dest: Tokens received on destination chain"}),"\n",(0,s.jsx)(n.h2,{id:"core-features",children:"Core Features"}),"\n",(0,s.jsx)(n.h3,{id:"1-cross-chain-token-transfers",children:"1. Cross-Chain Token Transfers"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon tokens can be sent across any supported blockchain network through LayerZero's messaging protocol. When tokens are transferred:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Tokens are burned on the source chain"}),"\n",(0,s.jsx)(n.li,{children:"A message is sent through LayerZero to the destination chain"}),"\n",(0,s.jsx)(n.li,{children:"Equivalent tokens are minted on the destination chain"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This maintains the total supply constant across all chains while enabling full mobility."}),"\n",(0,s.jsx)(n.h3,{id:"2-cross-chain-jackpot-system",children:"2. Cross-Chain Jackpot System"}),"\n",(0,s.jsx)(n.p,{children:"The OmniDragon jackpot system works across all chains:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Jackpot contributions from all chains flow into a unified pool"}),"\n",(0,s.jsx)(n.li,{children:"Winners can be selected from any chain"}),"\n",(0,s.jsx)(n.li,{children:"Rewards are delivered on the winner's current chain"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-cross-chain-governance",children:"3. Cross-Chain Governance"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon's governance system leverages LayerZero to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Broadcast governance decisions across all chains"}),"\n",(0,s.jsx)(n.li,{children:"Collect votes from token holders on any chain"}),"\n",(0,s.jsx)(n.li,{children:"Implement protocol changes consistently across the ecosystem"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon implements LayerZero V2 compatibility through the following components:"}),"\n",(0,s.jsx)(n.h3,{id:"chain-registry-contract",children:"Chain Registry Contract"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ChainRegistry"})," contract maintains information about all supported chains:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// ChainRegistry.sol (simplified)\ncontract ChainRegistry {\n    // Map of chainId to chain information\n    mapping(uint16 => ChainInfo) public chains;\n    \n    struct ChainInfo {\n        bytes endpoint;   // Chain-specific endpoint address\n        bool isActive;    // Whether the chain is active\n        uint256 gasPrice; // Reference gas price\n    }\n    \n    // Register a new chain\n    function registerChain(\n        uint16 _chainId,\n        bytes calldata _endpoint,\n        bool _isActive\n    ) external onlyOwner;\n    \n    // Get chain endpoint\n    function getChainEndpoint(uint16 _chainId) \n        external view returns (bytes memory);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"omnidragon-token-contract",children:"OmniDragon Token Contract"}),"\n",(0,s.jsx)(n.p,{children:"The OmniDragon token implements LayerZero interfaces for cross-chain functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// OmniDragon.sol (simplified)\ncontract OmniDragon is ERC20, ILayerZeroReceiver {\n    ILayerZeroEndpoint public lzEndpoint;\n    \n    // Send tokens to another chain\n    function sendToChain(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        uint256 _amount,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n    \n    // Receive cross-chain message\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external override;\n    \n    // Set peer address for LayerZero V2\n    function setPeer(\n        uint16 _chainId,\n        bytes calldata _peer\n    ) external onlyOwner;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"fee-structure",children:"Fee Structure"}),"\n",(0,s.jsx)(n.p,{children:"Cross-chain transfers incur several types of fees:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LayerZero Protocol Fees"}),": Paid to the LayerZero protocol for message delivery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gas Fees"}),": Covers gas costs on the destination chain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-Chain Bridge Fees"}),": Optional fees for using OmniDragon's bridge services"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"supported-chains",children:"Supported Chains"}),"\n",(0,s.jsx)(n.p,{children:"OmniDragon currently supports (or plans to support) the following chains through LayerZero:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Chain"}),(0,s.jsx)(n.th,{children:"Chain ID"}),(0,s.jsx)(n.th,{children:"Status"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Ethereum"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Planned"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Arbitrum"}),(0,s.jsx)(n.td,{children:"42161"}),(0,s.jsx)(n.td,{children:"Planned"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Optimism"}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"Planned"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Avalanche"}),(0,s.jsx)(n.td,{children:"43114"}),(0,s.jsx)(n.td,{children:"Planned"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Sonic"}),(0,s.jsx)(n.td,{children:"146"}),(0,s.jsx)(n.td,{children:"Planned"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Polygon"}),(0,s.jsx)(n.td,{children:"137"}),(0,s.jsx)(n.td,{children:"Planned"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"integration-example",children:"Integration Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of how to initiate a cross-chain transfer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'// Example: Send tokens from Ethereum to Arbitrum\nfunction sendTokensToArbitrum(uint256 amount, address recipient) external payable {\n    // Convert recipient address to bytes\n    bytes memory destination = abi.encodePacked(recipient);\n    \n    // Arbitrum chain ID in LayerZero\n    uint16 dstChainId = 42161;\n    \n    // Call the OmniDragon sendToChain function\n    omniDragon.sendToChain{value: msg.value}(\n        dstChainId,\n        destination,\n        amount,\n        payable(msg.sender), // refund address\n        address(0),          // zero payment address\n        ""                   // default adapter params\n    );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"layerzero-v2-compatibility",children:"LayerZero V2 Compatibility"}),"\n",(0,s.jsxs)(n.p,{children:["OmniDragon has implemented LayerZero V2 compatibility with the ",(0,s.jsx)(n.code,{children:"setPeer"})," function, which allows updating peer addresses for different chains. This ensures the token contract stays current with LayerZero protocol updates."]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.p,{children:"When using OmniDragon's LayerZero integration:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Message Verification"}),": Always verify that messages come from trusted sources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gas Limits"}),": Set appropriate gas limits for cross-chain operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Peer Addresses"}),": Ensure peer addresses are correctly configured"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timeout Handling"}),": Implement proper handling for message delivery timeouts"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.layerzero.network/",children:"LayerZero Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/LayerZero-Labs",children:"LayerZero GitHub"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/integrations/layerzero/setup",children:"OmniDragon Setup Guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);