"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[6528],{1006:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"integrations/chainlink/overview","title":"Chainlink Integration","description":"OmniDragon integrates with Chainlink services to enhance security and reliability across the protocol. Our primary Chainlink integration is the Verifiable Random Function (VRF), which serves as a secondary randomness source alongside dRand.","source":"@site/docs/integrations/chainlink/overview.md","sourceDirName":"integrations/chainlink","slug":"/integrations/chainlink/overview","permalink":"/integrations/chainlink/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/integrations/chainlink/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Chainlink Integration"},"sidebar":"integrations","previous":{"title":"Messaging","permalink":"/integrations/layerzero/messaging"},"next":{"title":"Price Feeds","permalink":"/integrations/chainlink/price-feeds"}}');var s=i(4848),a=i(8453);const t={sidebar_position:1,title:"Chainlink Integration"},o="Chainlink Integration",l={},d=[{value:"What is Chainlink?",id:"what-is-chainlink",level:2},{value:"OmniDragon&#39;s Chainlink VRF Implementation",id:"omnidragons-chainlink-vrf-implementation",level:2},{value:"Core Features",id:"core-features",level:2},{value:"1. Secondary Randomness Source",id:"1-secondary-randomness-source",level:3},{value:"2. Chainlink VRF v2 Integration",id:"2-chainlink-vrf-v2-integration",level:3},{value:"3. Chain-Specific Implementations",id:"3-chain-specific-implementations",level:3},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"ChainlinkVRFIntegrator",id:"chainlinkvrfintegrator",level:3},{value:"ArbitrumVRFConsumer",id:"arbitrumvrfconsumer",level:3},{value:"Chainlink VRF Request Flow",id:"chainlink-vrf-request-flow",level:2},{value:"Chainlink Price Feeds",id:"chainlink-price-feeds",level:2},{value:"Chainlink Automation",id:"chainlink-automation",level:2},{value:"Integration Example",id:"integration-example",level:2},{value:"Supported Networks",id:"supported-networks",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"chainlink-integration",children:"Chainlink Integration"})}),"\n",(0,s.jsxs)(e.p,{children:["OmniDragon integrates with ",(0,s.jsx)(e.a,{href:"https://chain.link/",children:"Chainlink"})," services to enhance security and reliability across the protocol. Our primary Chainlink integration is the Verifiable Random Function (VRF), which serves as a secondary randomness source alongside dRand."]}),"\n",(0,s.jsx)(e.h2,{id:"what-is-chainlink",children:"What is Chainlink?"}),"\n",(0,s.jsx)(e.p,{children:"Chainlink is a decentralized oracle network that enables smart contracts to securely access off-chain data feeds, web APIs, and traditional bank payments. For OmniDragon, we leverage:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Chainlink VRF"}),": Verifiable Random Function for secure on-chain randomness"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Chainlink Price Feeds"}),": For accurate token pricing in certain operations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Chainlink Automation"}),": For triggering time-based system operations"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"omnidragons-chainlink-vrf-implementation",children:"OmniDragon's Chainlink VRF Implementation"}),"\n",(0,s.jsx)(e.mermaid,{value:'flowchart TB\n    classDef primary fill:#375bd2,stroke:#2a45a3,color:#ffffff,font-weight:bold\n    classDef secondary fill:#43a047,stroke:#2e7d32,color:#ffffff\n    classDef tertiary fill:#ff9800,stroke:#f57c00,color:#ffffff\n    \n    Chainlink["Chainlink VRF"]:::primary\n    \n    subgraph OmniDragon ["OmniDragon Protocol"]\n        direction TB\n        ChainlinkVRF["ChainlinkVRFIntegrator"]:::secondary\n        VRFConsumer["OmniDragonVRFConsumer"]:::secondary\n        \n        subgraph Applications ["Applications"]\n            direction TB\n            Jackpot["Jackpot System"]:::tertiary\n            Games["Game Mechanics"]:::tertiary\n            Fallback["Fallback System"]:::tertiary\n        end\n    end\n    \n    Chainlink --\x3e|"VRF Callback"| ChainlinkVRF\n    ChainlinkVRF --\x3e|"Process<br>Randomness"| VRFConsumer\n    VRFConsumer --\x3e|"Provide<br>Verified<br>Randomness"| Applications\n    \n    Applications --\x3e|"Request<br>Randomness"| VRFConsumer\n    VRFConsumer --\x3e|"Request<br>Randomness"| ChainlinkVRF\n    ChainlinkVRF --\x3e|"Request<br>Random Words"| Chainlink'}),"\n",(0,s.jsx)(e.h2,{id:"core-features",children:"Core Features"}),"\n",(0,s.jsx)(e.h3,{id:"1-secondary-randomness-source",children:"1. Secondary Randomness Source"}),"\n",(0,s.jsx)(e.p,{children:"Chainlink VRF serves as a backup randomness source in OmniDragon:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Provides a fallback if dRand is temporarily unavailable"}),"\n",(0,s.jsx)(e.li,{children:"Offers an additional layer of security through randomness diversification"}),"\n",(0,s.jsx)(e.li,{children:"Ensures randomness availability across all supported chains"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-chainlink-vrf-v2-integration",children:"2. Chainlink VRF v2 Integration"}),"\n",(0,s.jsx)(e.p,{children:"OmniDragon leverages Chainlink VRF v2, which offers significant improvements:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Subscription-based model for cost efficiency"}),"\n",(0,s.jsx)(e.li,{children:"Multiple random values in a single request"}),"\n",(0,s.jsx)(e.li,{children:"Adjustable gas limits for randomness fulfillment"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-chain-specific-implementations",children:"3. Chain-Specific Implementations"}),"\n",(0,s.jsx)(e.p,{children:"OmniDragon implements chain-specific Chainlink VRF connectors for optimal performance across all supported networks:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Ethereum VRF configuration"}),"\n",(0,s.jsx)(e.li,{children:"Arbitrum VRF configuration"}),"\n",(0,s.jsx)(e.li,{children:"Polygon VRF configuration"}),"\n",(0,s.jsx)(e.li,{children:"Sonic VRF configuration"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,s.jsx)(e.p,{children:"OmniDragon's Chainlink integration consists of several components:"}),"\n",(0,s.jsx)(e.h3,{id:"chainlinkvrfintegrator",children:"ChainlinkVRFIntegrator"}),"\n",(0,s.jsx)(e.p,{children:"This contract interfaces with Chainlink's VRF service:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-solidity",children:"// ChainlinkVRFIntegrator.sol (simplified)\ncontract ChainlinkVRFIntegrator is VRFConsumerBaseV2, IDragonVRFIntegrator {\n    // Chainlink VRF Coordinator\n    VRFCoordinatorV2Interface public COORDINATOR;\n    \n    // Subscription ID for Chainlink VRF\n    uint64 public subscriptionId;\n    \n    // Key hash for the VRF service\n    bytes32 public keyHash;\n    \n    // Request to randomness mapping\n    mapping(uint256 => uint256) public requestIdToRequestIndex;\n    \n    // Request randomness from Chainlink\n    function requestRandomness(uint256 requestId) external override returns (uint256) {\n        // Request random words from Chainlink VRF\n        uint256 vrfRequestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            callbackGasLimit,\n            1 // number of words\n        );\n        \n        // Map OmniDragon request ID to Chainlink request ID\n        requestIdToRequestIndex[vrfRequestId] = requestId;\n        \n        return vrfRequestId;\n    }\n    \n    // Receive randomness from Chainlink\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \n        internal override {\n        uint256 dragonRequestId = requestIdToRequestIndex[requestId];\n        uint256 randomness = randomWords[0];\n        \n        // Forward randomness to VRF consumer\n        IOmniDragonVRFConsumer(vrfConsumer).fulfillRandomness(\n            dragonRequestId, \n            randomness\n        );\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"arbitrumvrfconsumer",children:"ArbitrumVRFConsumer"}),"\n",(0,s.jsx)(e.p,{children:"Special implementation for Arbitrum's Chainlink VRF:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-solidity",children:"// ArbitrumVRFConsumer.sol (simplified)\ncontract ArbitrumVRFConsumer is IDragonVRFIntegrator {\n    // Arbitrum-specific VRF configuration\n    // ...\n    \n    // Request randomness specifically for Arbitrum\n    function requestRandomness(uint256 requestId) external override returns (uint256) {\n        // Arbitrum-specific implementation\n        // ...\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"chainlink-vrf-request-flow",children:"Chainlink VRF Request Flow"}),"\n",(0,s.jsx)(e.p,{children:"The request flow for Chainlink VRF in OmniDragon:"}),"\n",(0,s.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant App as Application\n    participant VRF as OmniDragonVRFConsumer\n    participant Integrator as ChainlinkVRFIntegrator\n    participant Coordinator as Chainlink VRF Coordinator\n    \n    App->>VRF: requestRandomness()\n    VRF->>VRF: Generate requestId\n    VRF->>Integrator: requestRandomness(requestId)\n    \n    Integrator->>Coordinator: requestRandomWords()\n    Coordinator--\x3e>Integrator: Return vrfRequestId\n    \n    Note over Coordinator: Chainlink processes<br>the request off-chain\n    \n    Coordinator->>Integrator: fulfillRandomWords(vrfRequestId, randomWords)\n    Integrator->>VRF: fulfillRandomness(requestId, randomness)\n    VRF->>App: consumeRandomness(requestId, randomness)"}),"\n",(0,s.jsx)(e.h2,{id:"chainlink-price-feeds",children:"Chainlink Price Feeds"}),"\n",(0,s.jsx)(e.p,{children:"In addition to VRF, OmniDragon uses Chainlink Price Feeds for:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Accurate token price information for USD conversion"}),"\n",(0,s.jsx)(e.li,{children:"Dynamic fee adjustments based on market conditions"}),"\n",(0,s.jsx)(e.li,{children:"Cross-chain value consistency"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Example integration:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-solidity",children:"// Using Chainlink Price Feed\ncontract TokenPriceConsumer {\n    AggregatorV3Interface internal priceFeed;\n    \n    constructor(address _priceFeed) {\n        priceFeed = AggregatorV3Interface(_priceFeed);\n    }\n    \n    // Get the latest token price\n    function getLatestPrice() public view returns (int) {\n        (\n            /* uint80 roundID */,\n            int price,\n            /* uint startedAt */,\n            /* uint timeStamp */,\n            /* uint80 answeredInRound */\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"chainlink-automation",children:"Chainlink Automation"}),"\n",(0,s.jsx)(e.p,{children:"OmniDragon uses Chainlink Automation (formerly Keepers) for:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Periodic jackpot triggers"}),"\n",(0,s.jsx)(e.li,{children:"Fee distribution automation"}),"\n",(0,s.jsx)(e.li,{children:"Maintenance operations"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"integration-example",children:"Integration Example"}),"\n",(0,s.jsx)(e.p,{children:"Here's an example of how to use OmniDragon's Chainlink VRF integration:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@omnidragon/contracts/interfaces/IOmniDragonVRFConsumer.sol";\nimport "@omnidragon/contracts/interfaces/IDragonVRFConsumer.sol";\n\ncontract ChainlinkRandomnessExample is IDragonVRFConsumer {\n    IOmniDragonVRFConsumer public vrfConsumer;\n    uint256 public randomResult;\n    \n    constructor(address _vrfConsumerAddress) {\n        vrfConsumer = IOmniDragonVRFConsumer(_vrfConsumerAddress);\n    }\n    \n    // Request randomness from Chainlink as fallback\n    function requestRandomNumberWithChainlink() external {\n        // Set Chainlink as preferred source\n        vrfConsumer.setPreferredSource(1); // 1 = Chainlink\n        \n        // Request randomness\n        vrfConsumer.requestRandomness(address(this));\n    }\n    \n    // Receive randomness callback\n    function consumeRandomness(uint256 requestId, uint256 randomness) \n        external override {\n        require(msg.sender == address(vrfConsumer), "Unauthorized");\n        \n        randomResult = randomness;\n        \n        // Use the randomness\n        // ...\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"supported-networks",children:"Supported Networks"}),"\n",(0,s.jsx)(e.p,{children:"OmniDragon's Chainlink VRF integration is available on the following networks:"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Network"}),(0,s.jsx)(e.th,{children:"Chainlink VRF Subscription ID"}),(0,s.jsx)(e.th,{children:"Status"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Ethereum"}),(0,s.jsx)(e.td,{children:"TBD"}),(0,s.jsx)(e.td,{children:"Planned"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Arbitrum"}),(0,s.jsx)(e.td,{children:"TBD"}),(0,s.jsx)(e.td,{children:"Planned"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Base"}),(0,s.jsx)(e.td,{children:"TBD"}),(0,s.jsx)(e.td,{children:"Planned"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Sonic"}),(0,s.jsx)(e.td,{children:"TBD"}),(0,s.jsx)(e.td,{children:"Planned"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(e.p,{children:"When using OmniDragon's Chainlink integration:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Fulfillment Gas"}),": Ensure sufficient gas is allocated for Chainlink VRF callbacks"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Request Rate"}),": Be mindful of request rate limits on the Chainlink subscription"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Price Feed Staleness"}),": Check the timestamp of price feeds to ensure data freshness"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Multiple Verifications"}),": For critical applications, verify randomness from multiple sources"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.chain.link/",children:"Chainlink Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.chain.link/vrf/",children:"Chainlink VRF Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/integrations/chainlink/vrf",children:"OmniDragon VRF Integration Guide"})}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>o});var r=i(6540);const s={},a=r.createContext(s);function t(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);