"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[4182],{5260:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"contracts/overview","title":"Smart Contracts Overview","description":"OmniDragon\'s smart contract system is built on LayerZero, providing a robust foundation for cross-chain operations and verifiable randomness.","source":"@site/docs/contracts/overview.md","sourceDirName":"contracts","slug":"/contracts/overview","permalink":"/contracts/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"contracts","next":{"title":"OmniDragon Token","permalink":"/contracts/core/token"}}');var t=r(4848),i=r(8453);const o={sidebar_position:1},a="Smart Contracts Overview",l={},c=[{value:"Ecosystem Architecture",id:"ecosystem-architecture",level:2},{value:"Core Protocol &amp; User Journey",id:"core-protocol--user-journey",level:3},{value:"Randomness System",id:"randomness-system",level:3},{value:"Economic System &amp; Jackpot",id:"economic-system--jackpot",level:3},{value:"Governance &amp; Partner Ecosystem",id:"governance--partner-ecosystem",level:3},{value:"Core Contracts",id:"core-contracts",level:2},{value:"OmniDragon",id:"omnidragon",level:3},{value:"Key Functions",id:"key-functions",level:4},{value:"ChainRegistry &amp; ChainSpecificEndpoint",id:"chainregistry--chainspecificendpoint",level:3},{value:"Key Functions",id:"key-functions-1",level:4},{value:"OmniDragonVRFConsumer",id:"omnidragonvrfconsumer",level:3},{value:"Key Functions",id:"key-functions-2",level:4},{value:"Security Features",id:"security-features",level:2},{value:"Access Control",id:"access-control",level:3},{value:"Integration Guide",id:"integration-guide",level:2},{value:"Contract Addresses",id:"contract-addresses",level:2},{value:"Mainnet",id:"mainnet",level:3},{value:"Testnet",id:"testnet",level:3},{value:"Development",id:"development",level:2},{value:"Security",id:"security",level:2},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Support",id:"support",level:2},{value:"Contract Categories",id:"contract-categories",level:2},{value:"Core",id:"core",level:3},{value:"Jackpot",id:"jackpot",level:3},{value:"Math",id:"math",level:3},{value:"Randomness",id:"randomness",level:3},{value:"Governance",id:"governance",level:3},{value:"Partners",id:"partners",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"smart-contracts-overview",children:"Smart Contracts Overview"})}),"\n",(0,t.jsx)(n.p,{children:"OmniDragon's smart contract system is built on LayerZero, providing a robust foundation for cross-chain operations and verifiable randomness."}),"\n",(0,t.jsx)(n.h2,{id:"ecosystem-architecture",children:"Ecosystem Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The OmniDragon ecosystem consists of several interconnected components that work together to provide a comprehensive DeFi platform."}),"\n",(0,t.jsx)(n.h3,{id:"core-protocol--user-journey",children:"Core Protocol & User Journey"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    %% Color classes for different components\n    classDef coreSystem fill:#e1f5fe,stroke:#0288d1,stroke-width:2px,color:#000000\n    classDef tokenSystem fill:#e8eaf6,stroke:#5c6bc0,stroke-width:2px,color:#000000\n    classDef userSystem fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000000\n    classDef journeyStep fill:#fff8e1,stroke:#ffb300,stroke-width:2px,color:#000000\n    classDef externalSystem fill:#e3f2fd,stroke:#1e88e5,stroke-width:2px,color:#000000\n    \n    %% Core Protocol\n    subgraph Core["Core Protocol"]\n        direction TB\n        \n        OmniDragon["OmniDragon Token<br>\u2022 ERC20 with lottery<br>\u2022 Cross-chain capability<br>\u2022 Fee distribution"]:::coreSystem\n        SwapTriggerOracle["SwapTriggerOracle<br>\u2022 Monitors trading<br>\u2022 Triggers lottery draws"]:::coreSystem\n        ChainRegistry["ChainRegistry<br>\u2022 Manages chain IDs<br>\u2022 Cross-chain config"]:::coreSystem\n        \n        subgraph TokensLP["Token Ecosystem"]\n            direction TB\n            LPToken["69LP Token<br>\u2022 Liquidity provider token<br>\u2022 Earns trading fees"]:::tokenSystem\n        end\n    end\n    \n    %% User Journey\n    subgraph UserJourney["User Journey"]\n        direction TB\n        \n        %% Main user\n        User["User<br>Entry point"]:::userSystem\n        \n        %% Journey steps\n        Trading["Trading<br>\u2022 Buy/Sell OmniDragon<br>\u2022 Generates fees<br>\u2022 Lottery entry"]:::journeyStep\n        AddLiquidity["Add Liquidity<br>\u2022 Create 69LP tokens<br>\u2022 Earn trading fees"]:::journeyStep\n        StakeLock["Stake & Lock<br>\u2022 69LP \u2192 ve69LP<br>\u2022 Governance rights"]:::journeyStep\n        Vote["Vote & Boost<br>\u2022 Governance proposals<br>\u2022 Weekly gauge voting"]:::journeyStep\n        Collect["Collect Rewards<br>\u2022 Fee distribution<br>\u2022 Lottery winnings"]:::journeyStep\n    end\n    \n    %% External DEXs\n    subgraph ExternalDEX["External DEXes"]\n        direction LR\n        UniswapV2["Uniswap V2"]:::externalSystem\n        UniswapV3["Uniswap V3"]:::externalSystem\n        Balancer["Balancer"]:::externalSystem\n    end\n    \n    %% Connect User Journey to System\n    User -- "Starts here" --\x3e Trading\n    Trading -- "Next step" --\x3e AddLiquidity\n    AddLiquidity -- "Next step" --\x3e StakeLock\n    StakeLock -- "Next step" --\x3e Vote\n    Vote -- "Final step" --\x3e Collect\n    Trading -- "Lottery" --\x3e Collect\n    \n    Trading -- "Swap" --\x3e ExternalDEX\n    ExternalDEX -- "Provide liquidity" --\x3e AddLiquidity\n    \n    %% Core Connections\n    ChainRegistry -- "Chain management" --\x3e OmniDragon\n    OmniDragon -- "Monitoring" --\x3e SwapTriggerOracle\n    AddLiquidity -- "Creates" --\x3e LPToken\n    \n    %% Style the containers\n    style UserJourney fill:#fff9c4,stroke:#ffb300,stroke-width:2px\n    style Core fill:#e1f5fe,stroke:#0288d1,stroke-width:2px\n    style ExternalDEX fill:#e3f2fd,stroke:#1e88e5,stroke-width:2px'}),"\n",(0,t.jsx)(n.h3,{id:"randomness-system",children:"Randomness System"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    %% Color classes for different components\n    classDef randomnessSystem fill:#e1f5fe,stroke:#1976d2,stroke-width:2px,color:#000000\n    classDef processSystem fill:#fff3e0,stroke:#ff9800,stroke-width:2px,color:#000000\n    \n    %% Randomness Sources\n    subgraph Sources["External Randomness Sources"]\n        direction LR\n        DrandDefault["drand Default<br>League of Entropy"]:::randomnessSystem\n        DrandEVMNet["drand EVMNet<br>EVM optimized"]:::randomnessSystem\n        DrandQuickNet["drand QuickNet<br>Fast verification"]:::randomnessSystem\n        ChainlinkVRF["ChainlinkVRF2.5<br>Cross-chain via LayerZero"]:::randomnessSystem\n    end\n    \n    %% Integrators\n    subgraph Integrators["Integrator Layer"]\n        direction LR\n        DefaultIntegrator["Default Integrator<br>\u2022 Verifies & formats"]:::randomnessSystem\n        EVMNetIntegrator["EVMNet Integrator<br>\u2022 Low latency"]:::randomnessSystem\n        QuickNetIntegrator["QuickNet Integrator<br>\u2022 Fastest verification"]:::randomnessSystem\n        ChainlinkRequester["ChainlinkVRFRequester<br>\u2022 Request gateway"]:::randomnessSystem\n    end\n    \n    %% Consumer\n    OmniDragonVRFConsumer["OmniDragonVRFConsumer<br>\u2022 Aggregates all sources<br>\u2022 Priority-based fallback<br>\u2022 Caching & redundancy"]:::randomnessSystem\n    \n    %% Process Flow\n    subgraph Process["Lottery Randomness Flow"]\n        direction TB\n        Step1["1. Multiple sources<br>provide entropy"]:::processSystem\n        Step2["2. Integrators verify<br>& format randomness"]:::processSystem\n        Step3["3. VRFConsumer<br>aggregates sources"]:::processSystem\n        Step4["4. SwapTrigger receives<br>secure random values"]:::processSystem\n        Step5["5. OmniDragon determines<br>lottery winners"]:::processSystem\n        \n        Step1 --\x3e Step2 --\x3e Step3 --\x3e Step4 --\x3e Step5\n    end\n    \n    %% Connect Components\n    DrandDefault --\x3e DefaultIntegrator\n    DrandEVMNet --\x3e EVMNetIntegrator\n    DrandQuickNet --\x3e QuickNetIntegrator\n    ChainlinkVRF --\x3e ChainlinkRequester\n    \n    DefaultIntegrator --\x3e OmniDragonVRFConsumer\n    EVMNetIntegrator --\x3e OmniDragonVRFConsumer\n    QuickNetIntegrator --\x3e OmniDragonVRFConsumer\n    ChainlinkRequester --\x3e OmniDragonVRFConsumer\n    \n    %% Style Containers\n    style Sources fill:#e1f5fe,stroke:#1976d2,stroke-width:2px\n    style Integrators fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style Process fill:#fff8e1,stroke:#ff9800,stroke-width:2px'}),"\n",(0,t.jsx)(n.h3,{id:"economic-system--jackpot",children:"Economic System & Jackpot"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    %% Color classes for different components\n    classDef jackpotSystem fill:#fff3e0,stroke:#fb8c00,stroke-width:2px,color:#000000\n    classDef feeSystem fill:#e1f5fe,stroke:#00acc1,stroke-width:2px,color:#000000\n    \n    %% Economic System - Fee Collection\n    subgraph FeeCollection["Fee Collection & Distribution"]\n        direction TB\n        FeeCollector["Fee Collector<br>\u2022 Processes all swaps<br>\u2022 Splits fees by purpose"]:::feeSystem\n        BurnMechanism["Burn Mechanism<br>\u2022 0.69% of each swap<br>\u2022 Supply reduction"]:::feeSystem\n    end\n    \n    %% Jackpot Mechanism\n    subgraph JackpotMechanism["Jackpot Mechanism"]\n        direction TB\n        JackpotVault["JackpotVault<br>\u2022 Holds 6.9% of all swaps<br>\u2022 Secure prize pool"]:::jackpotSystem\n        JackpotDistributor["JackpotDistributor<br>\u2022 Determines winners<br>\u2022 Distributes rewards"]:::jackpotSystem\n        WinProbability["Win Probability<br>\u2022 Based on swap size<br>\u2022 Dynamic adjustments"]:::jackpotSystem\n        LotteryWinners["Lottery Winners<br>\u2022 Selected via VRF<br>\u2022 Receive jackpot prizes"]:::jackpotSystem\n    end\n    \n    %% Connect Components\n    FeeCollector -- "6.9% of swap" --\x3e JackpotVault\n    FeeCollector -- "0.69% of swap" --\x3e BurnMechanism\n    \n    WinProbability -- "Determines win chance" --\x3e JackpotDistributor\n    JackpotVault -- "Funds prize pool" --\x3e JackpotDistributor\n    JackpotDistributor -- "Distributes prizes" --\x3e LotteryWinners\n    \n    %% Style Containers\n    style FeeCollection fill:#e1f5fe,stroke:#00acc1,stroke-width:2px\n    style JackpotMechanism fill:#fff3e0,stroke:#fb8c00,stroke-width:2px'}),"\n",(0,t.jsx)(n.h3,{id:"governance--partner-ecosystem",children:"Governance & Partner Ecosystem"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    %% Color classes for different components\n    classDef governanceSystem fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000000\n    classDef externalSystem fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000000\n    \n    %% ve69LP System\n    subgraph VeTokenSystem["ve69LP Governance System"]\n        direction TB\n        ve69LP["ve69LP Token<br>\u2022 Locked LP position<br>\u2022 Time-weighted voting power"]:::governanceSystem\n        ve69LPFeeDistributor["ve69LP Fee Distributor<br>\u2022 Receives 2.41% of swaps<br>\u2022 Proportional distribution"]:::governanceSystem\n        ProposalVoting["Protocol Governance<br>\u2022 Parameter changes<br>\u2022 Treasury management"]:::governanceSystem\n    end\n    \n    %% Weekly Epoch System\n    subgraph GaugeSystem["Weekly Gauge & Boost System"]\n        direction TB\n        EpochReset["Weekly Epoch Reset<br>\u2022 7-day voting cycle"]:::governanceSystem\n        GaugeVoting["Partner Pool Voting<br>\u2022 ve69LP holders allocate votes"]:::governanceSystem\n        GaugeController["Gauge Controller<br>\u2022 Tallies all votes<br>\u2022 Sets boost allocation"]:::governanceSystem\n    end\n    \n    %% Partners\n    subgraph PartnerSystem["Partner Pools & Rewards"]\n        direction TB\n        PartnerRegistry["Partner Registry<br>\u2022 Official partner onboarding"]:::externalSystem\n        PartnerPools["Partner Liquidity Pools<br>\u2022 Dragon + Partner token"]:::externalSystem\n        ProbabilityBoost["Probability Boost<br>\u2022 Increases win chance"]:::externalSystem\n    end\n    \n    %% Connect Components\n    ve69LP -- "Earns from fees" --\x3e ve69LPFeeDistributor\n    ve69LP -- "Grants governance rights" --\x3e ProposalVoting\n    \n    ve69LP -- "Enables gauge voting" --\x3e GaugeVoting\n    GaugeVoting -- "Vote allocation" --\x3e GaugeController\n    EpochReset -- "Weekly reset" --\x3e GaugeVoting\n    GaugeController -- "Calculate weights" --\x3e ProbabilityBoost\n    \n    PartnerRegistry -- "Register partner" --\x3e PartnerPools\n    ProbabilityBoost -- "Increase probability" --\x3e PartnerPools\n    \n    %% Style Containers\n    style VeTokenSystem fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style GaugeSystem fill:#e0f7fa,stroke:#00acc1,stroke-width:2px\n    style PartnerSystem fill:#fff3e0,stroke:#f57c00,stroke-width:2px'}),"\n",(0,t.jsx)(n.h2,{id:"core-contracts",children:"Core Contracts"}),"\n",(0,t.jsx)(n.h3,{id:"omnidragon",children:"OmniDragon"}),"\n",(0,t.jsx)(n.p,{children:"The main token contract that implements the ERC-20 standard with LayerZero compatibility. Key features include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cross-chain token transfers"}),"\n",(0,t.jsx)(n.li,{children:"Secure minting and burning mechanisms"}),"\n",(0,t.jsx)(n.li,{children:"Access control for administrative functions"}),"\n",(0,t.jsx)(n.li,{children:"Integration with VRF providers for randomness"}),"\n",(0,t.jsx)(n.li,{children:"Built-in jackpot mechanics and fee structure"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"key-functions",children:"Key Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Cross-chain transfer\nfunction sendToChain(\n    uint16 _dstChainId,\n    bytes calldata _toAddress,\n    uint256 _amount,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes calldata _adapterParams\n) external payable;\n\n// Minting (restricted)\nfunction mint(address to, uint256 amount) external onlyOwner;\n\n// Burning\nfunction burn(uint256 amount) external;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"chainregistry--chainspecificendpoint",children:"ChainRegistry & ChainSpecificEndpoint"}),"\n",(0,t.jsx)(n.p,{children:"Handles cross-chain messaging and token bridging operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"LayerZero message passing"}),"\n",(0,t.jsx)(n.li,{children:"Bridge security and validation"}),"\n",(0,t.jsx)(n.li,{children:"Cross-chain state synchronization"}),"\n",(0,t.jsx)(n.li,{children:"Gas optimization for cross-chain operations"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"key-functions-1",children:"Key Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Register a new chain\nfunction registerChain(\n    uint16 _chainId, \n    bytes calldata _endpoint,\n    bool _isActive\n) external onlyOwner;\n\n// Get chain endpoint\nfunction getChainEndpoint(uint16 _chainId) external view returns (bytes memory);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"omnidragonvrfconsumer",children:"OmniDragonVRFConsumer"}),"\n",(0,t.jsx)(n.p,{children:"Manages the integration with verifiable randomness providers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Multiple VRF source integration"}),"\n",(0,t.jsx)(n.li,{children:"Randomness verification"}),"\n",(0,t.jsx)(n.li,{children:"Request and callback mechanisms"}),"\n",(0,t.jsx)(n.li,{children:"Fallback randomness sources"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"key-functions-2",children:"Key Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Aggregate randomness from multiple sources\nfunction aggregateRandomness() public;\n\n// Get latest random value\nfunction getLatestRandomness() external view returns (uint256);\n\n// Fulfill randomness request\nfunction fulfillRandomness(address _consumer, uint256 _requestId) external;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,t.jsx)(n.p,{children:"Our contracts implement several security measures:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Role-based access control (RBAC)"}),"\n",(0,t.jsx)(n.li,{children:"Multi-signature requirements for critical operations"}),"\n",(0,t.jsx)(n.li,{children:"Rate limiting and circuit breakers"}),"\n",(0,t.jsx)(n.li,{children:"Comprehensive event logging"}),"\n",(0,t.jsx)(n.li,{children:"Regular security audits"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:'// Role-based access through Ownable pattern\nmodifier onlyOwner() {\n    require(owner() == msg.sender, "Caller is not the owner");\n    _;\n}\n\n// Authorization for consumers\nfunction setAuthorizedConsumer(address _consumer, bool _authorized) external onlyOwner;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"integration-guide",children:"Integration Guide"}),"\n",(0,t.jsx)(n.p,{children:"To integrate OmniDragon into your project:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Token Integration"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:'import "@omnidragon/contracts/OmniDragon.sol";\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Chain Registry Integration"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:'import "@omnidragon/contracts/ChainRegistry.sol";\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Randomness Integration"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:'import "@omnidragon/contracts/drand/OmniDragonVRFConsumer.sol";\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contract-addresses",children:"Contract Addresses"}),"\n",(0,t.jsx)(n.h3,{id:"mainnet",children:"Mainnet"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["OmniDragon: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n",(0,t.jsxs)(n.li,{children:["ChainRegistry: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n",(0,t.jsxs)(n.li,{children:["OmniDragonVRFConsumer: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testnet",children:"Testnet"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["OmniDragon: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n",(0,t.jsxs)(n.li,{children:["ChainRegistry: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n",(0,t.jsxs)(n.li,{children:["OmniDragonVRFConsumer: ",(0,t.jsx)(n.code,{children:"0x..."})," (Coming Soon)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,t.jsx)(n.p,{children:"For developers looking to contribute or build on OmniDragon:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Clone our repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/wenakita/omnidragon.git\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run tests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.p,{children:["Security is our top priority. Our contracts have undergone multiple audits and are continuously monitored. If you discover any security issues, please report them to ",(0,t.jsx)(n.a,{href:"mailto:security@sonicreddragon.io",children:"security@sonicreddragon.io"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Access Control"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always use the provided role-based access control"}),"\n",(0,t.jsx)(n.li,{children:"Implement multi-signature for critical operations"}),"\n",(0,t.jsx)(n.li,{children:"Regularly review and update access permissions"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Cross-Chain Operations"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify message sources"}),"\n",(0,t.jsx)(n.li,{children:"Implement replay protection"}),"\n",(0,t.jsx)(n.li,{children:"Use appropriate gas limits"}),"\n",(0,t.jsx)(n.li,{children:"Monitor bridge operations"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Randomness Usage"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify randomness proofs"}),"\n",(0,t.jsx)(n.li,{children:"Implement fallback mechanisms"}),"\n",(0,t.jsx)(n.li,{children:"Use appropriate timeouts"}),"\n",(0,t.jsx)(n.li,{children:"Monitor VRF network status"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"For technical support or questions about contract integration:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Join our ",(0,t.jsx)(n.a,{href:"https://discord.gg/omnidragon",children:"Discord"})]}),"\n",(0,t.jsxs)(n.li,{children:["Open an issue on ",(0,t.jsx)(n.a,{href:"https://github.com/wenakita/sonicreddragon",children:"GitHub"})]}),"\n",(0,t.jsxs)(n.li,{children:["Contact us at ",(0,t.jsx)(n.a,{href:"mailto:support@sonicreddragon.io",children:"support@sonicreddragon.io"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contract-categories",children:"Contract Categories"}),"\n",(0,t.jsx)(n.p,{children:"The OmniDragon contracts are organized into the following categories:"}),"\n",(0,t.jsx)(n.h3,{id:"core",children:"Core"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./core/omni-dragon",children:"OmniDragon.sol"}),": Main token contract with cross-chain capabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./core/periphery",children:"OmniDragonPeriphery.sol"}),": Helper contract for managing token integrations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./core/chain-registry",children:"ChainRegistry.sol"}),": Manages endpoints across supported chains"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./core/chain-endpoint",children:"ChainSpecificEndpoint.sol"}),": Chain-specific configurations"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"jackpot",children:"Jackpot"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./jackpot/distributor",children:"DragonJackpotDistributor.sol"}),": Distributes jackpot winnings to winners"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./jackpot/vault",children:"DragonJackpotVault.sol"}),": Securely stores jackpot funds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./jackpot/trigger-oracle",children:"OmniDragonSwapTriggerOracle.sol"}),": Creates lottery entries from swaps"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"math",children:"Math"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/dragon-math-lib",children:"DragonMathLib.sol"}),": Core mathematical utilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/hermes-math",children:"HermesMath.sol"}),": Jackpot distribution mathematics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/date-time-lib",children:"DragonDateTimeLib.sol"}),": Time-related calculations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/ve69lp-math",children:"ve69LPMath.sol"}),": veToken staking mathematics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/voting-power",children:"VotingPowerCalculator.sol"}),": Governance voting power calculations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/adaptive-fee",children:"DragonAdaptiveFeeManager.sol"}),": Dynamic fee adjustment system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./math/market-oracle",children:"MarketConditionOracle.sol"}),": Market condition monitoring for adaptations"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"randomness",children:"Randomness"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./randomness/vrf-consumer",children:"OmniDragonVRFConsumer.sol"}),": Main verifiable randomness consumer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./randomness/vrf-integrator",children:"DragonVRFIntegrator.sol"}),": External randomness integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./randomness/vrf-consumer-base",children:"DragonVRFConsumer.sol"}),": Base randomness consumer contract"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"governance",children:"Governance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./governance/governor",children:"OmniDragonGovernor.sol"}),": Governance contract for protocol decisions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./governance/timelock",children:"OmniDragonTimelockController.sol"}),": Timelock for governance actions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./governance/ve69lp",children:"ve69LP.sol"}),": Vote-escrowed LP token for governance"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"partners",children:"Partners"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./partners/registry",children:"DragonPartnerRegistry.sol"}),": Registry for partner integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./partners/factory",children:"DragonPartnerFactory.sol"}),": Factory for creating partner pools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./partners/pool",children:"DragonPartnerPool.sol"}),": Partner-specific pools and incentives"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);