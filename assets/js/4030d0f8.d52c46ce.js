"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[4848],{7555:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"contracts/core/chain-registry","title":"Chain Registry","description":"The Chain Registry (ChainRegistry.sol) maintains information about supported blockchain networks and their respective configurations for cross-chain functionality in the OmniDragon ecosystem.","source":"@site/docs/contracts/core/chain-registry.md","sourceDirName":"contracts/core","slug":"/contracts/core/chain-registry","permalink":"/contracts/core/chain-registry","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/core/chain-registry.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Chain Registry","sidebar_position":2},"sidebar":"contracts","previous":{"title":"Deployer","permalink":"/contracts/core/deployer"},"next":{"title":"Overview","permalink":"/contracts/governance/overview"}}');var t=i(4848),s=i(8453);const a={title:"Chain Registry",sidebar_position:2},o="Chain Registry Contract",c={},d=[{value:"Contract Overview",id:"contract-overview",level:2},{value:"Actual Implementation",id:"actual-implementation",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Chain Registry Usage",id:"chain-registry-usage",level:2},{value:"Chain-Specific Configuration",id:"chain-specific-configuration",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Security Considerations",id:"security-considerations",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"chain-registry-contract",children:"Chain Registry Contract"})}),"\n",(0,t.jsxs)(e.p,{children:["The Chain Registry (",(0,t.jsx)(e.code,{children:"ChainRegistry.sol"}),") maintains information about supported blockchain networks and their respective configurations for cross-chain functionality in the OmniDragon ecosystem."]}),"\n",(0,t.jsx)(e.h2,{id:"contract-overview",children:"Contract Overview"}),"\n",(0,t.jsx)(e.p,{children:"The Chain Registry serves as a central directory for the OmniDragon ecosystem, providing:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Registry of supported blockchain networks and their chain IDs"}),"\n",(0,t.jsx)(e.li,{children:"Chain-specific configuration for tokens and contracts"}),"\n",(0,t.jsx)(e.li,{children:"Active/inactive status tracking for chains"}),"\n",(0,t.jsx)(e.li,{children:"Ability to retrieve chain information across the ecosystem"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"actual-implementation",children:"Actual Implementation"}),"\n",(0,t.jsx)(e.p,{children:"The Chain Registry contract is implemented as an Ownable contract with the following storage structure:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// Storage for chain configuration\nmapping(uint16 => ChainConfig) private chainConfigs;\n\n// Track all supported chains\nuint16[] private supportedChains;\n\n// Current chain ID (set at deployment time)\nuint16 private currentChainId;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"ChainConfig"})," struct is defined in the ",(0,t.jsx)(e.code,{children:"IChainRegistry"})," interface:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"struct ChainConfig {\n    uint16 chainId;\n    string chainName;\n    address wrappedNativeToken;\n    address swapTrigger;\n    address vrfConsumer;\n    address dragonToken;\n    bool isActive;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,t.jsx)(e.p,{children:"The contract implements several functions for managing chain configurations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// Register a new blockchain network\nfunction registerChain(\n    uint16 _chainId,\n    string calldata _chainName,\n    address _wrappedNativeToken,\n    address _swapTrigger,\n    address _vrfConsumer,\n    address _dragonToken\n) external override onlyOwner;\n\n// Update an existing chain configuration\nfunction updateChain(\n    uint16 _chainId,\n    address _wrappedNativeToken,\n    address _swapTrigger,\n    address _vrfConsumer,\n    address _dragonToken\n) external override onlyOwner;\n\n// Set chain active/inactive status\nfunction setChainActive(uint16 _chainId, bool _isActive) external override onlyOwner;\n\n// Get chain configuration\nfunction getChainConfig(uint16 _chainId) external view override returns (ChainConfig memory);\n\n// Get the current chain's LayerZero ID\nfunction getCurrentChainId() external view override returns (uint16);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"chain-registry-usage",children:"Chain Registry Usage"}),"\n",(0,t.jsx)(e.p,{children:"The Chain Registry is used throughout the OmniDragon ecosystem to retrieve chain-specific information:"}),"\n",(0,t.jsx)(e.mermaid,{value:'flowchart TB\n    classDef main fill:#4a80d1;stroke:#355899;color:#ffffff;font-weight:bold\n    classDef component fill:#42a5f5;stroke:#1e88e5;color:#ffffff\n    \n    ChainRegistry["Chain Registry"]:::main\n    \n    OmniDragon["OmniDragon Token"]:::component\n    SwapTrigger["Swap Trigger"]:::component\n    VRFConsumer["VRF Consumer"]:::component\n    \n    ChainRegistry --\x3e|"Provides configuration"| OmniDragon\n    ChainRegistry --\x3e|"Provides configuration"| SwapTrigger\n    ChainRegistry --\x3e|"Provides configuration"| VRFConsumer'}),"\n",(0,t.jsx)(e.h2,{id:"chain-specific-configuration",children:"Chain-Specific Configuration"}),"\n",(0,t.jsx)(e.p,{children:"The Chain Registry tracks the following for each supported chain:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Wrapped Native Token"}),": The chain's wrapped native token (WETH, WAVAX, WBNB, etc.)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Swap Trigger"}),": The address of the swap trigger contract for that chain"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"VRF Consumer"}),": The address of the VRF consumer for that chain"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Dragon Token"}),": The OmniDragon token address on that chain"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(e.p,{children:"The Registry supports key functions for retrieving specific configuration elements:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// Get the wrapped native token address\nfunction getWrappedNativeToken(uint16 _chainId) external view override returns (address);\n\n// Get swap trigger address\nfunction getSwapTrigger(uint16 _chainId) external view override returns (address);\n\n// Get VRF consumer address\nfunction getVRFConsumer(uint16 _chainId) external view override returns (address);\n\n// Get Dragon token address\nfunction getDragonToken(uint16 _chainId) external view override returns (address);\n\n// Get all supported chain IDs\nfunction getSupportedChains() external view override returns (uint16[] memory);\n\n// Check if a chain is supported\nfunction isChainSupported(uint16 _chainId) external view override returns (bool);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(e.p,{children:"The Chain Registry implements several security features:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Owner-Only Configuration"}),": Only the contract owner can register or update chains"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Validation Checks"}),": Validates addresses and parameters before updating the registry"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Error Handling"}),": Uses custom errors for clear error reporting"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);