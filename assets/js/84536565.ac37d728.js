"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[5659],{1391:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"contracts/randomness/drand","title":"drand Integration","description":"The drand integration allows OmniDragon to use the decentralized randomness beacon provided by the League of Entropy\'s drand network as another source of verifiable randomness.","source":"@site/docs/contracts/randomness/drand.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/drand","permalink":"/contracts/randomness/drand","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/drand.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"contracts","previous":{"title":"Randomness System","permalink":"/contracts/randomness/"},"next":{"title":"Chainlink VRF Integrator","permalink":"/contracts/randomness/chainlink"}}');var t=r(4848),i=r(8453);const a={sidebar_position:5},o="drand Integration",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Integration Components",id:"integration-components",level:2},{value:"drand Beacon Client",id:"drand-beacon-client",level:3},{value:"DragonVRFDrandIntegrator",id:"dragonvrfdrandintegrator",level:3},{value:"drand Protocol",id:"drand-protocol",level:2},{value:"Integration with OmniDragonVRFConsumer",id:"integration-with-omnidragonvrfconsumer",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Technical Details",id:"technical-details",level:2},{value:"Public Key",id:"public-key",level:3},{value:"Chain Information",id:"chain-information",level:3},{value:"Resources",id:"resources",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"drand-integration",children:"drand Integration"})}),"\n",(0,t.jsx)(e.p,{children:"The drand integration allows OmniDragon to use the decentralized randomness beacon provided by the League of Entropy's drand network as another source of verifiable randomness."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.p,{children:"drand is a distributed randomness beacon that provides publicly verifiable, unpredictable, and unbiased random values. OmniDragon integrates drand as part of its multi-source randomness approach, enhancing the security and reliability of the randomness used in the jackpot system."}),"\n",(0,t.jsx)(e.mermaid,{value:'flowchart TD\n    A[OmniDragonVRFConsumer] --\x3e B[drand Integrator]\n    B --\x3e C[Verifiable Randomness]\n    C --\x3e D[League of Entropy Beacon]\n    \n    subgraph "drand Network"\n        D --\x3e E[Node 1]\n        D --\x3e F[Node 2]\n        D --\x3e G[Node 3]\n        D --\x3e H[Node n]\n    end'}),"\n",(0,t.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Decentralized Randomness"}),": Uses randomness generated by multiple independent organizations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Publicly Verifiable"}),": Anyone can verify the correctness of the randomness"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Threshold-Based Security"}),": Resistant to attacks unless a majority of participants collude"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Regular Beacon Intervals"}),": Provides new randomness at regular, predictable intervals"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Quantum-Resistant"}),": Uses BLS signatures for long-term security"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"integration-components",children:"Integration Components"}),"\n",(0,t.jsx)(e.h3,{id:"drand-beacon-client",children:"drand Beacon Client"}),"\n",(0,t.jsx)(e.p,{children:"The drand beacon client is responsible for fetching and verifying randomness from the drand network:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"contract DrandClient {\n    uint256 public constant PERIOD = 30; // seconds\n    uint256 public constant GENESIS_TIME = 1595431050; // Unix timestamp\n    \n    // The latest randomness value fetched from drand\n    bytes32 public latestRandomness;\n    \n    // The round number of the latest randomness\n    uint256 public latestRound;\n    \n    // Last time the randomness was updated\n    uint256 public lastUpdateTime;\n    \n    // Public key used for verification (compressed G1 point)\n    bytes public drandPublicKey;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"dragonvrfdrandintegrator",children:"DragonVRFDrandIntegrator"}),"\n",(0,t.jsx)(e.p,{children:"The DragonVRFDrandIntegrator serves as the bridge between the drand network and the OmniDragonVRFConsumer:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"contract DragonVRFDrandIntegrator is IDragonVRFIntegrator, Ownable {\n    // The drand client contract\n    DrandClient public drandClient;\n    \n    // Latest verified randomness\n    uint256 public latestRandomness;\n    \n    // Latest round number\n    uint256 public latestRound;\n    \n    // Authorized consumers\n    mapping(address => bool) public authorizedConsumers;\n    \n    // Verification state\n    bool public verificationEnabled;\n    \n    /**\n     * @dev Returns the latest randomness value\n     * @return random The randomness value\n     * @return round The round number\n     */\n    function getLatestRandomness() external view override returns (uint256 random, uint256 round) {\n        return (latestRandomness, latestRound);\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"drand-protocol",children:"drand Protocol"}),"\n",(0,t.jsx)(e.p,{children:"drand operates on a threshold cryptography model where multiple independent providers participate:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Setup Phase"}),": The network is initialized with distributed key generation"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Beacon Generation"}),": Each round, participants create partial signatures"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Threshold Signing"}),": When enough partial signatures are collected, a full signature is created"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Randomness Publication"}),": The signature is publicly shared as verifiable randomness"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Client Verification"}),": Clients can verify the signature against the public key"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"integration-with-omnidragonvrfconsumer",children:"Integration with OmniDragonVRFConsumer"}),"\n",(0,t.jsx)(e.p,{children:"The drand integration feeds into the OmniDragonVRFConsumer as one of multiple randomness sources:"}),"\n",(0,t.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant Consumer as OmniDragonVRFConsumer\n    participant Integrator as DragonVRFDrandIntegrator\n    participant Client as DrandClient\n    participant Network as drand Network\n    \n    Consumer->>Integrator: getLatestRandomness()\n    \n    Integrator->>Client: getLatestBeacon()\n    \n    alt Cache is fresh\n        Client--\x3e>Integrator: Return cached randomness\n    else Cache needs update\n        Client->>Network: Request latest beacon\n        Network--\x3e>Client: Return beacon with signature\n        Client->>Client: Verify signature\n        Client->>Client: Update stored randomness\n        Client--\x3e>Integrator: Return fresh randomness\n    end\n    \n    Integrator--\x3e>Consumer: Return randomness and round"}),"\n",(0,t.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(e.p,{children:"The drand integration includes several security measures:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Signature Verification"}),": All randomness values are cryptographically verified"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Time-Based Validation"}),": Ensures randomness is from the expected round"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Threshold Security"}),": The network is secure unless a majority of participants are compromised"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Fallback Options"}),": If drand is unavailable, the system can operate with other randomness sources"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Public Auditability"}),": The randomness generation process can be publicly audited"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(e.p,{children:"When setting up the drand integrator in the OmniDragonVRFConsumer:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:'// Add drand as a randomness source\nbytes32 drandNetworkId = keccak256("DRAND");\nvrfConsumer.addNetwork(\n    drandNetworkId,\n    drandIntegratorAddress,\n    150  // Weight: 150 out of total weights\n);\n'})}),"\n",(0,t.jsx)(e.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,t.jsx)(e.h3,{id:"public-key",children:"Public Key"}),"\n",(0,t.jsx)(e.p,{children:"The drand network's public key used for verification (League of Entropy mainnet):"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31\n"})}),"\n",(0,t.jsx)(e.h3,{id:"chain-information",children:"Chain Information"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Genesis Time"}),": 1595431050 (July 22, 2020)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Period"}),": 30 seconds (new randomness every 30 seconds)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Public Entry Point"}),": ",(0,t.jsx)(e.a,{href:"https://api.drand.sh/public/latest",children:"https://api.drand.sh/public/latest"})]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsx)(e.p,{children:"For more information on drand:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://github.com/drand/drand",children:"drand GitHub Repository"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.leagueofentropy.com/",children:"League of Entropy Website"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://drand.love/docs/",children:"drand Documentation"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://drand.cloudflare.com/",children:"Cloudflare's drand Service"})}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function a(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);