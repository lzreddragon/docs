"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[4640],{4147:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/development","title":"Development Guide","description":"This guide provides best practices and workflows for developing with the OmniDragon protocol.","source":"@site/docs/guides/development.md","sourceDirName":"guides","slug":"/guides/development","permalink":"/guides/development","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/guides/development.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Development Guide"},"sidebar":"guides","previous":{"title":"Configuration Guide","permalink":"/guides/configuration"},"next":{"title":"Bridging DRAGON Tokens","permalink":"/guides/user/bridging"}}');var i=t(4848),r=t(8453);const o={sidebar_position:3,title:"Development Guide"},a="Development Guide",c={},l=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Local Development Setup",id:"local-development-setup",level:3},{value:"Testing Approach",id:"testing-approach",level:3},{value:"Debugging Techniques",id:"debugging-techniques",level:3},{value:"Customization and Extension",id:"customization-and-extension",level:2},{value:"Creating a Custom Integration",id:"creating-a-custom-integration",level:3},{value:"Contract Upgrades",id:"contract-upgrades",level:3},{value:"Cross-Chain Development",id:"cross-chain-development",level:2},{value:"Setting Up Multi-Chain Environment",id:"setting-up-multi-chain-environment",level:3},{value:"Testing Cross-Chain Functions",id:"testing-cross-chain-functions",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"Community Contributions",id:"community-contributions",level:2},{value:"Resource Links",id:"resource-links",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"development-guide",children:"Development Guide"})}),"\n",(0,i.jsx)(e.p,{children:"This guide provides best practices and workflows for developing with the OmniDragon protocol."}),"\n",(0,i.jsx)(e.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(e.p,{children:"Before diving into development, understand the OmniDragon architecture:"}),"\n",(0,i.jsx)(e.mermaid,{value:'flowchart TB\n    %% Core components\n    subgraph CoreContracts ["Core Protocol"]\n        TOKEN["OmniDragon Token"]:::core\n        PERIPHERY["OmniDragon Periphery"]:::core\n        VAULT["Jackpot Vault"]:::core\n        REGISTRY["Chain Registry"]:::core\n    end\n    \n    %% Extension systems\n    subgraph JackpotSystem ["Jackpot System"]\n        DISTRIBUTOR["Jackpot Distributor"]:::jackpot\n        TRIGGER["Jackpot Trigger"]:::jackpot\n        ORACLE["Swap Trigger Oracle"]:::jackpot\n    end\n    \n    subgraph CrossChainSystem ["Cross-Chain System"]\n        BRIDGE["Token Bridge"]:::bridge\n        ENDPOINT["Chain Endpoint"]:::bridge\n        MSG["Message Handler"]:::bridge\n    end\n    \n    subgraph RandomnessSystem ["Randomness System"]\n        VRF["VRF Consumer"]:::random\n        DRAND["Drand Consumer"]:::random\n        ARB_VRF["Arbitrum VRF"]:::random\n    end\n    \n    %% Connect the systems\n    TOKEN <--\x3e PERIPHERY\n    TOKEN --\x3e VAULT\n    TOKEN --\x3e REGISTRY\n    \n    VAULT --\x3e DISTRIBUTOR\n    DISTRIBUTOR --\x3e TRIGGER\n    TRIGGER --\x3e ORACLE\n    \n    REGISTRY --\x3e BRIDGE\n    BRIDGE --\x3e ENDPOINT\n    ENDPOINT --\x3e MSG\n    \n    TRIGGER --\x3e VRF\n    VRF --\x3e DRAND\n    VRF --\x3e ARB_VRF\n    \n    %% Styling\n    classDef core fill:#e3f2fd,stroke:#1e88e5,color:#0d47a1\n    classDef jackpot fill:#e8f5e9,stroke:#43a047,color:#1b5e20\n    classDef bridge fill:#f3e5f5,stroke:#8e24aa,color:#4a148c\n    classDef random fill:#fff8e1,stroke:#ffb300,color:#ff6f00\n    \n    %% Style subgraphs\n    style CoreContracts fill:#e3f2fd,stroke:#bbdefb,color:#1565c0\n    style JackpotSystem fill:#e8f5e9,stroke:#c8e6c9,color:#2e7d32\n    style CrossChainSystem fill:#f3e5f5,stroke:#e1bee7,color:#6a1b9a\n    style RandomnessSystem fill:#fff8e1,stroke:#ffecb3,color:#ff8f00'}),"\n",(0,i.jsx)(e.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,i.jsx)(e.h3,{id:"local-development-setup",children:"Local Development Setup"}),"\n",(0,i.jsxs)(e.p,{children:["After completing the ",(0,i.jsx)(e.a,{href:"/guides/installation",children:"installation"}),", set up your development environment:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Start a local Hardhat node\nnpx hardhat node\n\n# In a separate terminal, deploy the contracts\nnpx hardhat run scripts/deploy.js --network localhost\n"})}),"\n",(0,i.jsx)(e.h3,{id:"testing-approach",children:"Testing Approach"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon follows a comprehensive testing strategy:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unit Tests"}),": Test individual contract functions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Integration Tests"}),": Test interactions between contracts"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"System Tests"}),": Test complete workflows"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fuzz Tests"}),": Test with random inputs using property-based testing"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Example test structure:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'describe("OmniDragon", function() {\n  // Unit tests for OmniDragon token\n  describe("Core functionality", function() {\n    it("Should track balance changes correctly", async function() {\n      // Test implementation\n    });\n    \n    it("Should apply fees correctly", async function() {\n      // Test implementation\n    });\n  });\n  \n  // Integration tests with jackpot system\n  describe("Jackpot integration", function() {\n    it("Should send fees to jackpot vault", async function() {\n      // Test implementation\n    });\n  });\n});\n'})}),"\n",(0,i.jsx)(e.h3,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,i.jsx)(e.p,{children:"When debugging contracts:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Console Logging"}),": Use Hardhat's ",(0,i.jsx)(e.code,{children:"console.log"})," for debugging"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'import "hardhat/console.sol";\n\nfunction transfer(address to, uint256 amount) public override returns (bool) {\n    console.log("Transfer from:", msg.sender, "to:", to, "amount:", amount);\n    // Function implementation\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Events"}),": Use events for tracking state changes"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"event FeeCollected(address from, address to, uint256 amount, uint256 feeAmount);\n\nfunction _collectFee(address from, address to, uint256 amount) internal returns (uint256) {\n    uint256 feeAmount = calculateFee(from, to, amount);\n    emit FeeCollected(from, to, amount, feeAmount);\n    return amount - feeAmount;\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Test Fixtures"}),": Use Hardhat fixtures for test setup"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");\n\nasync function deployTokenFixture() {\n  // Deploy contracts and return instances\n}\n\ndescribe("OmniDragon", function() {\n  it("Should work as expected", async function() {\n    const { token, vault } = await loadFixture(deployTokenFixture);\n    // Test implementation\n  });\n});\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"customization-and-extension",children:"Customization and Extension"}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-custom-integration",children:"Creating a Custom Integration"}),"\n",(0,i.jsx)(e.p,{children:"To integrate with OmniDragon, implement the appropriate interfaces:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport "@omnidragon/interfaces/IJackpotTrigger.sol";\nimport "@omnidragon/interfaces/IOmniDragon.sol";\n\ncontract CustomJackpotTrigger is IJackpotTrigger {\n    IOmniDragon public omniDragon;\n    address public jackpotDistributor;\n    \n    constructor(address _omniDragon, address _jackpotDistributor) {\n        omniDragon = IOmniDragon(_omniDragon);\n        jackpotDistributor = _jackpotDistributor;\n    }\n    \n    function checkAndTriggerJackpot() external override returns (bool) {\n        // Custom trigger logic\n        uint256 jackpotAmount = omniDragon.getCurrentJackpotAmount();\n        \n        // Determine if jackpot should trigger\n        if (shouldTriggerJackpot(jackpotAmount)) {\n            // Trigger jackpot distribution\n            IDragonJackpotDistributor(jackpotDistributor).initiateJackpotDistribution();\n            return true;\n        }\n        \n        return false;\n    }\n    \n    function shouldTriggerJackpot(uint256 amount) internal view returns (bool) {\n        // Custom trigger conditions\n        return amount > threshold && otherConditions;\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"contract-upgrades",children:"Contract Upgrades"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon uses the transparent proxy pattern for upgrades:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Implementing Upgrades"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const { upgradeProxy } = require("@openzeppelin/hardhat-upgrades");\n\nasync function main() {\n  const OmniDragonV2 = await ethers.getContractFactory("OmniDragonV2");\n  const upgraded = await upgradeProxy(PROXY_ADDRESS, OmniDragonV2);\n  console.log("OmniDragon upgraded to V2");\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Upgrade Best Practices"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Never change storage layout in upgrades"}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"initializer"})," functions for new initialization logic"]}),"\n",(0,i.jsx)(e.li,{children:"Always test upgrades on testnet before mainnet"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"cross-chain-development",children:"Cross-Chain Development"}),"\n",(0,i.jsx)(e.h3,{id:"setting-up-multi-chain-environment",children:"Setting Up Multi-Chain Environment"}),"\n",(0,i.jsx)(e.p,{children:"For developing cross-chain functionality:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// hardhat.config.js\nmodule.exports = {\n  networks: {\n    arbitrum: {\n      url: process.env.ARBITRUM_RPC_URL,\n      accounts: [process.env.PRIVATE_KEY]\n    },\n    bsc: {\n      url: process.env.BSC_RPC_URL,\n      accounts: [process.env.PRIVATE_KEY]\n    },\n    ethereum: {\n      url: process.env.ETHEREUM_RPC_URL,\n      accounts: [process.env.PRIVATE_KEY]\n    }\n  }\n};\n"})}),"\n",(0,i.jsx)(e.h3,{id:"testing-cross-chain-functions",children:"Testing Cross-Chain Functions"}),"\n",(0,i.jsx)(e.p,{children:"For testing cross-chain functionality:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'describe("Cross-chain transfers", function() {\n  it("Should handle cross-chain token transfers", async function() {\n    // Deploy contracts on different networks\n    const sourceToken = await deployToNetwork("arbitrum");\n    const destToken = await deployToNetwork("bsc");\n    \n    // Set up mock cross-chain messaging\n    await mockCrossChainMessaging(sourceToken, destToken);\n    \n    // Test cross-chain transfer\n    await sourceToken.sendTokensToChain(\n      BSC_CHAIN_ID,\n      user.address,\n      ethers.utils.parseEther("100")\n    );\n    \n    // Verify tokens arrive on destination chain\n    expect(await destToken.balanceOf(user.address))\n      .to.equal(ethers.utils.parseEther("100"));\n  });\n});\n'})}),"\n",(0,i.jsx)(e.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,i.jsx)(e.p,{children:"When developing for OmniDragon:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Follow the Checks-Effects-Interactions Pattern"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'function withdraw(uint256 amount) external {\n    // Checks\n    require(amount > 0, "Zero amount");\n    require(balances[msg.sender] >= amount, "Insufficient balance");\n    \n    // Effects\n    balances[msg.sender] -= amount;\n    \n    // Interactions\n    (bool success, ) = msg.sender.call{value: amount}("");\n    require(success, "Transfer failed");\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Use OpenZeppelin Libraries"})," for standard functionality"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Implement Rate Limiting"})," for sensitive operations"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Add Emergency Pause Functionality"})," for critical contracts"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Thoroughly Test Edge Cases"})," with fuzzing and property-based testing"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon uses a CI/CD pipeline for development:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run tests\n        run: npm test\n      - name: Run linters\n        run: npm run lint\n"})}),"\n",(0,i.jsx)(e.h2,{id:"community-contributions",children:"Community Contributions"}),"\n",(0,i.jsx)(e.p,{children:"To contribute to OmniDragon:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Fork the repository"}),"\n",(0,i.jsx)(e.li,{children:"Create a feature branch"}),"\n",(0,i.jsx)(e.li,{children:"Implement your changes with tests"}),"\n",(0,i.jsx)(e.li,{children:"Submit a pull request"}),"\n",(0,i.jsx)(e.li,{children:"Engage with review feedback"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["We follow ",(0,i.jsx)(e.a,{href:"https://www.conventionalcommits.org/",children:"Conventional Commits"})," for commit messages."]}),"\n",(0,i.jsx)(e.h2,{id:"resource-links",children:"Resource Links"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"../reference/api.md",children:"API Reference"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"../technical-architecture/overview.md",children:"Technical Architecture"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/contracts/overview",children:"Contracts Overview"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/omnidragon/omnidragon",children:"GitHub Repository"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);