"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[8205],{5257:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"integrations/drand/overview","title":"dRand Integration","description":"OmniDragon integrates with the dRand Network to provide cryptographically verifiable randomness for its jackpot system and other randomized mechanics. This integration ensures that all random processes in the OmniDragon ecosystem are provably fair and tamper-resistant.","source":"@site/docs/integrations/drand/overview.md","sourceDirName":"integrations/drand","slug":"/integrations/drand/overview","permalink":"/integrations/drand/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/integrations/drand/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"dRand Integration"},"sidebar":"integrations","previous":{"title":"Vrf","permalink":"/integrations/chainlink/vrf"},"next":{"title":"Setup","permalink":"/integrations/drand/setup"}}');var i=r(4848),a=r(8453);const t={sidebar_position:1,title:"dRand Integration"},o="dRand Network Integration",d={},l=[{value:"What is dRand?",id:"what-is-drand",level:2},{value:"OmniDragon&#39;s dRand Implementation",id:"omnidragons-drand-implementation",level:2},{value:"Core Features",id:"core-features",level:2},{value:"1. Verifiable Randomness for Jackpot System",id:"1-verifiable-randomness-for-jackpot-system",level:3},{value:"2. Randomized Game Mechanics",id:"2-randomized-game-mechanics",level:3},{value:"3. On-Chain Verification",id:"3-on-chain-verification",level:3},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"DragonVRFIntegrator",id:"dragonvrfintegrator",level:3},{value:"OmniDragonVRFConsumer",id:"omnidragonvrfconsumer",level:3},{value:"dRand Beacon Verification",id:"drand-beacon-verification",level:2},{value:"Backup Randomness Sources",id:"backup-randomness-sources",level:2},{value:"Integration Example",id:"integration-example",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"drand-network-integration",children:"dRand Network Integration"})}),"\n",(0,i.jsxs)(e.p,{children:["OmniDragon integrates with the ",(0,i.jsx)(e.a,{href:"https://drand.love/",children:"dRand Network"})," to provide cryptographically verifiable randomness for its jackpot system and other randomized mechanics. This integration ensures that all random processes in the OmniDragon ecosystem are provably fair and tamper-resistant."]}),"\n",(0,i.jsx)(e.h2,{id:"what-is-drand",children:"What is dRand?"}),"\n",(0,i.jsx)(e.p,{children:"dRand is a distributed randomness beacon protocol that generates verifiable, unpredictable, and unbiasable random values. Key features include:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Decentralized"}),": Operated by a distributed set of nodes across different organizations"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Verifiable"}),": Anyone can verify the correctness of generated random values"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unpredictable"}),": Random values cannot be predicted in advance"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unbiasable"}),": No single party can bias the randomness generation process"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Efficient"}),": Uses threshold cryptography for efficient randomness generation"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"omnidragons-drand-implementation",children:"OmniDragon's dRand Implementation"}),"\n",(0,i.jsx)(e.mermaid,{value:'flowchart TB\n    classDef primary fill:#4a80d1,stroke:#355899,color:#ffffff,font-weight:bold\n    classDef secondary fill:#43a047,stroke:#2e7d32,color:#ffffff\n    classDef tertiary fill:#ff9800,stroke:#f57c00,color:#ffffff\n    classDef quaternary fill:#9c27b0,stroke:#7b1fa2,color:#ffffff\n    \n    dRand["dRand Network"]:::primary\n    \n    subgraph OmniDragon ["OmniDragon Protocol"]\n        direction TB\n        VRFConsumer["VRF Consumer<br>Contract"]:::secondary\n        Integrator["dRand Integrator"]:::secondary\n        Verifier["Beacon Verifier"]:::secondary\n        \n        subgraph Applications ["Applications"]\n            direction TB\n            Jackpot["Jackpot<br>System"]:::tertiary\n            Games["Game<br>Mechanics"]:::tertiary\n            Raffle["Raffles &<br>Giveaways"]:::tertiary\n        end\n    end\n    \n    dRand --\x3e|"Emits Random<br>Beacons"| Integrator\n    Integrator --\x3e|"Fetch<br>Beacons"| VRFConsumer\n    VRFConsumer --\x3e|"Verify<br>Randomness"| Verifier\n    VRFConsumer --\x3e|"Provide<br>Verified<br>Randomness"| Applications\n    \n    Jackpot --\x3e|"Request<br>Randomness"| VRFConsumer\n    Games --\x3e|"Request<br>Randomness"| VRFConsumer\n    Raffle --\x3e|"Request<br>Randomness"| VRFConsumer'}),"\n",(0,i.jsx)(e.h2,{id:"core-features",children:"Core Features"}),"\n",(0,i.jsx)(e.h3,{id:"1-verifiable-randomness-for-jackpot-system",children:"1. Verifiable Randomness for Jackpot System"}),"\n",(0,i.jsx)(e.p,{children:"The OmniDragon jackpot system relies on dRand for selecting winners:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Jackpot triggers request randomness from the VRF Consumer"}),"\n",(0,i.jsx)(e.li,{children:"VRF Consumer fetches the latest dRand beacon"}),"\n",(0,i.jsx)(e.li,{children:"The randomness is verified on-chain"}),"\n",(0,i.jsx)(e.li,{children:"A winner is selected based on the verified random value"}),"\n",(0,i.jsx)(e.li,{children:"The jackpot is distributed to the winner"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"2-randomized-game-mechanics",children:"2. Randomized Game Mechanics"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon's gaming features use dRand randomness for:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Random item generation"}),"\n",(0,i.jsx)(e.li,{children:"Probability-based outcomes"}),"\n",(0,i.jsx)(e.li,{children:"Fair competition results"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"3-on-chain-verification",children:"3. On-Chain Verification"}),"\n",(0,i.jsx)(e.p,{children:"All dRand randomness used in OmniDragon is verified on-chain:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Signature verification using BLS12-381 cryptography"}),"\n",(0,i.jsx)(e.li,{children:"Verification against the known dRand public key"}),"\n",(0,i.jsx)(e.li,{children:"Round number validation to ensure freshness"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon's dRand integration consists of several components:"}),"\n",(0,i.jsx)(e.h3,{id:"dragonvrfintegrator",children:"DragonVRFIntegrator"}),"\n",(0,i.jsx)(e.p,{children:"This contract integrates with the dRand network:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// DragonVRFIntegrator.sol (simplified)\ncontract DragonVRFIntegrator is IDragonVRFIntegrator {\n    // dRand public key for verification\n    bytes public drandPublicKey;\n    \n    // Latest round and randomness\n    uint256 public latestRound;\n    uint256 public latestRandomness;\n    \n    // Request randomness from dRand\n    function requestRandomness(uint256 requestId) external override;\n    \n    // Verify and process a dRand beacon\n    function verifyAndProcessBeacon(\n        uint256 round,\n        bytes calldata signature,\n        bytes calldata previousSignature\n    ) external returns (uint256);\n    \n    // Get the latest randomness\n    function getLatestRandomness() external view override returns (uint256);\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"omnidragonvrfconsumer",children:"OmniDragonVRFConsumer"}),"\n",(0,i.jsx)(e.p,{children:"This contract consumes randomness and distributes it to applications:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:"// OmniDragonVRFConsumer.sol (simplified)\ncontract OmniDragonVRFConsumer {\n    // VRF integrator contract\n    IDragonVRFIntegrator public integrator;\n    \n    // Mapping of request IDs to consumers\n    mapping(uint256 => address) public requests;\n    \n    // Request randomness\n    function requestRandomness(address consumer) \n        external returns (uint256 requestId);\n    \n    // Fulfill randomness\n    function fulfillRandomness(uint256 requestId, uint256 randomness) external;\n    \n    // Get the latest random value\n    function getLatestRandomValue() external view returns (uint256);\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"drand-beacon-verification",children:"dRand Beacon Verification"}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon verifies dRand beacons using the following process:"}),"\n",(0,i.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant App as Application\n    participant VRF as OmniDragonVRFConsumer\n    participant Integrator as DragonVRFIntegrator\n    participant dRand as dRand Network\n    \n    App->>VRF: requestRandomness()\n    VRF->>VRF: Generate requestId\n    VRF->>Integrator: requestRandomness(requestId)\n    \n    Integrator->>dRand: Fetch latest beacon\n    dRand--\x3e>Integrator: Return beacon (round, signature)\n    \n    Integrator->>Integrator: Verify signature with BLS\n    Integrator->>Integrator: Derive randomness from signature\n    \n    Integrator->>VRF: fulfillRandomness(requestId, randomness)\n    VRF->>App: Deliver randomness"}),"\n",(0,i.jsx)(e.h2,{id:"backup-randomness-sources",children:"Backup Randomness Sources"}),"\n",(0,i.jsx)(e.p,{children:"To ensure high availability, OmniDragon implements backup randomness sources:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Primary"}),": dRand Network"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Secondary"}),": Chainlink VRF"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fallback"}),": Block hash-based randomness (only in emergency)"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"The system automatically switches to secondary sources if the primary source fails to deliver randomness within a specified timeframe."}),"\n",(0,i.jsx)(e.h2,{id:"integration-example",children:"Integration Example"}),"\n",(0,i.jsx)(e.p,{children:"Here's an example of how to request randomness from the OmniDragon VRF system:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@omnidragon/contracts/interfaces/IOmniDragonVRFConsumer.sol";\nimport "@omnidragon/contracts/interfaces/IDragonVRFConsumer.sol";\n\ncontract RandomnessExample is IDragonVRFConsumer {\n    IOmniDragonVRFConsumer public vrfConsumer;\n    uint256 public randomResult;\n    bool public randomnessReceived;\n    \n    constructor(address _vrfConsumerAddress) {\n        vrfConsumer = IOmniDragonVRFConsumer(_vrfConsumerAddress);\n    }\n    \n    // Request randomness\n    function requestRandomNumber() external {\n        vrfConsumer.requestRandomness(address(this));\n        randomnessReceived = false;\n    }\n    \n    // Receive randomness from VRF consumer\n    function consumeRandomness(uint256 requestId, uint256 randomness) \n        external override {\n        require(msg.sender == address(vrfConsumer), "Unauthorized");\n        \n        randomResult = randomness;\n        randomnessReceived = true;\n        \n        // Use the randomness (e.g., select winner, determine outcome)\n    }\n    \n    // Example: Select a winner using randomness\n    function selectWinner(address[] memory participants) \n        external view returns (address) {\n        require(randomnessReceived, "No randomness available");\n        \n        uint256 winnerIndex = randomResult % participants.length;\n        return participants[winnerIndex];\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(e.p,{children:"When using OmniDragon's dRand integration:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Verification"}),": Always verify that randomness comes from the authorized VRF consumer"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Freshness"}),": Check that the randomness is from a recent dRand round"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Public Inputs"}),": Never rely on user-provided inputs for randomness generation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Multiple Sources"}),": For critical applications, consider using multiple sources of randomness"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://drand.love/docs/",children:"dRand Network Documentation"})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://leagueofentropy.com/",children:"League of Entropy"})," (dRand operators)"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/integrations/drand/setup",children:"OmniDragon dRand Setup Guide"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/integrations/drand/usage",children:"OmniDragon dRand Usage Examples"})}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>o});var s=r(6540);const i={},a=s.createContext(i);function t(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);