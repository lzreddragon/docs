"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[8782],{3944:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"contracts/randomness/vrf-consumer","title":"VRF Consumer","description":"The OmniDragon VRF Consumer (OmniDragonVRFConsumer.sol) is responsible for aggregating verifiable randomness from multiple sources for use in the OmniDragon ecosystem.","source":"@site/docs/contracts/randomness/vrf-consumer.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/vrf-consumer","permalink":"/contracts/randomness/vrf-consumer","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/vrf-consumer.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"VRF Consumer","sidebar_position":1},"sidebar":"contracts","previous":{"title":"Arbitrum VRF Requester","permalink":"/contracts/randomness/arbitrum-vrf"},"next":{"title":"VRF Utility Library","permalink":"/contracts/randomness/vrf-utils"}}');var t=r(4848),o=r(8453);const i={title:"VRF Consumer",sidebar_position:1},a="OmniDragon VRF Consumer",d={},l=[{value:"Contract Overview",id:"contract-overview",level:2},{value:"Actual Implementation",id:"actual-implementation",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Randomness Aggregation Process",id:"randomness-aggregation-process",level:2},{value:"Integrator Interface",id:"integrator-interface",level:2},{value:"Consumer Usage",id:"consumer-usage",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Example Integration",id:"example-integration",level:2},{value:"Interface",id:"interface",level:2},{value:"Consumer Interface",id:"consumer-interface",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"omnidragon-vrf-consumer",children:"OmniDragon VRF Consumer"})}),"\n",(0,t.jsxs)(e.p,{children:["The OmniDragon VRF Consumer (",(0,t.jsx)(e.code,{children:"OmniDragonVRFConsumer.sol"}),") is responsible for aggregating verifiable randomness from multiple sources for use in the OmniDragon ecosystem."]}),"\n",(0,t.jsx)(e.h2,{id:"contract-overview",children:"Contract Overview"}),"\n",(0,t.jsx)(e.p,{children:"The VRF Consumer serves as the randomness hub for the OmniDragon protocol, with features including:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Multi-source randomness"}),": Ability to aggregate randomness from multiple source networks"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Weighted aggregation"}),": Combines randomness using configurable weights"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Consumer authorization"}),": Controls which contracts can request randomness"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Failover support"}),": Continues operating if some randomness sources fail"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"actual-implementation",children:"Actual Implementation"}),"\n",(0,t.jsx)(e.p,{children:"The OmniDragonVRFConsumer contract is implemented with the following structure:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// OmniDragonVRFConsumer.sol\ncontract OmniDragonVRFConsumer is Ownable, ReentrancyGuard, IOmniDragonVRFConsumer {\n    // Network tracking\n    struct NetworkInfo {\n        address integrator;\n        bool active;\n        uint256 weight;\n        uint256 lastUpdate;\n        uint256 lastValue;\n        uint256 lastRound;\n    }\n    \n    // Network storage\n    mapping(bytes32 => NetworkInfo) public networks;\n    bytes32[] public networkIds;\n    \n    // Randomness state\n    uint256 public aggregatedRandomness;\n    uint256 public lastAggregationTimestamp;\n    uint256 public aggregationCounter;\n    \n    // Consumer tracking\n    mapping(address => bool) public authorizedConsumers;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,t.jsx)(e.p,{children:"The VRF Consumer implements several core functions for randomness aggregation and distribution:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// Add a new randomness network\nfunction addNetwork(bytes32 _networkId, address _integrator, uint256 _weight) external onlyOwner;\n\n// Update an existing network\nfunction updateNetwork(\n    bytes32 _networkId, \n    address _integrator, \n    uint256 _weight, \n    bool _active\n) external onlyOwner;\n\n// Authorize a consumer to request randomness\nfunction setAuthorizedConsumer(address _consumer, bool _authorized) external onlyOwner;\n\n// Aggregate randomness from all active networks\nfunction aggregateRandomness() public;\n\n// Fulfill a randomness request for a consumer\nfunction fulfillRandomness(address _consumer, uint256 _requestId) external override nonReentrant;\n\n// Request randomness (helper function for consumers)\nfunction requestRandomness(address _consumer, uint256 _requestId) external override;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"randomness-aggregation-process",children:"Randomness Aggregation Process"}),"\n",(0,t.jsx)(e.p,{children:"The VRF Consumer aggregates randomness using the following approach:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Starts with an initial seed value (previous aggregated randomness)"}),"\n",(0,t.jsx)(e.li,{children:"Collects randomness from all active network integrators"}),"\n",(0,t.jsx)(e.li,{children:"Combines values with weights using keccak256 hashing"}),"\n",(0,t.jsx)(e.li,{children:"Further mixes with block data and an incrementing counter"}),"\n",(0,t.jsx)(e.li,{children:"Produces a final random value that is unpredictable and well-distributed"}),"\n"]}),"\n",(0,t.jsx)(e.mermaid,{value:'flowchart TB\n    classDef primary fill:#4a80d1,stroke:#355899,color:#ffffff,font-weight:bold\n    classDef secondary fill:#43a047,stroke:#2e7d32,color:#ffffff\n    \n    VRFConsumer["OmniDragon VRF Consumer"]:::primary\n    \n    Network1["Network 1<br>Integrator"]:::secondary\n    Network2["Network 2<br>Integrator"]:::secondary\n    NetworkN["Network N<br>Integrator"]:::secondary\n    \n    Applications["Consumer<br>Applications"]:::secondary\n    \n    Network1 --\x3e|"Randomness"| VRFConsumer\n    Network2 --\x3e|"Randomness"| VRFConsumer\n    NetworkN --\x3e|"Randomness"| VRFConsumer\n    \n    VRFConsumer --\x3e|"Aggregated<br>Randomness"| Applications\n    Applications --\x3e|"Request<br>Randomness"| VRFConsumer'}),"\n",(0,t.jsx)(e.h2,{id:"integrator-interface",children:"Integrator Interface"}),"\n",(0,t.jsxs)(e.p,{children:["Each network integrator implements the ",(0,t.jsx)(e.code,{children:"IDragonVRFIntegrator"})," interface:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"interface IDragonVRFIntegrator {\n    // Get the latest randomness\n    function getLatestRandomness() external view returns (uint256 randomness, uint256 round);\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"consumer-usage",children:"Consumer Usage"}),"\n",(0,t.jsx)(e.p,{children:"Contracts that wish to consume randomness should implement:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"interface IDragonVRFConsumer {\n    // Fulfill randomness callback\n    function fulfillRandomness(\n        uint256 requestId, \n        uint256 randomness,\n        uint256 round\n    ) external;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(e.p,{children:"The VRF Consumer includes several security features:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Authorization Controls"}),": Only authorized contracts can request randomness"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Reentrancy Protection"}),": Prevents reentrancy attacks during randomness fulfillment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Owner-Only Administration"}),": Only the owner can add or modify randomness networks"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Fault Tolerance"}),": Continues operating even if some randomness sources fail"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"example-integration",children:"Example Integration"}),"\n",(0,t.jsx)(e.p,{children:"Here's how to integrate with the OmniDragon VRF Consumer:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:'// Example consumer contract\ncontract RandomnessConsumer is IDragonVRFConsumer {\n    IOmniDragonVRFConsumer public vrfConsumer;\n    uint256 public latestRandomValue;\n    uint256 private requestCounter;\n    \n    constructor(address _vrfConsumerAddress) {\n        vrfConsumer = IOmniDragonVRFConsumer(_vrfConsumerAddress);\n    }\n    \n    // Request randomness\n    function getRandomNumber() external returns (uint256 requestId) {\n        requestId = ++requestCounter;\n        vrfConsumer.requestRandomness(address(this), requestId);\n        return requestId;\n    }\n    \n    // Receive randomness\n    function fulfillRandomness(\n        uint256 requestId, \n        uint256 randomness,\n        uint256 roundNumber\n    ) external override {\n        // Verify caller\n        require(msg.sender == address(vrfConsumer), "Unauthorized");\n        \n        // Store randomness\n        latestRandomValue = randomness;\n        \n        // Use the randomness for your application\n        // ...\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"interface",children:"Interface"}),"\n",(0,t.jsx)(e.p,{children:"The OmniDragon VRF Consumer exposes its functionality through the following interface:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"interface IOmniDragonVRFConsumer {\n    // Request randomness\n    function requestRandomness() external returns (uint256 requestId);\n    function requestRandomness(address _consumer) external returns (uint256 requestId);\n    \n    // Randomness fulfillment\n    function fulfillRandomness(uint256 _requestId, uint256 _randomness) external;\n    \n    // Information retrieval\n    function getLatestRandomValue() external view returns (uint256);\n    function isRequestPending(uint256 _requestId) external view returns (bool);\n    function getRandomValueForRequest(uint256 _requestId) external view returns (uint256);\n    function getRequestStatus(uint256 _requestId) external view returns (uint8);\n    \n    // Configuration\n    function setFallbackSource(address _source, bool _enabled) external;\n    function setConsumerPermission(address _consumer, bool _allowed) external;\n    function setTimeout(uint256 _timeout) external;\n    \n    // Events\n    event RandomnessRequested(address indexed consumer, uint256 indexed requestId);\n    event RandomnessFulfilled(uint256 indexed requestId, uint256 randomness);\n    event FallbackActivated(uint256 indexed requestId, address fallbackSource);\n    event ConsumerPermissionUpdated(address indexed consumer, bool allowed);\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"consumer-interface",children:"Consumer Interface"}),"\n",(0,t.jsx)(e.p,{children:"Contracts that wish to consume randomness need to implement the following interface:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"interface IDragonVRFConsumer {\n    function consumeRandomness(uint256 requestId, uint256 randomness) external;\n}\n"})})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);