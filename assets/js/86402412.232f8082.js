"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[3786],{7166:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"contracts/randomness/index","title":"Randomness System","description":"OmniDragon implements a sophisticated multi-provider randomness system that combines multiple sources of verifiable random functions (VRF) across different blockchains to ensure maximum reliability, security, and manipulation resistance.","source":"@site/docs/contracts/randomness/index.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/","permalink":"/contracts/randomness/","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"contracts","previous":{"title":"Interfaces","permalink":"/contracts/utils/interfaces"},"next":{"title":"drand Integration","permalink":"/contracts/randomness/drand"}}');var i=s(4848),t=s(8453);const a={sidebar_position:1},o="Randomness System",l={},c=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"OmniDragonVRFConsumer",id:"omnidragonvrfconsumer",level:3},{value:"ChainlinkVRFIntegrator",id:"chainlinkvrfintegrator",level:3},{value:"ArbitrumVRFRequester",id:"arbitrumvrfrequester",level:3},{value:"VRF Utilities",id:"vrf-utilities",level:3},{value:"Cross-Chain Flow",id:"cross-chain-flow",level:2},{value:"Security Features",id:"security-features",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Jackpot System",id:"jackpot-system",level:3},{value:"Governance",id:"governance",level:3},{value:"Using the Randomness System",id:"using-the-randomness-system",level:2},{value:"Gas Considerations",id:"gas-considerations",level:2},{value:"Deployment and Maintenance",id:"deployment-and-maintenance",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"randomness-system",children:"Randomness System"})}),"\n",(0,i.jsx)(e.p,{children:"OmniDragon implements a sophisticated multi-provider randomness system that combines multiple sources of verifiable random functions (VRF) across different blockchains to ensure maximum reliability, security, and manipulation resistance."}),"\n",(0,i.jsx)(e.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(e.p,{children:"The randomness system uses a distributed approach with components across multiple chains, leveraging LayerZero for secure cross-chain communication."}),"\n",(0,i.jsx)(e.mermaid,{value:'flowchart TD\n    subgraph "Sonic Chain"\n        A[OmniDragonVRFConsumer] --\x3e B[ChainlinkVRFIntegrator]\n        A --\x3e C[drand Integrator]\n        A --\x3e D[Other Integrators]\n        \n        E[Jackpot Vault] --\x3e A\n        F[SwapTriggerOracle] --\x3e A\n        G[OmniDragon Token] --\x3e F\n    end\n    \n    subgraph "LayerZero Network"\n        H[Cross-Chain Messaging]\n    end\n    \n    subgraph "Arbitrum Chain"\n        I[ArbitrumVRFRequester] --\x3e J[Chainlink VRF Coordinator]\n    end\n    \n    B <--\x3e H\n    H <--\x3e I'}),"\n",(0,i.jsx)(e.h2,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsx)(e.h3,{id:"omnidragonvrfconsumer",children:"OmniDragonVRFConsumer"}),"\n",(0,i.jsx)(e.p,{children:"The central hub of the randomness system, aggregating and combining multiple sources of randomness:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Acts as a multi-source randomness aggregator"}),"\n",(0,i.jsx)(e.li,{children:"Combines randomness with different weighting factors"}),"\n",(0,i.jsx)(e.li,{children:"Provides a unified interface for randomness consumers"}),"\n",(0,i.jsx)(e.li,{children:"Implements fallback mechanisms for reliability"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"/docs/contracts/randomness/vrf-consumer",children:"Learn more about the VRF Consumer"})}),"\n",(0,i.jsx)(e.h3,{id:"chainlinkvrfintegrator",children:"ChainlinkVRFIntegrator"}),"\n",(0,i.jsx)(e.p,{children:"Connects the OmniDragon ecosystem to Chainlink's VRF service on Arbitrum via LayerZero:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Receives requests from OmniDragonVRFConsumer"}),"\n",(0,i.jsx)(e.li,{children:"Forwards requests to Arbitrum via LayerZero"}),"\n",(0,i.jsx)(e.li,{children:"Receives responses and delivers them back to consumers"}),"\n",(0,i.jsx)(e.li,{children:"Maintains a local fallback randomness source"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"/docs/contracts/randomness/chainlink",children:"Learn more about the Chainlink Integrator"})}),"\n",(0,i.jsx)(e.h3,{id:"arbitrumvrfrequester",children:"ArbitrumVRFRequester"}),"\n",(0,i.jsx)(e.p,{children:"Deployed on Arbitrum to interact with Chainlink's VRF service:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Receives cross-chain requests from Sonic"}),"\n",(0,i.jsx)(e.li,{children:"Submits requests to Chainlink VRF"}),"\n",(0,i.jsx)(e.li,{children:"Forwards randomness results back to Sonic"}),"\n",(0,i.jsx)(e.li,{children:"Manages Chainlink subscription and configuration"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"/docs/contracts/randomness/arbitrum-vrf",children:"Learn more about the Arbitrum VRF Requester"})}),"\n",(0,i.jsx)(e.h3,{id:"vrf-utilities",children:"VRF Utilities"}),"\n",(0,i.jsx)(e.p,{children:"A library of helper functions for working with random numbers:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Generating numbers within ranges"}),"\n",(0,i.jsx)(e.li,{children:"Creating multiple random numbers from a seed"}),"\n",(0,i.jsx)(e.li,{children:"Selecting random indices"}),"\n",(0,i.jsx)(e.li,{children:"Shuffling arrays"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"/docs/contracts/randomness/vrf-utils",children:"Learn more about the VRF Utilities"})}),"\n",(0,i.jsx)(e.h2,{id:"cross-chain-flow",children:"Cross-Chain Flow"}),"\n",(0,i.jsx)(e.p,{children:"The complete cross-chain randomness flow operates as follows:"}),"\n",(0,i.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant Consumer as OmniDragon Consumer\n    participant VRFConsumer as OmniDragonVRFConsumer\n    participant ChainlinkInt as ChainlinkVRFIntegrator\n    participant LZ1 as LayerZero (Sonic)\n    participant LZ2 as LayerZero (Arbitrum)\n    participant Requester as ArbitrumVRFRequester\n    participant Chainlink as Chainlink VRF\n    \n    Consumer->>VRFConsumer: requestRandomness()\n    \n    VRFConsumer->>ChainlinkInt: fulfillRandomness(requestId)\n    \n    ChainlinkInt->>ChainlinkInt: Record pending request\n    ChainlinkInt->>LZ1: send(arbitrumChainId, address, payload)\n    \n    LZ1->>LZ2: Cross-chain message\n    LZ2->>Requester: lzReceive(srcChainId, srcAddress, payload)\n    \n    Requester->>Requester: Store request mapping\n    Requester->>Chainlink: requestRandomWords()\n    \n    Note over Chainlink: Generate verifiable randomness\n    \n    Chainlink->>Requester: fulfillRandomWords(requestId, randomWords)\n    \n    Requester->>LZ2: send(sonicChainId, address, payload)\n    \n    LZ2->>LZ1: Cross-chain message\n    LZ1->>ChainlinkInt: lzReceive(srcChainId, srcAddress, payload)\n    \n    ChainlinkInt->>ChainlinkInt: Update latest randomness\n    ChainlinkInt->>VRFConsumer: Send randomness via fulfillRandomness\n    \n    VRFConsumer->>VRFConsumer: Aggregate with other sources\n    VRFConsumer->>Consumer: fulfillRandomness(requestId, randomness)"}),"\n",(0,i.jsx)(e.h2,{id:"security-features",children:"Security Features"}),"\n",(0,i.jsx)(e.p,{children:"The randomness system implements multiple security measures:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Multi-Source Verification"}),": Uses multiple independent randomness sources for added security"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Cross-Chain Redundancy"}),": Leverages the security properties of different blockchains"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Weighted Aggregation"}),": Combines randomness with weights to prevent manipulation by any single source"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fallback Mechanisms"}),": Continues operating even if some randomness sources fail"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Request Authentication"}),": Only authorized consumers can request randomness"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Source Validation"}),": Verifies that cross-chain messages come from trusted contracts"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Request Deduplication"}),": Prevents duplicate processing of randomness requests"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,i.jsx)(e.h3,{id:"jackpot-system",children:"Jackpot System"}),"\n",(0,i.jsx)(e.p,{children:"The OmniDragon jackpot system uses the randomness infrastructure to select winners:"}),"\n",(0,i.jsx)(e.mermaid,{value:"flowchart LR\n    A[User Swap] --\x3e B[SwapTriggerOracle]\n    B --\x3e C[OmniDragonVRFConsumer]\n    C --\x3e D[Randomness Aggregation]\n    D --\x3e E[Winner Selection]\n    E --\x3e F[Jackpot Distribution]"}),"\n",(0,i.jsx)(e.h3,{id:"governance",children:"Governance"}),"\n",(0,i.jsx)(e.p,{children:"Random sampling for certain governance decisions:"}),"\n",(0,i.jsx)(e.mermaid,{value:"flowchart LR\n    A[Governance Proposal] --\x3e B[Random Committee Selection]\n    B --\x3e C[OmniDragonVRFConsumer]\n    C --\x3e D[Committee Members]\n    D --\x3e E[Proposal Decision]"}),"\n",(0,i.jsx)(e.h2,{id:"using-the-randomness-system",children:"Using the Randomness System"}),"\n",(0,i.jsx)(e.p,{children:"To integrate with the OmniDragon randomness system, contracts should:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Implement the appropriate consumer interface"}),"\n",(0,i.jsx)(e.li,{children:"Request authorization from the contract owner"}),"\n",(0,i.jsx)(e.li,{children:"Submit randomness requests with unique IDs"}),"\n",(0,i.jsx)(e.li,{children:"Implement callback functions to receive randomness"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Example basic consumer:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-solidity",children:'// Basic randomness consumer example\ncontract RandomnessConsumer {\n    OmniDragonVRFConsumer public vrfConsumer;\n    mapping(uint256 => bool) public pendingRequests;\n    uint256 public latestRandomValue;\n    \n    constructor(address _vrfConsumer) {\n        vrfConsumer = OmniDragonVRFConsumer(_vrfConsumer);\n    }\n    \n    function requestRandomness() external returns (uint256) {\n        // Generate unique request ID\n        uint256 requestId = uint256(keccak256(abi.encode(\n            block.timestamp, \n            msg.sender, \n            address(this)\n        )));\n        \n        // Record the request\n        pendingRequests[requestId] = true;\n        \n        // Request randomness\n        vrfConsumer.requestRandomness(address(this), requestId);\n        \n        return requestId;\n    }\n    \n    function fulfillRandomness(\n        uint256 _requestId, \n        uint256 _randomValue,\n        uint256 _round\n    ) external {\n        // Verify sender\n        require(msg.sender == address(vrfConsumer), "Invalid sender");\n        \n        // Verify request\n        require(pendingRequests[_requestId], "Unknown request");\n        \n        // Store randomness\n        latestRandomValue = _randomValue;\n        \n        // Clean up\n        delete pendingRequests[_requestId];\n        \n        // Use the randomness\n        // ...\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"gas-considerations",children:"Gas Considerations"}),"\n",(0,i.jsx)(e.p,{children:"When using the cross-chain randomness system, be aware of the gas costs involved:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Initial Request"}),": Gas cost on Sonic for initiating the request"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Cross-Chain Fee"}),": LayerZero fee for sending the message to Arbitrum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Chainlink Fee"}),": LINK token cost for using Chainlink VRF on Arbitrum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Return Message Fee"}),": LayerZero fee for sending the result back to Sonic"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fulfillment Cost"}),": Gas cost on Sonic for processing the randomness"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The ChainlinkVRFIntegrator includes an ",(0,i.jsx)(e.code,{children:"estimateFees()"})," function to help calculate the cross-chain costs."]}),"\n",(0,i.jsx)(e.h2,{id:"deployment-and-maintenance",children:"Deployment and Maintenance"}),"\n",(0,i.jsx)(e.p,{children:"Key considerations for operating the randomness system:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Chainlink Subscription"}),": Maintain a funded Chainlink VRF subscription on Arbitrum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LayerZero Gas"}),": Ensure sufficient ETH for LayerZero fees on both chains"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Oracle Monitoring"}),": Regularly monitor the health of all randomness sources"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Configuration Updates"}),": Periodically review and update randomness weights and parameters"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>o});var r=s(6540);const i={},t=r.createContext(i);function a(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);