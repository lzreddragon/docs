"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[9531],{3299:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"contracts/randomness/arbitrum-vrf","title":"Arbitrum VRF Requester","description":"The ArbitrumVRFRequester contract serves as the OmniDragon ecosystem\'s bridge to Chainlink\'s VRF v2.5 service on Arbitrum, receiving randomness requests from Sonic and returning the results via LayerZero messaging.","source":"@site/docs/contracts/randomness/arbitrum-vrf.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/arbitrum-vrf","permalink":"/contracts/randomness/arbitrum-vrf","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/arbitrum-vrf.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"contracts","previous":{"title":"Chainlink VRF Integrator","permalink":"/contracts/randomness/chainlink"},"next":{"title":"VRF Consumer","permalink":"/contracts/randomness/vrf-consumer"}}');var r=i(4848),t=i(8453);const a={sidebar_position:3},o="Arbitrum VRF Requester",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Contract Details",id:"contract-details",level:2},{value:"Key Storage Variables",id:"key-storage-variables",level:3},{value:"Main Functions",id:"main-functions",level:2},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Cross-Chain Randomness Operations",id:"cross-chain-randomness-operations",level:3},{value:"Fee Estimation",id:"fee-estimation",level:3},{value:"Cross-Chain Request Flow",id:"cross-chain-request-flow",level:2},{value:"Chainlink VRF Configuration",id:"chainlink-vrf-configuration",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"LayerZero Integration",id:"layerzero-integration",level:2},{value:"Subscription Management",id:"subscription-management",level:2},{value:"Deployment Considerations",id:"deployment-considerations",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"arbitrum-vrf-requester",children:"Arbitrum VRF Requester"})}),"\n",(0,r.jsx)(e.p,{children:"The ArbitrumVRFRequester contract serves as the OmniDragon ecosystem's bridge to Chainlink's VRF v2.5 service on Arbitrum, receiving randomness requests from Sonic and returning the results via LayerZero messaging."}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(e.p,{children:"This contract is deployed on the Arbitrum network and acts as an intermediary between OmniDragon's randomness system on Sonic and Chainlink's VRF service on Arbitrum, enabling secure cross-chain randomness verification."}),"\n",(0,r.jsx)(e.mermaid,{value:'flowchart LR\n    A[Sonic Chain] --\x3e|LayerZero| B[ArbitrumVRFRequester]\n    B --\x3e|Chainlink VRF| C[VRF Coordinator]\n    C --\x3e|Random Number| B\n    B --\x3e|LayerZero| A\n    \n    subgraph "Arbitrum"\n        B\n        C\n        D[Chainlink Subscription]\n        E[Key Hash]\n        C --- D\n        C --- E\n    end'}),"\n",(0,r.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Chainlink VRF v2.5 Integration"}),": Direct connection to Chainlink's latest VRF service"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Subscription Management"}),": Uses Chainlink's subscription model for VRF requests"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"LayerZero Cross-Chain Messaging"}),": Secure communication with Sonic chain"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Request Tracking"}),": Maintains records of all cross-chain randomness requests"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Configurable Parameters"}),": Adjustable gas limits and confirmation settings"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"contract-details",children:"Contract Details"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Source:"})," ",(0,r.jsx)(e.a,{href:"https://github.com/wenakita/omnidragon/blob/main/contracts/chainlink/ArbitrumVRFRequester.sol",children:(0,r.jsx)(e.code,{children:"ArbitrumVRFRequester.sol"})})]}),"\n",(0,r.jsx)(e.h3,{id:"key-storage-variables",children:"Key Storage Variables"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-solidity",children:"// Chainlink VRF settings\nVRFCoordinatorV2Interface public immutable coordinator;\nuint64 public immutable subscriptionId;\nbytes32 public immutable keyHash;\nuint32 public callbackGasLimit;\nuint16 public requestConfirmations;\nuint32 public numWords;\n\n// LayerZero settings\naddress public lzEndpoint;\nuint16 public sonicChainId;\nbytes public sonicDragonVRFAddress;\n\n// Request tracking\nstruct RequestData {\n    uint16 srcChainId;\n    bytes srcAddress;\n    uint256 requestId;\n    bool fulfilled;\n}\n\n// Mapping from chainlink request ID to user request data\nmapping(uint256 => RequestData) public requests;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"main-functions",children:"Main Functions"}),"\n",(0,r.jsx)(e.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-solidity",children:"// Update VRF request settings\nfunction updateVRFSettings(\n    uint32 _callbackGasLimit,\n    uint16 _requestConfirmations,\n    uint32 _numWords\n) external onlyOwner\n\n// Update LayerZero settings\nfunction updateLzSettings(\n    address _lzEndpoint,\n    uint16 _sonicChainId,\n    bytes memory _sonicDragonVRFAddress\n) external onlyOwner\n"})}),"\n",(0,r.jsx)(e.h3,{id:"cross-chain-randomness-operations",children:"Cross-Chain Randomness Operations"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-solidity",children:"// Receive a message from LayerZero\nfunction lzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64 _nonce,\n    bytes memory _payload\n) external override onlyLzEndpoint\n\n// Chainlink VRF callback function\nfunction fulfillRandomWords(\n    uint256 _requestId,\n    uint256[] memory _randomWords\n) internal override\n"})}),"\n",(0,r.jsx)(e.h3,{id:"fee-estimation",children:"Fee Estimation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-solidity",children:"// Estimate fees for sending randomness back\nfunction estimateFees(\n    uint16 _dstChainId,\n    bytes memory _payload\n) external view returns (uint256)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"cross-chain-request-flow",children:"Cross-Chain Request Flow"}),"\n",(0,r.jsx)(e.p,{children:"The detailed randomness request process between Sonic and Arbitrum:"}),"\n",(0,r.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant Sonic as Sonic Chain (OmniDragon)\n    participant LZ1 as LayerZero Network\n    participant Arbitrum as ArbitrumVRFRequester\n    participant Chainlink as Chainlink VRF Coordinator\n    participant LZ2 as LayerZero Network\n    \n    Sonic->>LZ1: Send randomness request with requestId\n    LZ1->>Arbitrum: lzReceive(srcChainId, srcAddress, payload)\n    \n    Note over Arbitrum: Store request mapping\n    \n    Arbitrum->>Chainlink: requestRandomWords()\n    \n    Note over Chainlink: Generate verifiable randomness\n    \n    Chainlink->>Arbitrum: fulfillRandomWords(requestId, randomWords)\n    \n    Note over Arbitrum: Process VRF response\n    \n    Arbitrum->>LZ2: send(sonicChainId, sonicAddress, payload)\n    LZ2->>Sonic: Deliver randomness result"}),"\n",(0,r.jsx)(e.h2,{id:"chainlink-vrf-configuration",children:"Chainlink VRF Configuration"}),"\n",(0,r.jsx)(e.p,{children:"The ArbitrumVRFRequester is configured with specific Chainlink VRF parameters:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Parameter"}),(0,r.jsx)(e.th,{children:"Description"}),(0,r.jsx)(e.th,{children:"Typical Value"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"subscriptionId"}),(0,r.jsx)(e.td,{children:"Chainlink VRF subscription ID"}),(0,r.jsx)(e.td,{children:"Specific to deployment"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"keyHash"}),(0,r.jsx)(e.td,{children:"VRF key hash for the desired gas lane"}),(0,r.jsx)(e.td,{children:"0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"callbackGasLimit"}),(0,r.jsx)(e.td,{children:"Gas limit for VRF callback"}),(0,r.jsx)(e.td,{children:"500,000"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"requestConfirmations"}),(0,r.jsx)(e.td,{children:"Minimum confirmations before result"}),(0,r.jsx)(e.td,{children:"3"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"numWords"}),(0,r.jsx)(e.td,{children:"Number of random words to request"}),(0,r.jsx)(e.td,{children:"1"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(e.p,{children:"The contract includes several security measures:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Source Chain Validation"}),": Only accepts messages from the authorized Sonic chain address"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Request Tracking"}),": Prevents duplicate processing of the same randomness request"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Immutable Core Configuration"}),": Critical parameters like subscription ID and key hash are immutable"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Access Control"}),": Only owner can update configuration settings"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Gas Management"}),": Configurable gas limits for cost optimization"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"layerzero-integration",children:"LayerZero Integration"}),"\n",(0,r.jsx)(e.p,{children:"The contract uses LayerZero's cross-chain messaging protocol for secure communication:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Receiving Requests"}),": Implements the ",(0,r.jsx)(e.code,{children:"lzReceive"})," function to accept messages from Sonic"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sending Results"}),": Uses LayerZero's ",(0,r.jsx)(e.code,{children:"send"})," function to transmit randomness back to Sonic"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Path Verification"}),": Validates that messages come from the trusted Sonic contract"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fee Handling"}),": Includes methods to estimate and handle cross-chain message fees"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,r.jsx)(e.p,{children:"To maintain the Chainlink VRF subscription:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Subscription Creation"}),": Create a Chainlink VRF subscription on Arbitrum"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fund Subscription"}),": Ensure the subscription has sufficient LINK tokens"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add Consumer"}),": Add the ArbitrumVRFRequester contract as an authorized consumer"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Monitor Usage"}),": Regularly check subscription balance and top up as needed"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"deployment-considerations",children:"Deployment Considerations"}),"\n",(0,r.jsx)(e.p,{children:"When deploying this contract:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Chainlink Subscription"}),": A pre-existing Chainlink VRF subscription is required"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Gas Optimization"}),": Adjust the ",(0,r.jsx)(e.code,{children:"callbackGasLimit"})," based on expected gas costs"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"LayerZero Configuration"}),": Configure correct endpoint addresses and chain IDs"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ETH Balance"}),": Maintain sufficient ETH for LayerZero message fees"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"LINK Balance"}),": Ensure the Chainlink subscription has sufficient LINK tokens"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function a(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);