"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[9],{5764:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"contracts/jackpot/vault","title":"DragonJackpotVault","description":"The jackpot vault contract that manages and distributes lottery prizes","source":"@site/docs/contracts/jackpot/vault.md","sourceDirName":"contracts/jackpot","slug":"/contracts/jackpot/vault","permalink":"/contracts/jackpot/vault","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/jackpot/vault.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"DragonJackpotVault","description":"The jackpot vault contract that manages and distributes lottery prizes"},"sidebar":"contracts","previous":{"title":"Voting","permalink":"/contracts/governance/voting"},"next":{"title":"DragonJackpotDistributor","permalink":"/contracts/jackpot/distributor"}}');var i=t(4848),r=t(8453);const s={sidebar_position:1,title:"DragonJackpotVault",description:"The jackpot vault contract that manages and distributes lottery prizes"},o="DragonJackpotVault",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Contract Implementation",id:"contract-implementation",level:2},{value:"Key Storage Variables",id:"key-storage-variables",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"Adding to the Jackpot",id:"adding-to-the-jackpot",level:3},{value:"Distributing Jackpot Prizes",id:"distributing-jackpot-prizes",level:3},{value:"Configuration Functions",id:"configuration-functions",level:3},{value:"View Functions",id:"view-functions",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Integration Points",id:"integration-points",level:2},{value:"Events",id:"events",level:2},{value:"Jackpot Flow",id:"jackpot-flow",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dragonjackpotvault",children:"DragonJackpotVault"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DragonJackpotVault"})," contract is responsible for securely storing and distributing jackpot funds within the Sonic Red Dragon ecosystem. It serves as the treasury for all jackpot winnings and interfaces with the lottery distribution system."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    OmniDragon["OmniDragon Token"] --\x3e|"Sends 6.9% of fees"| JackpotVault["DragonJackpotVault"]\n    Distributor["DragonJackpotDistributor"] --\x3e|"Requests funds"| JackpotVault\n    JackpotVault --\x3e|"Transfers prize"| Winner["Lottery Winner"]\n    \n    classDef highlight fill:#4a80d1,stroke:#333,stroke-width:2px,color:white;\n    class JackpotVault highlight'}),"\n",(0,i.jsx)(n.p,{children:"The vault is a simple yet secure smart contract that:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accumulates funds"})," from transaction fees (primarily the 6.9% jackpot portion)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tracks balances"})," for different tokens that might be used for jackpot rewards"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Distributes winnings"})," to lottery winners when triggered by the distributor"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintains records"})," of jackpot history and win timestamps"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"contract-implementation",children:"Contract Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DragonJackpotVault"})," implements the ",(0,i.jsx)(n.code,{children:"IDragonJackpotVault"})," interface and inherits from OpenZeppelin's ",(0,i.jsx)(n.code,{children:"Ownable"})," contract:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"contract DragonJackpotVault is IDragonJackpotVault, Ownable {\n    using SafeERC20 for IERC20;\n    \n    // Track jackpot balances by token\n    mapping(address => uint256) public jackpotBalances;\n    \n    // Wrapped native token (WETH, WBNB, etc.)\n    address public wrappedNativeToken;\n    \n    // Last win timestamp\n    uint256 public lastWinTimestamp;\n    \n    // Events\n    event JackpotAdded(address indexed token, uint256 amount);\n    event JackpotPaid(address indexed token, address indexed winner, uint256 amount);\n    event WrappedNativeTokenSet(address indexed oldToken, address indexed newToken);\n    \n    // ... functions ...\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-storage-variables",children:"Key Storage Variables"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Variable"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"jackpotBalances"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"mapping(address => uint256)"})}),(0,i.jsx)(n.td,{children:"Tracks jackpot balance for each token"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"wrappedNativeToken"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"address"})}),(0,i.jsx)(n.td,{children:"The wrapped native token address (WETH, WBNB, etc.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"lastWinTimestamp"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"uint256"})}),(0,i.jsx)(n.td,{children:"Timestamp of the last jackpot win"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsx)(n.h3,{id:"adding-to-the-jackpot",children:"Adding to the Jackpot"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function addToJackpot(uint256 amount) external override {\n    address token = msg.sender;\n    jackpotBalances[token] += amount;\n    emit JackpotAdded(token, amount);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This function allows the OmniDragon token contract to add funds to the jackpot. The token address is identified as the calling contract."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function addERC20ToJackpot(address token, uint256 amount) external {\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n    jackpotBalances[token] += amount;\n    emit JackpotAdded(token, amount);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This function allows any user to add ERC20 tokens to the jackpot (requires approval)."}),"\n",(0,i.jsx)(n.h3,{id:"distributing-jackpot-prizes",children:"Distributing Jackpot Prizes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'function payJackpot(address winner, uint256 amount) external override onlyOwner {\n    require(wrappedNativeToken != address(0), "Wrapped token not set");\n    require(jackpotBalances[wrappedNativeToken] >= amount, "Insufficient balance");\n    \n    jackpotBalances[wrappedNativeToken] -= amount;\n    IERC20(wrappedNativeToken).safeTransfer(winner, amount);\n    lastWinTimestamp = block.timestamp;\n    \n    emit JackpotPaid(wrappedNativeToken, winner, amount);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This function is called by the distributor contract to pay a jackpot winner using the wrapped native token."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'function payJackpotWithToken(address token, address winner, uint256 amount) external onlyOwner {\n    require(jackpotBalances[token] >= amount, "Insufficient balance");\n    jackpotBalances[token] -= amount;\n    IERC20(token).safeTransfer(winner, amount);\n    lastWinTimestamp = block.timestamp;\n    emit JackpotPaid(token, winner, amount);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This function allows paying a jackpot with any supported token, not just the wrapped native token."}),"\n",(0,i.jsx)(n.h3,{id:"configuration-functions",children:"Configuration Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'function setWrappedNativeToken(address _wrappedNativeToken) external override onlyOwner {\n    require(_wrappedNativeToken != address(0), "Zero address");\n    address oldToken = wrappedNativeToken;\n    wrappedNativeToken = _wrappedNativeToken;\n    emit WrappedNativeTokenSet(oldToken, _wrappedNativeToken);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This function sets the wrapped native token address, which can vary across different chains."}),"\n",(0,i.jsx)(n.h3,{id:"view-functions",children:"View Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function getJackpotBalance() external view override returns (uint256 balance) {\n    if (wrappedNativeToken != address(0)) {\n        return jackpotBalances[wrappedNativeToken];\n    }\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the current jackpot balance in the wrapped native token."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function getJackpotBalance(address token) external view returns (uint256) {\n    return jackpotBalances[token];\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the jackpot balance for any specific token."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function getLastWinTime() external view override returns (uint256 timestamp) {\n    return lastWinTimestamp;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the timestamp of the last jackpot win."}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access Control"}),": Only the owner (typically the distributor contract) can trigger jackpot payments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Balance Verification"}),": Checks are performed to ensure sufficient balance before payments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SafeERC20"}),": Uses SafeERC20 for all token transfers to prevent common vulnerabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ETH Reception"}),": Includes a ",(0,i.jsx)(n.code,{children:"receive()"})," function to accept ETH transfers if needed"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,i.jsx)(n.p,{children:"The DragonJackpotVault integrates with:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OmniDragon Token"}),": Receives jackpot fees from token transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DragonJackpotDistributor"}),": Receives payment requests when winners are selected"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Tokens"}),": Can hold and distribute various tokens as prizes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Event"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"JackpotAdded(address indexed token, uint256 amount)"})}),(0,i.jsx)(n.td,{children:"Emitted when funds are added to the jackpot"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"JackpotPaid(address indexed token, address indexed winner, uint256 amount)"})}),(0,i.jsx)(n.td,{children:"Emitted when a jackpot prize is paid to a winner"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"WrappedNativeTokenSet(address indexed oldToken, address indexed newToken)"})}),(0,i.jsx)(n.td,{children:"Emitted when the wrapped native token address is updated"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"jackpot-flow",children:"Jackpot Flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User\n    participant OmniDragon\n    participant Vault as DragonJackpotVault\n    participant Distributor\n    participant Winner\n    \n    User->>OmniDragon: Trade Token (generates fees)\n    OmniDragon->>Vault: addToJackpot(amount)\n    Note over Vault: Jackpot balance increases\n    \n    User->>OmniDragon: Makes winning trade\n    OmniDragon->>Distributor: Notifies of winner\n    Distributor->>Vault: payJackpot(winner, amount)\n    Vault->>Winner: Transfer jackpot amount\n    Note over Vault: Update lastWinTimestamp"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);