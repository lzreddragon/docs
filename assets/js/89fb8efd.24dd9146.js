"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[5977],{3778:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"contracts/randomness/vrf-utils","title":"VRF Utility Library","description":"The ChainlinkVRFImplementations library provides a collection of utility functions for working with random numbers generated by verifiable random function (VRF) providers like Chainlink.","source":"@site/docs/contracts/randomness/vrf-utils.md","sourceDirName":"contracts/randomness","slug":"/contracts/randomness/vrf-utils","permalink":"/contracts/randomness/vrf-utils","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/contracts/randomness/vrf-utils.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"contracts","previous":{"title":"VRF Consumer","permalink":"/contracts/randomness/vrf-consumer"},"next":{"title":"Cross-Chain Randomness Architecture","permalink":"/contracts/randomness/cross-chain-architecture"}}');var t=i(4848),s=i(8453);const a={sidebar_position:4},o="VRF Utility Library",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Library Details",id:"library-details",level:2},{value:"Data Structures",id:"data-structures",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"Random Number in Range",id:"random-number-in-range",level:3},{value:"Multiple Random Numbers",id:"multiple-random-numbers",level:3},{value:"Random Indices Selection",id:"random-indices-selection",level:3},{value:"Array Shuffling",id:"array-shuffling",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Jackpot Winner Selection",id:"jackpot-winner-selection",level:3},{value:"NFT Trait Generation",id:"nft-trait-generation",level:3},{value:"Random Sampling",id:"random-sampling",level:3},{value:"Randomized Distribution",id:"randomized-distribution",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Integration with OmniDragon",id:"integration-with-omnidragon",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"vrf-utility-library",children:"VRF Utility Library"})}),"\n",(0,t.jsx)(e.p,{children:"The ChainlinkVRFImplementations library provides a collection of utility functions for working with random numbers generated by verifiable random function (VRF) providers like Chainlink."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.p,{children:"This library offers a set of helper functions that simplify common operations when working with random numbers, such as generating numbers within specific ranges, creating multiple random numbers from a single seed, selecting random indices, and shuffling arrays."}),"\n",(0,t.jsx)(e.mermaid,{value:"flowchart TD\n    A[Random Seed] --\x3e B[ChainlinkVRFImplementations]\n    B --\x3e C[getRandomInRange]\n    B --\x3e D[getMultipleRandomNumbers]\n    B --\x3e E[getRandomIndices]\n    B --\x3e F[shuffleArray]\n    \n    C --\x3e G[Jackpot Winner Selection]\n    D --\x3e H[NFT Trait Generation]\n    E --\x3e I[Random Sampling]\n    F --\x3e J[Fair Distribution]"}),"\n",(0,t.jsx)(e.h2,{id:"library-details",children:"Library Details"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Source:"})," ",(0,t.jsx)(e.a,{href:"https://github.com/wenakita/omnidragon/blob/main/contracts/chainlink/ChainlinkVRFImplementations.sol",children:(0,t.jsx)(e.code,{children:"ChainlinkVRFImplementations.sol"})})]}),"\n",(0,t.jsx)(e.h3,{id:"data-structures",children:"Data Structures"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"struct RequestStatus {\n    bool fulfilled;\n    uint256 randomness;\n    uint256 timestamp;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(e.h3,{id:"random-number-in-range",children:"Random Number in Range"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"/**\n * @dev Calculate a random number between min and max from a seed\n * @param _seed The random seed to use\n * @param _min The minimum value (inclusive)\n * @param _max The maximum value (inclusive)\n * @return A random number between min and max\n */\nfunction getRandomInRange(\n    uint256 _seed,\n    uint256 _min,\n    uint256 _max\n) internal pure returns (uint256)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"getRandomInRange"})," function generates a random number within a specific range [min, max] using a provided random seed."]}),"\n",(0,t.jsx)(e.h3,{id:"multiple-random-numbers",children:"Multiple Random Numbers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"/**\n * @dev Generate multiple random numbers from a seed\n * @param _seed The random seed to use\n * @param _count The number of random numbers to generate\n * @return An array of random numbers\n */\nfunction getMultipleRandomNumbers(\n    uint256 _seed,\n    uint256 _count\n) internal pure returns (uint256[] memory)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"getMultipleRandomNumbers"})," function generates an array of random numbers from a single seed by using different derivations of the original seed."]}),"\n",(0,t.jsx)(e.h3,{id:"random-indices-selection",children:"Random Indices Selection"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"/**\n * @dev Generate a random subset of indices from a range\n * @param _seed The random seed to use\n * @param _count The number of indices to select\n * @param _max The maximum index value (exclusive)\n * @return An array of random indices\n */\nfunction getRandomIndices(\n    uint256 _seed,\n    uint256 _count,\n    uint256 _max\n) internal pure returns (uint256[] memory)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"getRandomIndices"})," function selects a set of unique random indices from the range [0, max-1], using the Fisher-Yates shuffle algorithm to ensure unbiased selection."]}),"\n",(0,t.jsx)(e.h3,{id:"array-shuffling",children:"Array Shuffling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"/**\n * @dev Shuffle an array using a random seed\n * @param _seed The random seed to use\n * @param _array The array to shuffle\n */\nfunction shuffleArray(\n    uint256 _seed,\n    uint256[] memory _array\n) internal pure returns (uint256[] memory)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"shuffleArray"})," function performs a random shuffle of an array using the Fisher-Yates algorithm with a supplied random seed."]}),"\n",(0,t.jsx)(e.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsx)(e.h3,{id:"jackpot-winner-selection",children:"Jackpot Winner Selection"}),"\n",(0,t.jsx)(e.p,{children:"Use the library to select a lottery winner based on probabilities:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"// Assuming we have a random seed from a VRF source\nuint256 randomSeed = vrfRandomness;\n\n// Select a winner from 1000 participants based on their weights (tickets)\nuint256[] memory weights = new uint256[](1000);\n// ... fill weights array ...\n\n// Get the total weight\nuint256 totalWeight = 0;\nfor (uint256 i = 0; i < weights.length; i++) {\n    totalWeight += weights[i];\n}\n\n// Get a random number in the range [1, totalWeight]\nuint256 randomNum = ChainlinkVRFImplementations.getRandomInRange(\n    randomSeed, \n    1, \n    totalWeight\n);\n\n// Find the winner\nuint256 cumulativeWeight = 0;\nuint256 winner = 0;\nfor (uint256 i = 0; i < weights.length; i++) {\n    cumulativeWeight += weights[i];\n    if (randomNum <= cumulativeWeight) {\n        winner = i;\n        break;\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"nft-trait-generation",children:"NFT Trait Generation"}),"\n",(0,t.jsx)(e.p,{children:"Generate multiple random traits for an NFT from a single seed:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"function generateNFTTraits(uint256 _tokenId, uint256 _seed) internal pure returns (uint256[] memory) {\n    // Generate 5 traits for the NFT\n    uint256[] memory traits = ChainlinkVRFImplementations.getMultipleRandomNumbers(_seed, 5);\n    \n    // Normalize the traits to specific ranges\n    traits[0] = traits[0] % 100;  // background (0-99)\n    traits[1] = traits[1] % 20;   // body (0-19)\n    traits[2] = traits[2] % 30;   // eyes (0-29)\n    traits[3] = traits[3] % 25;   // mouth (0-24)\n    traits[4] = traits[4] % 15;   // accessory (0-14)\n    \n    return traits;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"random-sampling",children:"Random Sampling"}),"\n",(0,t.jsx)(e.p,{children:"Select a random subset from a larger set without replacement:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"function selectRandomWinners(uint256 _seed, uint256 _winnerCount, uint256 _totalParticipants) internal pure returns (uint256[] memory) {\n    // Get random indices representing winners\n    return ChainlinkVRFImplementations.getRandomIndices(_seed, _winnerCount, _totalParticipants);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"randomized-distribution",children:"Randomized Distribution"}),"\n",(0,t.jsx)(e.p,{children:"Ensure fair distribution of rewards by shuffling recipient addresses:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"function distributeRewards(uint256 _seed, address[] memory _recipients, uint256[] memory _amounts) internal {\n    // Get indices in randomized order\n    uint256[] memory indices = new uint256[](_recipients.length);\n    for (uint256 i = 0; i < _recipients.length; i++) {\n        indices[i] = i;\n    }\n    \n    // Shuffle the indices\n    indices = ChainlinkVRFImplementations.shuffleArray(_seed, indices);\n    \n    // Distribute rewards in random order\n    for (uint256 i = 0; i < indices.length; i++) {\n        uint256 idx = indices[i];\n        // Transfer rewards to the recipient at the shuffled index\n        // token.transfer(_recipients[idx], _amounts[idx]);\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(e.p,{children:"When using this library, keep these security aspects in mind:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Seed Quality"}),": The quality of randomness depends on the seed source. Always use a verified random source like Chainlink VRF."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Modulo Bias"}),": For very large ranges, be aware of potential modulo bias and consider alternative approaches."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Gas Limitations"}),": Functions that create arrays (like ",(0,t.jsx)(e.code,{children:"getMultipleRandomNumbers"}),") should be used with reasonable array sizes to avoid gas limitations."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Predictability"}),": Do not use block variables like ",(0,t.jsx)(e.code,{children:"block.timestamp"})," or ",(0,t.jsx)(e.code,{children:"block.difficulty"})," as seeds in production as they can be manipulated or predicted."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Overflow Prevention"}),": The library inherits Solidity 0.8.x's built-in overflow checks for safe arithmetic operations."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"integration-with-omnidragon",children:"Integration with OmniDragon"}),"\n",(0,t.jsx)(e.p,{children:"Within the OmniDragon ecosystem, this library is used in multiple components:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Jackpot System"}),": For selecting winners based on ticket weights"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Governance"}),": For random sampling in certain voting mechanisms"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Partner Program"}),": For fair distribution of rewards"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Cross-Chain Bridge"}),": For secure and unpredictable token distribution"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);