"use strict";(self.webpackChunksonic_red_dragon_docs=self.webpackChunksonic_red_dragon_docs||[]).push([[4750],{7529:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"concepts/cross-chain","title":"Cross-Chain Architecture","description":"OmniDragon is built from the ground up as a cross-chain token system, enabling seamless operations across multiple blockchains while maintaining coherent state and security.","source":"@site/docs/concepts/cross-chain.md","sourceDirName":"concepts","slug":"/concepts/cross-chain","permalink":"/concepts/cross-chain","draft":false,"unlisted":false,"editUrl":"https://github.com/wenakita/sonicreddragon-docs/edit/main/docs/concepts/cross-chain.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Cross-Chain Architecture","sidebar_position":5},"sidebar":"concepts","previous":{"title":"Security Architecture","permalink":"/concepts/security"},"next":{"title":"Randomness System","permalink":"/concepts/randomness"}}');var i=s(4848),o=s(8453);const t={title:"Cross-Chain Architecture",sidebar_position:5},a="OmniDragon Cross-Chain Architecture",c={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Message Flow Sequence",id:"message-flow-sequence",level:2},{value:"Token Consistency Model",id:"token-consistency-model",level:2},{value:"Contract Architecture",id:"contract-architecture",level:2},{value:"Security Features",id:"security-features",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"omnidragon-cross-chain-architecture",children:"OmniDragon Cross-Chain Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"OmniDragon is built from the ground up as a cross-chain token system, enabling seamless operations across multiple blockchains while maintaining coherent state and security."}),"\n",(0,i.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The diagram below illustrates the high-level architecture of OmniDragon's cross-chain functionality:"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TB\n    %% Define main components with clear visual hierarchy\n    subgraph Core ["Core Protocol"]\n        direction TB\n        TOKEN["OmniDragon Token"]:::core\n        BRIDGE["OmniDragon Bridge"]:::core\n        ROUTER["Message Router"]:::core\n    end\n    \n    subgraph LZ ["LayerZero Protocol"]\n        direction TB\n        LZ_EP["LayerZero Endpoint"]:::lz\n        LZ_R["LayerZero Relayer"]:::lz\n        LZ_O["LayerZero Oracle"]:::lz\n    end\n    \n    subgraph Networks ["Blockchain Networks"]\n        direction LR\n        ETH["Ethereum"]:::eth\n        ARB["Arbitrum"]:::arb\n        OPT["Optimism"]:::opt\n        BSC["BNB Chain"]:::bsc\n        AVAX["Avalanche"]:::avax\n    end\n    \n    %% Connect components\n    TOKEN --\x3e|Uses| BRIDGE\n    BRIDGE --\x3e|Uses| ROUTER\n    ROUTER --\x3e|Sends via| LZ_EP\n    LZ_EP --\x3e|Relayed by| LZ_R\n    LZ_EP --\x3e|Verified by| LZ_O\n    \n    %% Connect networks to protocol\n    ETH --- LZ_EP\n    ARB --- LZ_EP\n    OPT --- LZ_EP\n    BSC --- LZ_EP\n    AVAX --- LZ_EP\n    \n    %% Apply styling\n    classDef core fill:#e3f2fd,stroke:#2196f3,color:#0d47a1\n    classDef lz fill:#e8f5e9,stroke:#4caf50,color:#1b5e20\n    classDef eth fill:#eceff1,stroke:#607d8b,color:#263238\n    classDef arb fill:#ede7f6,stroke:#7e57c2,color:#311b92\n    classDef opt fill:#e8eaf6,stroke:#5c6bc0,color:#1a237e\n    classDef bsc fill:#fff8e1,stroke:#ffc107,color:#ff6f00\n    classDef avax fill:#ffebee,stroke:#f44336,color:#b71c1c\n    \n    %% Style subgraphs\n    style Core fill:#e3f2fd,stroke:#bbdefb,color:#0d47a1\n    style LZ fill:#e8f5e9,stroke:#c8e6c9,color:#1b5e20\n    style Networks fill:#f5f5f5,stroke:#e0e0e0,color:#424242'}),"\n",(0,i.jsx)(n.h2,{id:"message-flow-sequence",children:"Message Flow Sequence"}),"\n",(0,i.jsx)(n.p,{children:"The sequence diagram below demonstrates how messages and tokens flow between chains:"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User\n    participant Source as Source Chain\n    participant Bridge as LayerZero Bridge\n    participant Dest as Destination Chain\n    \n    %% Add styling to different sections\n    rect rgb(238, 242, 255)\n    note over User,Source: Transaction initiation\n    end\n    \n    User->>+Source: Send tokens to destination chain\n    Source->>Source: Lock or burn tokens\n    Source->>+Bridge: Send cross-chain message\n    \n    rect rgb(239, 246, 239)\n    note over Bridge: Cross-chain verification\n    end\n    \n    Bridge->>Bridge: Validate message\n    Bridge->>Bridge: Generate and verify proofs\n    Bridge->>+Dest: Deliver verified message\n    \n    rect rgb(240, 244, 248)\n    note over Dest,User: Transaction completion\n    end\n    \n    Dest->>Dest: Process message\n    Dest->>Dest: Mint or unlock tokens\n    Dest->>-User: Credit tokens on destination\n    \n    Bridge--\x3e>-Source: Confirm message processed\n    Source--\x3e>-User: Transaction complete"}),"\n",(0,i.jsx)(n.h2,{id:"token-consistency-model",children:"Token Consistency Model"}),"\n",(0,i.jsx)(n.p,{children:"OmniDragon maintains token supply consistency across chains using a hybrid lock/mint model:"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart LR\n    %% Define the consistency model\n    subgraph Home ["Home Chain (Ethereum)"]\n        direction TB\n        MASTER["Master Supply"]:::primary\n        LOCKED["Locked Tokens"]:::primary\n    end\n    \n    subgraph Remote ["Remote Chains"]\n        direction TB\n        subgraph Chain1 ["Arbitrum"]\n            ARB_SUPPLY["Local Supply"]:::secondary\n        end\n        \n        subgraph Chain2 ["Optimism"]\n            OPT_SUPPLY["Local Supply"]:::secondary\n        end\n        \n        subgraph Chain3 ["BNB Chain"]\n            BSC_SUPPLY["Local Supply"]:::secondary\n        end\n    end\n    \n    %% Define token flow\n    MASTER --\x3e|"Lock"| LOCKED\n    LOCKED --\x3e|"Unlock on return"| MASTER\n    \n    LOCKED --\x3e|"Mint equivalent"| ARB_SUPPLY\n    LOCKED --\x3e|"Mint equivalent"| OPT_SUPPLY\n    LOCKED --\x3e|"Mint equivalent"| BSC_SUPPLY\n    \n    ARB_SUPPLY --\x3e|"Burn on exit"| LOCKED\n    OPT_SUPPLY --\x3e|"Burn on exit"| LOCKED\n    BSC_SUPPLY --\x3e|"Burn on exit"| LOCKED\n    \n    %% Apply styling\n    classDef primary fill:#e3f2fd,stroke:#2196f3,color:#0d47a1\n    classDef secondary fill:#f3e5f5,stroke:#9c27b0,color:#4a148c\n    \n    %% Style subgraphs\n    style Home fill:#e3f2fd,stroke:#bbdefb,color:#0d47a1\n    style Remote fill:#f3e5f5,stroke:#e1bee7,color:#4a148c\n    style Chain1 fill:#ede7f6,stroke:#d1c4e9,color:#311b92\n    style Chain2 fill:#e8eaf6,stroke:#c5cae9,color:#1a237e\n    style Chain3 fill:#fff8e1,stroke:#ffecb3,color:#ff6f00'}),"\n",(0,i.jsx)(n.h2,{id:"contract-architecture",children:"Contract Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The following class diagram shows the key contracts that enable cross-chain functionality:"}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram\n    %% Define key interfaces\n    class IOmniDragonToken {\n        <<interface>>\n        +mint(address, uint256)\n        +burn(address, uint256)\n        +transferFrom(address, address, uint256)\n    }\n    \n    class IOmniDragonBridge {\n        <<interface>>\n        +sendTokens(uint16 chainId, address to, uint256 amount)\n        +receiveTokens(uint16 chainId, address to, uint256 amount)\n    }\n    \n    class ILayerZeroEndpoint {\n        <<interface>>\n        +send(uint16 dstChainId, bytes payload, address payable refundAddress)\n        +receivePayload(uint16 srcChainId, bytes srcAddress, bytes payload)\n    }\n    \n    %% Define implementation classes\n    class OmniDragonToken {\n        -mapping balances\n        -uint256 totalSupply\n        -address bridge\n        +mint(address, uint256)\n        +burn(address, uint256)\n        +transferFrom(address, address, uint256)\n    }\n    \n    class OmniDragonBridge {\n        -address token\n        -address lzEndpoint\n        -mapping remoteTokens\n        -mapping remoteChains\n        +sendTokens(uint16 chainId, address to, uint256 amount)\n        +receiveTokens(uint16 chainId, address to, uint256 amount)\n        +lzReceive(uint16 srcChainId, bytes srcAddress, bytes payload)\n    }\n    \n    class LayerZeroEndpoint {\n        -address relayer\n        -address oracle\n        +send(uint16 dstChainId, bytes payload, address payable refundAddress)\n        +receivePayload(uint16 srcChainId, bytes srcAddress, bytes payload)\n    }\n    \n    %% Define relationships\n    IOmniDragonToken <|-- OmniDragonToken\n    IOmniDragonBridge <|-- OmniDragonBridge\n    ILayerZeroEndpoint <|-- LayerZeroEndpoint\n    \n    OmniDragonBridge --\x3e OmniDragonToken\n    OmniDragonBridge --\x3e LayerZeroEndpoint\n    \n    %% Apply styling\n    classDef interface fill:#e3f2fd,stroke:#2196f3,color:#0d47a1\n    classDef token fill:#e8f5e9,stroke:#4caf50,color:#1b5e20\n    classDef bridge fill:#f3e5f5,stroke:#9c27b0,color:#4a148c\n    classDef lz fill:#fff8e1,stroke:#ffc107,color:#ff6f00\n    \n    class IOmniDragonToken interface\n    class IOmniDragonBridge interface\n    class ILayerZeroEndpoint interface\n    class OmniDragonToken token\n    class OmniDragonBridge bridge\n    class LayerZeroEndpoint lz"}),"\n",(0,i.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,i.jsx)(n.p,{children:"OmniDragon's cross-chain system implements multiple security measures:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message Verification"}),": All cross-chain messages are cryptographically verified"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Oracle Validation"}),": Independent oracle networks verify cross-chain state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistency Checks"}),": Built-in checks ensure token supply consistency across chains"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Relayer Redundancy"}),": Multiple relayers ensure message delivery"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timeout Handling"}),": Automatic handling of timeout conditions with recovery mechanisms"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By leveraging LayerZero's secure cross-chain messaging infrastructure and adding OmniDragon-specific security measures, the system ensures reliable and secure token movement across blockchain networks."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);